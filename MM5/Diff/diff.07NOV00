===================================================================
CHANGES
diff -r3.6 -r3.16
11c11,434
< The current release is 3.3 (release-3-3, January 25, 2000).
---
> The current release is 3.4 (release-3-4, November 7, 2000).
> 
> ============================================================
> 
> 1. Bug fixes:
> 
> - Corrections in land use properties for summer season tundra in
>   old 13-category data, and summer season ground cover in 16-category
>   SiB data so that snow factor may be considered. (Thanks to 
>   Jing Zhang of Geophysical Institute of UAF.)
> 
>   Affected file:
>   Run/LANDUSE.TBL
> 
> - Adapt mm5.deck on Linux machines to run FDDA option.
> 
>   Affected file:
>   Templates/mm5.deck.linuxPGF77
> 
> - Another correction for domain suffixes in output files.
> 
>   Affected file:
>   domain/io/outtap.F
> 
> - Correct a problem when IFSKIP and grid FDDA are used together.
>   (This change is in the tar file since 5/30/00.)
> 
>   Affected file:
>   domain/io/rdinit.F
> 
> - Correct two typos. It affects graupel schemes and nest runs. On
>   some machines this may cause the model to abort.
> 
>   Affected file:
>   domain/nest/stotndt.F
> 
> - Correct two array dimension errors in shallow convective scheme
>   (thanks to Ruby Leung of PNL).
>   (This change is in the tar file since 5/30/00.)
> 
>   Affected file:
>   physics/cumulus/shallow/shallcu.F
> 
>   Another fix is put in to correct entrainment in this scheme.
> 
>   Affected file:
>   physics/cumulus/shallow/shallow.F, entrs.F
>   physics/cumulus/shared/precip.F
> 
> - Correct a bug in Reisner I scheme. Minor effect.
>   (Thanks to Chao-Tzuen Cheng from SUNY Albany.)
> 
>   Affected file:
>   physics/explicit/reisner1/exmoisr.F
> 
> - Correct a bug in Burk-Thompson scheme. The bug was introduced
>   in the 3-3 release due to change of definition of longwave
>   radiation when CCM2 radiation scheme was used. (See Changes
>   listed below.) (Thanks to Xin-Zhong Liang of University of Illinois.)
>   (This change is in the tar file since 3/15/00.)
> 
>   Affected file:
>   physics/pbl_sfc/btpbl/hoskeep.F
> 
>   Also, snow effect is considered in this scheme now.
> 
>   physics/pbl_sfc/btpbl/hoskeep.F, navypb.F
> 
> - Correct a small error in Gayno-Seaman PBL scheme's tstar calculation.
>   (This change is in the tar file since 5/17/00.)
> 
>   Affected file:
>   physics/pbl_sfc/gspbl/gspbl.F
> 
> - Initialize variable MITER0 used in Blackadar scheme (Thanks to
>   Xinzhong Liang of University of Illinois).
>   (This change is in the tar file since 5/30/00.)
> 
>   Affected files:
>   include/varia.incl
>   physics/pbl_sfc/hirpbl/hirpbl.F
> 
> - Make soil time step more conservative in ISOIL=1 option.
>   A new namelist variable, SOILFAC, can be added in namelist section
>   PPARAM to control how conservative one wants the soil time step to be.
>   The default is 1.0, and a number greater than 1.0 will make the
>   soil time step more conservative.
> 
>   Affected file:
>   include/param2.incl
>   domain/initial/param.F
>   physics/pbl_sfc/util/slab.F
> 
> - Correct a slight error in surface pressure and theta calculation
>   in LSM scheme. Could lead to ground temperatures a few tenths of
>   a degree warmer.
>   (This change is in the tar file since 5/17/00.)
> 
>   Affected file:
>   physics/pbl_sfc/osusfc/surfce.F
> 
> - Declare a variable, KDT, real. Small effect on sfc runoff.
> 
>   Affected file:
>   physics/pbl_sfc/osusfc/srt.F
> 
>  
>   MPP bug fixes:
> 
> - Add MPP directives for field SNOWC initialization if LSM option
>   is selected. Even though SNOWC field is not directly used by
>   LSM, but its presence affects definitions of other land properties
>   if IFSNOW is set to 1. Affect MPP/LSM runs - giving bad results.
>   If you obtain the new tar file, please remember to obtain the new
>   MPP.TAR.gz file.
> 
>   Affected file:
>   domain/io/rdinit.F
> 
> 
> 2. Changes and improvements:
> 
> - Minor changes in compilation flags for IBM and Alpha, and new ones
>   for ALPHA Linux with MPI, NEC SX-4 (still under development), and Sun MPI.
> 
>   Affected file:
>   configure.user
> 
> - Removed unused indices in parallel directives.
> 
>   Affected file:
>   domain/boundary/nudge.F
> 
> - Code clean up: move thermal capacity CAPG calculation from sfcrad.F to
>   initialization routines.
> 
>   Affected files:
>   domain/initial/init.F
>   domain/nest/initnest.F
>   physics/radiation/sfc/sfcrad.F
> 
> - Use sidereal day instead of solar day.
> 
>   Affected file:
>   domain/initial/param.F
> 
> - Add lookup-table option for some explicit schemes in big header if
>   it is selected (MPHYSTBL = 1).
> 
>   Affected file:
>   domain/initial/param.F
> 
> - ANSI compliance for some print statements.
> 
>   Affected files:
>   domain/initial/param.F, init.F
>   domain/nest/initnest.F
> 
> - Change output time checks from real (XTIME) to integer (KTAU).
>   This prevents model output times drifting when integration time is long.
> 
>   Affected files:
>   domain/initial/init.F
>   domain/io/output.F, initsav.F, shutdo.F
>   domain/nest/chknst.F
> 
> - The model now allows for time-step change at a restart. 
>   However there are a few constants
>   in the model (e.g., GNUDGE, XKHMAX, and XKHZ) that also depend on
>   time step, which are not changed. Note also that changing time step is 
>   not a recommended practice. It only provides a convenient way if it
>   is needed to continue the run and/or debug the program.
> 
>   Affected file:
>   domain/io/initsav.F
> 
> - Related to the time-step change at a restart, the print of time (in sec)
>   and domain number, which appear in mm5.print.out file, is now done in solve, 
>   rather than sound. Also note that because of this change, a nest that
>   starts at later time will have the same time printed as the other domains.
> 
>   Affected files:
>   dynamics/nonhydro/solve.F, sound.F
> 
> - Cross-point arrays on output are filled with values in the row and column
>   next to them. This will make data handling in post-processing software 
>   a bit easier. However, users must be aware that dot- and cross-point
>   variables are not located at the same grid point (see MM5 document for details).
> 
>   Affected file:
>   domain/io/outtap.F
>   domain/util/Makefile, fillcrs.F (new)
> 
> - Prevent vegetation fraction from becoming too small, and
>   use WEASD (water-equivalent snow depth) to replace snow cover field if
>   it is present.
> 
>   Affected file:
>   domain/io/rdinit.F
> 
> - In V3.4, deep soil temp from output of TERRAIN is adjusted to the model
>   terrain in REGRID/regridder; it is no longer done in MM5. But the code
>   is backward compatible if you use pre-V3.4 MMINPUT files.
> 
>   Affected file:
>   domain/io/rdinit.F
> 
> - Fortran units for TERRAIN input are closed after use.
> 
>   Affected file:
>   domain/io/rdter.F
> 
> - Allow sea ice interpolation.
>   Adjust substrate temperature in nests when terrain changes.
> 
>   Affected file:
>   domain/nest/initnest.F
> 
> - Make coarse and nest land-water mask field (XLAND) consistent at feedback stage.
> 
>   Affected file:
>   domain/nest/feedbk.F
> 
> - Interpolate coarse domain soil T and moisture field to nest. This makes
>   the nest output look nicer along boundaries.
> 
>   Affected file:
>   domain/nest/stotndi.F
> 
> - Make a number of subroutines 'implicit none'.
> 
>   Affected files:
>   domain/util/equate.F
>   physics/cumulus/grell/cup.F, cupara3.F, maximi.F, minimi.F
>   physics/cumulus/kf/condload.F, envirtht.F, kfpara.F, tpmix.F
>   physics/explicit/reisner1/exmoisr.F
>   physics/pbl_sfc/mrfpbl/mrfpbl.F, tridi2.F
>   physics/pbl_sfc/util/slab.F
>   physics/radiation/rrtm/rrtm_k_g.F 
> 
> - Remove unused variables.
> 
>   Affected file:
>   include/varia.incl
> 
> - Remove a number of 'not-so-useful' prints from sound routine.
> 
>   Affected file:
>   dynamics/nonhydro/sound.F
> 
> - If a user has very large vertical dimension in MM5 grid, and 
>   does not compile/use Kuo scheme, one may reduce the memory requirement
>   by specifying -DNOKUO in FCFLAGS of the configure.user file so
>   that two big arrays (TWGHT and VQFLX) used by Kuo scheme will not
>   be dimensioned.
> 
>   Affected file:
>   include/pmoist.incl
> 
> - Make local array scalar.
> 
>   Affected file:
>   physics/advection/simple/vadv.F
> 
> - Add IVQADV option for Anthes-Kuo scheme (ICUPA=2).
> 
>   Affected file:
>   physics/cumulus/kuo/cupara2.F
> 
> - slab.F will be compiled all the time.
> 
>   Affected file:
>   physics/pbl_sfc/Makefile
> 
> - Reduce ground temperature and ground potential temperature conversoin
>   calculations to improve accuracy.
>   (Thanks to Guenther Zaengl of University of Munich, Germany.)
> 
>   Affected files:
>   physics/pbl_sfc/bulk/blkpbl.F
>   physics/pbl_sfc/gspbl/gspbl.F
>   physics/pbl_sfc/mrfpbl/mrfpbl.F
>   physics/pbl_sfc/myepbl/myepbl.F
>   physics/pbl_sfc/util/slab.F
>   physics/pbl_sfc/osusfc/surfce.F
> 
> - Allow Gayno-Seaman scheme to run with mixed phase explicit scheme
>   (IMPHYS=5).
> 
>   Affected file:
>   physics/pbl_sfc/gspbl/gspbl.F
> 
> - Change all data statements in RRTM to a binary file. This significantly
>   reduces compile time on some platforms (noteably, Cray).
> 
>   Affected files:
>   physics/radiation/rrtm/rrtm_init.F, rrtm_k_g.F
>   Run/RRTM_DATA (new)
> 
>   Minor clean up:
>   physics/radiation/rrtm/rrtm_setcoef.F, rrtm_taumol.F
> 
> 
> 3. New in V3.4:
> 
> - Additional outputs. If MRF PBL scheme is used, then additional 2D output
>   of 10 m u and v component of winds, 2 m temperature and mixing ratio
>   are now in the standard output (field names T2, Q2, U10, and V10). 
> 
>   Affected files:
>   physics/pbl_sfc/mrfpbl/mrfpbl.F
>   domain/io/outtap.F
>   include/point2d.incl, point2dn.incl
> 
>   If you use atmospheric radiation options, 2, 3 and 4, additional two 2D
>   fields are output: out-going long- and short-wave radiation (field names
>   LWOUT and SWOUT).
> 
>   Affected routines:
>   domain/io/outtap.F
>   physics/radiation/rrtm/rrtm.F
>   physics/radiation/ccm2/colmod.F, radclw.F, radcsw.F, radctl.F, radout.F
>   physics/radiation/cloud/lwrad.F, swrad.F
>   dynamics/nonhydro/solve.F
>   include/parame, point2d.incl, point2dn.incl
> 
> - LANDUSE.TBL values are only output if ISFPAR = 1. The constant landuse
>   properties are output in big header.
> 
>   Affected file:
>   domain/io/outtap.F
> 
> - Add the simple soil moisture bucket scheme from MM5 real-time model run at 
>   NCAR/MMM. It is added to slab.F and can be used with IBLTYP=2,4,5, and 6. 
>   This scheme may be activated using namelist variable IMOIAV, which takes
>   3 values: 0: bucket model not used; 1: bucket model used, but initialize
>   it with climatological moisture availability data in LANDUSE.TBL; 
>   3: bucket model used, and initialize it with soil moisture data from those
>   datasets that are used to initialize OSU LSM (e.g., NNRP, AWIP, and AVN data).
> 
>   Affected file:
>   domain/initial/param.F, init.F
>   domain/nest/initnest.F, feedbk.F
>   domain/io/rdinit.F, outtap.F
>   dynamics/nonhydro/solve.F
>   Run/BUCKET.TBL (new)
>   physics/pbl_sfc/util/slab.F
>   physics/pbl_sfc/bulk/blkpbl.F
>   physics/pbl_sfc/hirpbl/hirpbl.F
>   physics/pbl_sfc/mrfpbl/mrfpbl.F
>   physics/pbl_sfc/myepbl/myepbl.F
>   physics/pbl_sfc/gspbl/gspbl.F
>   physics/radiation/sfc/sfcrad.F
>   Templates/lparam
> 
> - Add capability to output time-series of 14 2-D variables.
> 
>   Affected files:
>   domain/initial/Makefile, init.F, initts.F (new)
>   domain/io/Makefile, initsav.F, outts.F (new)
>   domain/nest/initnest.F
>   dynamics/nonhydro/solve.F
>   include/parame, param2.incl
>   Templates/oparam
> 
> - Allow SST/SEAICE/SNOW COVER to be updated during (long) model simulations.
>   This requires a user to use the V3.4 REGRID and INTERPF to
>   generate appropriate LOWBDY files. 
>   Once a user has these input in the LOWBDY files, one may control whether to 
>   allow these fields to vary in time with a namelist option ISSTVAR (=1 means to
>   vary, =0 means do not vary).
> 
>   The model also allows nests to input LOWBDY files if they are present in 
>   the Run directory. This is recommended if a user has high-resolution lower 
>   boundary conditions such as sea-surface temp, sea ice, and snow cover data.
> 
>   Affected files:
>   Run/mm5.F
>   include/param2.incl
>   domain/boundary/Makefile, lbdyin.F (new)
>   domain/initial/init.F, param.F
>   domain/nest/initnest.F
>   Templates/lparam
>   
> - Nest initialization with LSM and IOVERW=2 option. This allows
>   nest initialized at either the beginning or later model times to
>   have the correct land-water masked fields without getting them
>   from MMINPUT files.
> 
>   Affected routines:
>   domain/nest/Makefile, initnest.F, 
>   domain/nest/nestlsm.F (new)
>   domain/io/rdter.F
> 
> - Addition of a new LSM scheme, Pleim-Xiu LSM (ISOIL=3 and IBLTYP=7). 
>   This scheme requires extra output from program TERRAIN (IEXTRA switch).
> 
>   Affected routines:
>   Util/parseconfig.c
>   include/parame, soilp.incl, soilpn.incl
>   domain/initial/init.F, param.F
>   domain/io/outtap.F, rdinit.F
>   domain/nest/initnest.F
>   dynamics/nonhydro/solve.F
>   memory/address/addall.F addrx1c.F addrx1n.F
>   physics/pbl_sfc/Makefile
>   physics/pbl_sfc/pxpbl/Makefile acm.F eddymm4.F pxpbl.F qflux.F radsfc.F sfcmm4.F
>                         smass.F soilav.F surface.F vdiff.F vegeland.F (all new)
> 
> For complete new features since Version 3.1 release, please visit MM5 Web page:
> http://www.mmm.ucar.edu/mm5/mm5v3/whatisnewv3-now.html
> 
> 
> 4. MPP updates:
> 
> - Port to Alpha Linux clusters, and Sun MPI
> 
> - Port to NEC SX/5 (in progress)
> 
> - Vector optimization option for CUPARA3, EXMOISR, and MRFPBL for 
>   Fujitsu VPP5000
> 
> - The new Pleim-Xiu LSM is not yet ported to MPP MM5.
> 
13a437
> 
===================================================================
Makefile
diff -r3.1 -r3.5
86c86
< 	(cd include; $(MAKE) code)
---
> 	(cd include; $(MAKE) code ;  cd ../pick ; csh ../MPP/cutincludes $(CUT) )
96,97c96,97
< 	(cd include; $(MAKE) code )
< 	(cd MPP/RSL/RSL ; if [ "$(RUNTIME_SYSTEM)" = "alpha" ]  ; then $(MAKE) CC=$(MCC) $(MPP_TARGET) ; else if [ "$(RUNTIME_SYSTEM)" = "linux" ] ; then $(MAKE) LINUX_MPIHOME=$(LINUX_MPIHOME) $(MPP_TARGET) ; else $(MAKE) $(MPP_TARGET) ; fi ; fi  )
---
> 	(cd include; $(MAKE) code ;  cd ../pick ; csh ../MPP/cutincludes $(CUT) )
> 	(cd MPP/RSL/RSL ; if [ "$(RUNTIME_SYSTEM)" = "alpha" -o "$(RUNTIME_SYSTEM)" = "alphavector" ]  ; then $(MAKE) CC=$(MCC) FC=$(MFC) UNDERSCORE=$(UNDERSCORE) $(MPP_TARGET) ; else if [ "$(RUNTIME_SYSTEM)" = "linux" ] ; then $(MAKE) LINUX_MPIHOME=$(LINUX_MPIHOME) $(MPP_TARGET) ; else $(MAKE) $(MPP_TARGET) ; fi ; fi  )
118c118
< 	(cd MPP/RSL/RSL; $(MAKE) clean ; /bin/rm -f librsl.a )
---
> 	(cd MPP/RSL/RSL; $(MAKE) super )
===================================================================
README
diff -r3.2 -r3.4
2c2
< VERSION 3 MM5 PROGRAM (release 3-2)
---
> VERSION 3 MM5 PROGRAM (release 3-4)
65a66,70
> ***************************************************************
> Also see the online self-tutorial at
> http://www.mmm.ucar.edu/mm5/mm5v3/tutorial/teachyourself.html
> ***************************************************************
> 
119,120c124,125
< IFREST = .TRUE., and IXTIMR in the deck, where IXTIMR should be printed at
< the end of last MM5 run.
---
> IFREST = .TRUE., and IXTIMR in the deck, where IXTIMR can be found in the 
> mm5.print.out file whenever a save file is written.
131a137,146
> 
> ----------------
> Using LSM option
> ----------------
> 
> Please read online Tutorial Notes/Users' Guide Appendix D for instructions on
> how to set up to run MM5 with LSM option. If you would like to run MM5 with
> a nest, it is recommended that the nest should start at hour 0 (unless you have
> no water body, such as ocean or lake, in your domain). The nest input file may
> be generated using coarse domain input files in NESTDOWN.
===================================================================
configure.user
diff -r3.20 -r3.37
21,27c21,31
< #    7a. IBM SP2
< #    7b. Cray T3E
< #    7c. SGI Origin 2000
< #    7d. HP Exemplar
< #    7e. DEC ALPHA/MPI
< #    7f. Fujitsu VPP
< #    7g. Network of Linux PCs with MPI
---
> #    7a.  IBM SP2
> #    7a.1 IBM SP2 with SMP nodes
> #    7b.  Cray T3E
> #    7c.  SGI Origin 2000
> #    7d.  HP Exemplar
> #    7e.  Compaq ALPHA/MPI
> #    7e.1 ALPHA Linux with MPI
> #    7f.  Fujitsu VPP
> #    7g.  Network of Linux PCs with MPI
> #    7h.  NEC SX/5 (under development)
> #    7i.  Sun MPI
161c165
< #FC = f77
---
> #FC = f90
163c167
< #-fpe0 -align dcommons -align records -warn nounreachable -convert big_endian
---
> #     -fpe0 -align dcommons -align records -convert big_endian
206c210
< #FCFLAGS = -I$(LIBINCLUDE) -O3 -qarch=auto -qmaxmem=-1 -qsmp=noauto -qnosave -qstrict
---
> #FCFLAGS = -I$(LIBINCLUDE) -O2 -qarch=auto -qmaxmem=-1 -qsmp=noauto -qnosave -qstrict
210c214
< #LDOPTIONS = -qmaxmem=-1 -O3 -qarch=auto -bmaxstack:512000000 -bmaxdata:5120000
---
> #LDOPTIONS = -qmaxmem=-1 -O2 -qarch=auto -bmaxstack:512000000 -bmaxdata:2000000000
284a289
> #    Compilation of Arakawa-Schubert cumulus scheme requires imsl.
306,307c310,311
< #                                     6=Gayno-Seaman
< IBLTYP  = "5,5,2,0,0,0,0,0,0,0"
---
> #                                     6=Gayno-Seaman,7=Pleim-Xiu
> IBLTYP  = "5,5,0,0,0,0,0,0,0,0"
316c320,321
< #                                     2=OSU land-surface scheme (IBLTYP=5)
---
> #                                     2=OSU land-surface scheme (IBLTYP=5 only)
> #                                     3=Pleim-Xiu LSM (IBLTYP=7 only)
394,397c399,401
< #       - When MPP builds, it will use a copy of the file in MPP/RSL/Makefile.RSL.sp2
< #         which invokes the -qstrict option for the exmois routines.
< #       - The -bmaxdata:0x70000000 flag on LDOPTIONS was suggested by
< #         Katja Stokely, the IBM Applications Analyst at NCAR
---
> #       - For very large domains, use -bmaxdata:2000000000 -bmaxstack:268435456
> #         for load options (Peter Morreale/SCD)
> #       - If you enable -O3 optimization, add -qstrict as well
409c413,414
< #FCFLAGS = -O3 -qarch=auto -qzerosize -qsmp=noauto -qnosave -qmaxmem=-1
---
> #FCFLAGS = -O2 -qarch=auto -qcache=auto -qzerosize -qsmp=noauto -qnosave -qmaxmem=-1 \
> #          -qspillsize=2000
458a464,471
> #    
> #    It may be necessary to modify the MPI run time environment on the
> #    Origin as follows:
> #
> #         setenv MPI_MSGS_PER_PROC 4096
> #
> #    See also http://www.mmm.ucar.edu/mm5/mpp/helpdesk/20000621.txt
> #
462c475
< #MFC = f77 -n32 -mips4 -w
---
> #MFC = f90 -n32 -mips4 -w
464c477
< #MLD = f77 -n32 -mips4
---
> #MLD = f90 -n32 -mips4
510c523
< #    7e. DEC ALPHA/MPI/OpenMP (Thanks to Dave Sherden)
---
> #    7e. Compaq ALPHA/MPI/OpenMP (Thanks to Dave Sherden)
516a530
> #        - On prospect.ucar.edu (ES40), add the -lelan option to LDOPTIONS.
527a542
> ###### Compaq ES40 Cluster (prospect.ucar.edu) requires -lelan for OpenMP
530a546
> ##LDOPTIONS = -lmpi -lelan $(SPECIAL_OMP)
550a567,597
> #    7e.1  ALPHA Linux with MPI (Thanks Greg Lindahl, HPTi)
> #          (This has run on jet.fsl.noaa.gov)
> #-----------------------------------------------------------------------------
> #RUNTIME_SYSTEM = "alpha"
> #MPP_TARGET=$(RUNTIME_SYSTEM)
> ####### If using OpenMP for SMP parallelism on each MPI process ###
> ##SPECIAL_OMP = -omp
> #######
> #MFC = fort
> #MCC = mpicc
> #MLD = mpif77
> #UNDERSCORE = -DF2CSTYLE
> #LDOPTIONS = $(SPECIAL_OMP) -static
> #FCFLAGS = -O5 -arch ev6 -tune ev6 -align dcommons -align records \
> #          -convert big_endian $(SPECIAL_OMP)
> #LOCAL_LIBRARIES =
> #MAKE = make -i -r
> #AWK = awk
> #SED = sed
> #CAT = cat
> #CUT = cut
> #EXPAND = expand
> #M4 = m4
> #CPP = /lib/cpp -traditional -C -P
> #CPPFLAGS = -DMPI -DDEC_ALPHA $(UNDERSCORE)
> #CFLAGS = -DMPI -DDEC_ALPHA $(UNDERSCORE)
> #ARCH_OBJS = milliclock.o
> #IWORDSIZE = 4
> #RWORDSIZE = 4
> #LWORDSIZE = 4
> #-----------------------------------------------------------------------------
570,573c617,623
< # Newer system had difficulty in compiling MPP/FLIC/FLIC/dm. If you have 
< # trouble with this program, please download 
< #
< #        ftp://ftp.ucar.edu/mesouser/MM5V3/Util/dm.gz
---
> # Note for older systems. The configure.user is set up for VPP5000.
> # For older (VPP300/700) systems, it may be necessary to remove the
> # -KA32 and -Ka4 flags in the settings below.
> #
> # Note with v3.4: VECTOR=1 works only with IMPHYS=5, IBLTYP=5, and ICUPA=3. 
> # Other IMPHYS options and ICUPA options will work but won't be vector
> # optimized.  IBLTYP=2 will not compile with VECTOR=1.
575c625
< # 'chmod ugo+x dm' and copy into MPP/FLIC/FLIC. Or contact michalak@ucar.edu.
---
> # Debugging VECTOR=1 option on non-vector platforms: see MPP/README_VECDEBUG
583c633,640
< #FCFLAGS = -Sw -Wv,-Of,-te,-ilfunc,-noalias,-m3,-P255 -Oe,-P -Kfast -Pdos -lmpi -lmp -KA32
---
> ### debugging
> ### FCFLAGS = -Sw -g -Pdos -lmpi -lmp
> ### debugging; for debugging without MPI (also need to compile RSL with -DSTUBS)
> ### FCFLAGS = -Sw -g -Pdos -Of,-P,-E
> #FCFLAGS = -Sw -Wv,-Of,-te,-ilfunc,-noalias,-m3,-P255 \
> #          -Oe,-P -Kfast -Pdos -lmpi -lmp -KA32
> #FCVFLAGS = -Sw -Wv,-te,-noalias,-ilfunc,-Of,-m3,-P255 \
> #           -Of,-e,-P,-u -Kfast -Pdos -lmpi -lmp -KA32
594c651,655
< #CPPFLAGS = -DMPI -Dvpp -I$(MPIINCDIR)
---
> ### Uncomment only for debugging without MPI
> ### CPPFLAGS = -DMPI -Dvpp -I$(MPIINCDIR) -DKMA -DSTUBS
> ### CFLAGS = -DMPI -Dvpp -I$(MPIINCDIR) -KA32 -Ka4 -DSTUBS
> ### Normal settings for CPPFLAGS and CFLAGS
> #CPPFLAGS = -DMPI -Dvpp -I$(MPIINCDIR) -DKMA
600a662
> #VECTOR = 1
651a714,774
> #IWORDSIZE = 4
> #RWORDSIZE = 4
> #LWORDSIZE = 4
> #-----------------------------------------------------------------------------
> #    7h.  NEC SX-4 (under development)
> #-----------------------------------------------------------------------------
> #RUNTIME_SYSTEM = sx
> #MPP_TARGET=$(RUNTIME_SYSTEM)
> #MFC = f90
> #MCC = cc
> #MLD = $(MFC)
> #FCFLAGS = -V -E P -Wf"-init stack=zero heap=zero -O nooverlap" -USX  -float0 \
> #          -D$(RUNTIME_SYSTEM) -I$(LIBINCLUDE) -Wf"-L transform fmtlist summary" -g
> #FCFLAGS = -V -E P -C vopt -Wf"-init stack=zero heap=zero -O nooverlap" \
> #          -ew -USX  -float0 -D$(RUNTIME_SYSTEM) -I$(LIBINCLUDE) \
> #          -Wf"-L transform fmtlist summary"
> #LDOPTIONS = -float0 -lmpi -lmpiw -g
> #CFLAGS =
> #LOCAL_LIBRARIES =
> #MAKE = make -i -r
> #AWK = awk
> #SED = sed
> #CAT = cat
> #CUT = cut
> #EXPAND = expand
> #M4 = m4
> #CPP = /lib/cpp -C -P
> #CPPFLAGS = -DMPI -Dvpp -I$(LIBINCLUDE) -C -P -DDEC_ALPHA
> #CFLAGS = -DMPI -Dvpp -DDEC_ALPHA
> #ARCH_OBJS = milliclock.o
> #IWORDSIZE = 4
> #RWORDSIZE = 4
> #LWORDSIZE = 4
> #ASSUME_HOMOGENEOUS_ENVIRONMENT = 1
> #FLIC_MACROS = LMvpp.m4
> #VECTOR = 1
> #-----------------------------------------------------------------------------
> #    7i. Sun MPI (tested on k2.ucar.edu)
> #-----------------------------------------------------------------------------
> #RUNTIME_SYSTEM = "sunmpi"
> #MPP_TARGET=$(RUNTIME_SYSTEM)
> ###### If using OpenMP for SMP parallelism on each MPI process ###
> ##SPECIAL_OMP = ??
> #MFC = mpf90
> #MCC = mpcc
> #MLD = mpf90
> #LDOPTIONS =  -fast -O2 -lmpi
> #######
> #FCFLAGS =  -fast -O2 $(SPECIAL_OMP)
> #LOCAL_LIBRARIES =
> #MAKE = make -i -r
> #AWK = awk
> #SED = sed
> #CAT = cat
> #CUT = cut
> #EXPAND = expand
> #M4 = m4
> #CPP = cpp -C -P
> #CPPFLAGS = -DMPI
> #CFLAGS = -DMPI
> #ARCH_OBJS = milliclock.o
===================================================================
configure.user.linux
diff -r3.2 -r3.7
37a38,40
> #
> #        Add -Kieee option if you compile Gayno-Seaman PBL scheme (IBLTYP=6).
> #           MM5 will fail without this option until the compiler bug is fixed.
40a44
> #         May use pgf90 if the version is 3.1-4
42c46
<  FC = pgf77
---
>  FC = pgf90
52c56
<  MAKE = make -i
---
>  MAKE = make -i -r
86a91
> #    Compilation of Arakawa-Schubert cumulus scheme requires imsl.
108c112
< #                                     6=Gayno-Seaman
---
> #                                     6=Gayno-Seaman,7=Pleim-Xiu
117a122,123
> #                                     2=OSU land-surface scheme (IBLTYP=5 only)
> #                                     3=Pleim-Xiu LSM (IBLTYP=7 only)
===================================================================
Run/LANDUSE.TBL
diff -r3.1 -r3.2
13c13
< 10,     15.,   .50,   .92,   10.,    5.,    0., 9.0e25,'Tundra'
---
> 10,     15.,   .50,   .92,   10.,    5.,   .60, 9.0e25,'Tundra'
95c95
< 10,     15.,   .50,   .92,   10.,    5.,    0., 9.0e25,'Groundcover with Dwarf Trees and Shrubs'
---
> 10,     15.,   .50,   .92,   10.,    5.,   .60, 9.0e25,'Groundcover with Dwarf Trees and Shrubs'
===================================================================
Run/mm5.F
diff -r3.1 -r3.6
194c194,221
<       IF(XTIME.GE.BDYTIM)CALL BDYIN(9,TBDYBE,BDYTIM,BDYFRQ,IL,JL)                MM5.194
---
>       IF(XTIME+DTMIN .LT. TIMAX)THEN                                             07NOV00.1
>         IF(XTIME.GE.BDYLTIM .AND. ISSTVAR.EQ.1)THEN                              07NOV00.2
>           CALL LBDYIN(1,TBDYLBE,BDYLTIM,BDYLFRQ,ISOIL,IACTIV,IL,JL)              07NOV00.3
> #ifdef NESTED                                                                    07NOV00.4
>           IF(NSTTOT.GT.1)THEN                                                    07NOV00.5
>             DO L=2,MAXNES                                                        07NOV00.6
>             IF(IACTIV(L).EQ.1)THEN                                               07NOV00.7
>               CALL ADDRX1C(IAXALL(1,L))                                          07NOV00.8
>               CALL LBDYIN(L,TBDYLBE,BDYLTIM,BDYLFRQ,ISOIL,IACTIV,IL,JL)          07NOV00.9
>             ENDIF                                                                07NOV00.10
>             ENDDO                                                                07NOV00.11
>             CALL ADDRX1C(IAXALL(1,1))                                            07NOV00.12
>           ENDIF                                                                  07NOV00.13
> #endif                                                                           07NOV00.14
>         ENDIF                                                                    07NOV00.15
>         IF(XTIME.GE.BDYTIM)CALL BDYIN(9,TBDYBE,BDYTIM,BDYFRQ,IL,JL)              07NOV00.16
>       ENDIF                                                                      07NOV00.17
> C                                                                                07NOV00.18
> #ifdef NESTED                                                                    07NOV00.19
> C                                                                                07NOV00.20
> C--- INITIALIZE NEW NESTS?                                                       07NOV00.21
> C                                                                                07NOV00.22
>       IF(MAXNES.GT.1)THEN                                                        07NOV00.23
>         DO 77 L=2,MAXNES                                                         07NOV00.24
>           CALL CHKNST(IEXEC,L)                                                   07NOV00.25
>    77   CONTINUE                                                                 07NOV00.26
>         CALL ADDRX1C(IAXALL(1,1))                                                07NOV00.27
>       ENDIF                                                                      07NOV00.28
200d226
< #ifdef NESTED                                                                    MM5.200
249,259d274
< C                                                                                MM5.253
< C--- INITIALIZE NEW NESTS?                                                       MM5.254
< C                                                                                MM5.255
< #ifdef NESTED                                                                    MM5.256
<       IF(MAXNES.GT.1)THEN                                                        MM5.257
<         DO 77 L=2,MAXNES                                                         MM5.258
<           CALL CHKNST(IEXEC,L)                                                   MM5.259
<    77   CONTINUE                                                                 MM5.260
<         CALL ADDRX1C(IAXALL(1,1))                                                MM5.261
<       ENDIF                                                                      MM5.262
< #endif                                                                           MM5.263
===================================================================
Templates/lparam
diff -r3.1 -r3.4
22a23,25
>  ISSTVAR= 0,                            ;varying SST in time - 1, otherwise, 0
>  IMOIAV = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ;bucket soil moisture scheme. 0 - not used,
>                                         ;1 - used w/o extra input, 2 - user w/ soil m input
31a35,37
>  ISMRD  = 0,                            ;soil moisture initialization by PX LSM:
>  ;                                       =0, use moisture avail from LANDUSE.TBL;
>  ;                                       =2, use soil moisture from REGRID
===================================================================
Templates/mm5.deck.cray
diff -r3.4 -r3.7
331c331
< set MesoUser = /fs/othrorgs/home0/mesouser/MM5V3/beta/MM5
---
> set MesoUser = /fs/othrorgs/home0/mesouser/MM5V3
398a399,408
>    if ( $NUMFIL >= 2 ) then
>       echo "$InMM[${NUMFIL}]" > .tmpfile
>       grep TERRAIN .tmpfile
>       if ( $status == 0 ) then
>          echo "The number $NUMFIL input file is a TERRAIN file"
>          mv MMINPUT_DOMAIN$NUMFIL TERRAIN_DOMAIN$NUMFIL
>          if ( -e MMINPUT2_DOMAIN$NUMFIL ) rm MMINPUT2_DOMAIN$NUMFIL
>          rm .tmpfile
>       endif
>    endif
452a463,466
> #  RRTM_DATA is in 32-bit IEEE format, use assign on Cray
> #
> assign -a ./RRTM_DATA -Ff77 -Nieee u:20
> #
484a499,506
> #
> if ( -e fort.26 ) then
>    set NUM = 1
>    foreach file ( fort.2? )
>       mswrite -t $RetPd $file $OutMM/TIMESERIES_DOMAIN$NUM
>       @ NUM++
>    end
> endif 
===================================================================
Templates/mm5.deck.cray-ia-bsh
diff -r3.1 -r3.4
75c75
< sed -f ../Util/no_comment.sed mmlif | grep [A-Z,a-z] > mmlif.tmp
---
> sed -f ../Util/no_comment.sed mmlif | grep "[A-Z,a-z]" > mmlif.tmp
80a81,84
> #  RRTM_DATA is in 32-bit IEEE format, use assign on Cray
> #
> assign -a ./RRTM_DATA -Ff77 -Nieee u:20
> #
85c89
< timex mm5.exe > mm5.print.out 2>&1
---
> (timex mm5.exe) >&! mm5.print.out
===================================================================
Templates/mm5.deck.linuxPGF77
diff -r3.1 -r3.4
31a32,36
> # Select appropriate FDDAsw if doing gridded analysis FDDA
> #
> #FDDAsw=yes                # gridded FDDA input switch
> FDDAsw=no
> #
78a84,95
> #       copy gridded FDDA files
> #
> if [ $FDDAsw = yes ]; then
>    echo "Copy grid fdda file"
>    for i in MMINPUT_DOMAIN[1-9]
>    do
>      Num=`echo $i | grep [1-9]$ | sed 's/.*\(.\)/\1/'`
>      cp $i MMINPUT2_DOMAIN$Num
>      echo "cp $i MMINPUT2_DOMAIN$Num"
>    done
> fi
> #
84,85c101,102
< echo "timex mm5.exe >! mm5.print.out "
< timex mm5.exe > mm5.print.out 2>&1
---
> echo "time mm5.exe >! mm5.print.out "
> time mm5.exe > mm5.print.out 2>&1
===================================================================
Templates/mm5.deck.sun
diff -r3.1 -r3.2
85c85
< timex mm5.exe > mm5.print.out 2>&1
---
> time mm5.exe > mm5.print.out 2>&1
===================================================================
Templates/oparam
diff -r3.1 -r3.3
24c24,27
<  MASCHK = 45,           ; mass conservation check (KTAU or no. of time steps)
---
>  MASCHK = 99999,        ; mass conservation check (KTAU or no. of time steps)
>  IFTSOUT = .FALSE.,     ; output time series (default 30 points)
>    TSLAT = 0.0,0.0,0.0,0.0,0.0, ; latitudes of time series points (S is negative)
>    TSLON = 0.0,0.0,0.0,0.0,0.0, ; longitudes of time series points (W is negative)
===================================================================
Util/LineNumberer.c
diff -r3.0 -r3.1
332c332
<       ch = strstr(scratch,"Terrain");
---
>       ch = strstr(scratch,"TERRAIN");
334c334
< 	nm = &(scratch[PREFIX_SKIP+4+(uf.cvsroot_len)]);          /* 4 ch -> "rain" */
---
> 	nm = &(scratch[PREFIX_SKIP+4+(uf.cvsroot_len)]);          /* 4 ch -> "RAIN" */
336c336
< 	ch = strstr(scratch,"Datagrid");
---
> 	ch = strstr(scratch,"REGRID");
338c338
< 	  nm = &(scratch[PREFIX_SKIP+5+(uf.cvsroot_len)]);	  /* 5 ch -> "agrid" */
---
> 	  nm = &(scratch[PREFIX_SKIP+3+(uf.cvsroot_len)]);	  /* 5 ch -> "RID" */
340c340
< 	  ch = strstr(scratch,"Graph");
---
> 	  ch = strstr(scratch,"GRAPH");
342c342
< 	    nm = &(scratch[PREFIX_SKIP+2+(uf.cvsroot_len)]);	  /* 2 ch -> "ph" */
---
> 	    nm = &(scratch[PREFIX_SKIP+2+(uf.cvsroot_len)]);	  /* 2 ch -> "PH" */
344c344
< 	    ch = strstr(scratch,"Interp");
---
> 	    ch = strstr(scratch,"INTERPF");
346c346
< 	      nm = &(scratch[PREFIX_SKIP+3+(uf.cvsroot_len)]);	  /* 3 ch -> "erp" */
---
> 	      nm = &(scratch[PREFIX_SKIP+4+(uf.cvsroot_len)]);	  /* 3 ch -> "ERPF" */
348c348
< 	      ch = strstr(scratch,"Rawins");
---
> 	      ch = strstr(scratch,"RAWINS");
350c350,358
< 		nm = &(scratch[PREFIX_SKIP+3+(uf.cvsroot_len)]);  /* 3 ch -> "ins" */
---
> 		nm = &(scratch[PREFIX_SKIP+3+(uf.cvsroot_len)]);  /* 3 ch -> "INS" */
> 	    } else {
> 	      ch = strstr(scratch,"LITTLE_R");
> 	      if (ch != NULL) {
> 		nm = &(scratch[PREFIX_SKIP+5+(uf.cvsroot_len)]);  /* 3 ch -> "TLE_R" */
> 	    } else {
> 	      ch = strstr(scratch,"NESTDOWN");
> 	      if (ch != NULL) {
> 		nm = &(scratch[PREFIX_SKIP+5+(uf.cvsroot_len)]);  /* 3 ch -> "TDOWN" */
354a363,364
> 	    }
> 	    }
650c660
<       ch = strstr(scratch,"Terrain");
---
>       ch = strstr(scratch,"TERRAIN");
652c662
< 	nm = &(scratch[PREFIX_SKIP+4+(uf.cvsroot_len)]);          /* 4 ch -> "rain" */
---
> 	nm = &(scratch[PREFIX_SKIP+4+(uf.cvsroot_len)]);          /* 4 ch -> "RAIN" */
654c664
< 	ch = strstr(scratch,"Datagrid");
---
> 	ch = strstr(scratch,"REGRID");
656c666
< 	  nm = &(scratch[PREFIX_SKIP+5+(uf.cvsroot_len)]);	  /* 5 ch -> "agrid" */
---
> 	  nm = &(scratch[PREFIX_SKIP+3+(uf.cvsroot_len)]);	  /* 5 ch -> "RID" */
658c668
< 	  ch = strstr(scratch,"Graph");
---
> 	  ch = strstr(scratch,"GRAPH");
660c670
< 	    nm = &(scratch[PREFIX_SKIP+2+(uf.cvsroot_len)]);	  /* 2 ch -> "ph" */
---
> 	    nm = &(scratch[PREFIX_SKIP+2+(uf.cvsroot_len)]);	  /* 2 ch -> "PH" */
662c672
< 	    ch = strstr(scratch,"Interp");
---
> 	    ch = strstr(scratch,"INTERPF");
664c674
< 	      nm = &(scratch[PREFIX_SKIP+3+(uf.cvsroot_len)]);	  /* 3 ch -> "erp" */
---
> 	      nm = &(scratch[PREFIX_SKIP+4+(uf.cvsroot_len)]);	  /* 3 ch -> "ERPF" */
666c676
< 	      ch = strstr(scratch,"Rawins");
---
> 	      ch = strstr(scratch,"RAWINS");
668c678,686
< 		nm = &(scratch[PREFIX_SKIP+3+(uf.cvsroot_len)]);  /* 3 ch -> "ins" */
---
> 		nm = &(scratch[PREFIX_SKIP+3+(uf.cvsroot_len)]);  /* 3 ch -> "INS" */
> 	    } else {
> 	      ch = strstr(scratch,"LITTLE_R");
> 	      if (ch != NULL) {
> 		nm = &(scratch[PREFIX_SKIP+5+(uf.cvsroot_len)]);  /* 3 ch -> "TLE_R" */
> 	    } else {
> 	      ch = strstr(scratch,"NESTDOWN");
> 	      if (ch != NULL) {
> 		nm = &(scratch[PREFIX_SKIP+5+(uf.cvsroot_len)]);  /* 3 ch -> "TDOWN" */
671a690,691
> 	    }
> 	    }
===================================================================
Util/parseconfig.c
diff -r3.1 -r3.4
38a39
>     short need_ISOIL_equal_three = FALSE;
289a291,294
> 	        } else if (iblt[j] == 7) {
>        		     if (id7++ < 1)
> 			fprintf(fd, "#define IBLT7 1\n");
> 		      need_ISOIL_equal_three = TRUE;
328,330c333,334
< 		ilddim = 0;
< 		lx = 4;
< 		iplacedim = 1;
---
> 		ilddim = 1;
> 		lx = 2;
417a422,433
> /* ADDED to support VECTOR (NEC and FUJI) with MPP code , JM 000412 */
>         /* VECTOR */
>         ch = strstr(&(line[0]), "VECTOR");
>         if (ch != NULL && (line[0] != '#')) {
>             int j;
>             int VECTOR;
>             sscanf(ch, "VECTOR = %d", &VECTOR);
>             if (VECTOR == 1) {
>                 fprintf(fd,"#define VECTOR 1\n");
>             }
>         } /*MPHYSTBL*/
> 
423a440,448
> 	printf("========================= ERROR ========================\n");
> 	exit(-1);
>       }
>     }
> 
>     if (need_ISOIL_equal_three == TRUE) {
>       if (isoil != 3) {
> 	printf("========================= ERROR ========================\n");
> 	printf("When IBLTYP is set to 7, then ISOIL must equal 3 !!!! \n");
===================================================================
domain/boundary/Makefile
diff -r3.0 -r3.1
12a13
> 	lbdyin.o \
19a21
> 	lbdyin.i \
26a29
> 	lbdyin.f \
58a62,67
> lbdyin.o: ../../include/parame.incl ../../include/chardate.incl
> lbdyin.o: ../../include/various.incl ../../include/hdrv3.incl
> lbdyin.o: ../../include/variousn.incl ../../include/nestl.incl
> lbdyin.o: ../../include/point2d.incl ../../include/soilp.incl
> lbdyin.o: ../../include/point2dn.incl ../../include/soilpn.incl
> lbdyin.o: ../../include/addr0.incl
===================================================================
domain/boundary/bdyin.F
diff -r3.9 -r3.13
39c39,49
<       REAL SCR(MAX(MIX,MIX_G)*MAX(MIX,MJX_G)*MAX(NSPGD,NSPGX)*MKX)               24SEP99.2
---
>       INTEGER MIX2,MJX2,MIJX,NSPG2,SCRSZ,HDOTHSZ,IOSCRSZ                         07NOV00.29
>       PARAMETER(MIX2=MAX(MIX,MIX_G))                                             07NOV00.30
>       PARAMETER(MJX2=MAX(MJX,MJX_G))                                             07NOV00.31
>       PARAMETER(MIJX=MAX(MIX2,MJX2))                                             07NOV00.32
>       PARAMETER(NSPG2=MAX(NSPGD,NSPGX))                                          07NOV00.33
>       PARAMETER(SCRSZ = MIJX*NSPG2*(MKX+1))                                      07NOV00.34
>       PARAMETER(HDOTHSZ = MIX2*MJX2*(MKX+1))                                     07NOV00.35
>       PARAMETER(IOSCRSZ = MAX(SCRSZ,HDOTHSZ))                                    07NOV00.36
>       REAL SCR(IOSCRSZ), HDOTH(IOSCRSZ)                                          07NOV00.37
>       COMMON /OUTSCRATCH/ SCR                                                    07NOV00.38
>       EQUIVALENCE (SCR,HDOTH)                                                    07NOV00.39
40a51
>       INTEGER NIV                                                                07NOV00.40
82a94,106
>           IF(KTAU.EQ.0.OR.KTAU.EQ.KTAUR) THEN                                    07NOV00.41
> C                                                                                07NOV00.42
> C ... Fill header with BDYOUT information                                        07NOV00.43
> C                                                                                07NOV00.44
>           DO NIV = 1,NUMINT                                                      07NOV00.45
>              BHI(NIV,7) = JBHI(NIV,7)                                            07NOV00.46
>              BHIC(NIV,7) = JBHIC(NIV,7)                                          07NOV00.47
>           END DO                                                                 07NOV00.48
>           DO NIV = 1,NUMREAL                                                     07NOV00.49
>              BHR(NIV,7) = JBHR(NIV,7)                                            07NOV00.50
>              BHRC(NIV,7) = JBHRC(NIV,7)                                          07NOV00.51
>           END DO                                                                 07NOV00.52
>           ENDIF                                                                  07NOV00.53
===================================================================
domain/boundary/nudge.F
diff -r3.2 -r3.4
85c85
< cmic$2 private(I,J,K,FLS0,FLS1,FLS2,FLS3,FLS4)                                   NUDGE.85
---
> cmic$2 private(I,K,FLS0,FLS1,FLS2,FLS3,FLS4)                                     07NOV00.54
87c87
< c$& local(i,j,k,fls0,fls1,fls2,fls3,fls4)                                        NUDGE.87
---
> c$& local(i,k,fls0,fls1,fls2,fls3,fls4)                                          07NOV00.55
89c89
< c$omp&private(i,j,k,fls0,fls1,fls2,fls3,fls4)                                    NUDGE.89
---
> c$omp&private(i,k,fls0,fls1,fls2,fls3,fls4)                                      07NOV00.56
138c138
< cmic$2 private(I,J,K,FLS0,FLS1,FLS2,FLS3,FLS4)                                   NUDGE.126
---
> cmic$2 private(J,K,FLS0,FLS1,FLS2,FLS3,FLS4)                                     07NOV00.57
140c140
< c$& local(i,j,k,fls0,fls1,fls2,fls3,fls4)                                        NUDGE.128
---
> c$& local(j,k,fls0,fls1,fls2,fls3,fls4)                                          07NOV00.58
142c142
< c$omp&private(i,j,k,fls0,fls1,fls2,fls3,fls4)                                    NUDGE.130
---
> c$omp&private(j,k,fls0,fls1,fls2,fls3,fls4)                                      07NOV00.59
===================================================================
domain/initial/Makefile
diff -r3.1 -r3.4
9a10
> 	initts.o \
14a16
> 	initts.i \
19a22
> 	initts.f \
55c58
< init.o: ../../include/soilp.incl 
---
> init.o: ../../include/soilp.incl
58a62,63
> initts.o: ../../include/parame.incl ../../include/param2.incl
> initts.o: ../../include/param3.incl ../../include/point2d.incl
69c74,75
< param.o: ../../include/chardate.incl 
---
> param.o: ../../include/chardate.incl ../../include/bucket.incl 
> param.o: ../../include/parpx.incl
===================================================================
domain/initial/init.F
diff -r3.11 -r3.27
49a50,58
>       DO J=1,JL                                                                  07NOV00.60
>         DO I=1,IL                                                                07NOV00.61
>           TA2(I,J)=0.                                                            07NOV00.62
>           QA2(I,J)=0.                                                            07NOV00.63
>           UA10(I,J)=0.                                                           07NOV00.64
>           VA10(I,J)=0.                                                           07NOV00.65
>           TSS(I,J)=0.                                                            07NOV00.66
>         ENDDO                                                                    07NOV00.67
>       ENDDO                                                                      07NOV00.68
502d510
<       IF(ISFPAR(1).EQ.2)GOTO 186                                                 INIT.511
545c553
<           ZNT(I,J)=SFZ0(IS,ISN)/100.                                             INIT.554
---
>           IF(ISOIL.NE.3) ZNT(I,J)=SFZ0(IS,ISN)/100.                              07NOV00.69
547c555
<           MAVAIL(I,J)=SLMO(IS,ISN)                                               INIT.556
---
>           IF(IMOIAV(1).NE.2 .OR. IS.EQ.ISWATER) MAVAIL(I,J)=SLMO(IS,ISN)         07NOV00.70
586,628c594,607
< C                                                                                INIT.595
< C-----IF THE MOISTURE AVAILABILITY IS NOT VARIABLE (IMOIAV=0),                   INIT.596
< C     THC(I,J) ARE THERMAL INERTIAL IN CAL CM-1 K-1 S-0.5,                       INIT.597
< C     AND SHC(I,J) SHOULD NEVER BE USED.                                         INIT.598
< C                                                                                INIT.599
< C.....IF THE MOISTURE AVAILABILITY IS VARIABLE (IMOIAV=1),                       INIT.600
< C     THC(I,J) ARE THE SOIL CONDUCTIVITY IN J M-1 S-1 K-1,                       INIT.601
< C     WHICH ARE COMPUTED BASED ON SHC(I,J) AND MAVAIL(I,J),                      INIT.602
< C     AND SHC(I,J) ARE THE SOIL HEAT CAPACITY PER UNIT VOLUME IN                 INIT.603
< C     J M-3 K-1.                                                                 INIT.604
< C                                                                                INIT.605
<       GOTO 190                                                                   INIT.606
<   186 CONTINUE                                                                   INIT.607
< C      ISFPAR(1)=2                                                               INIT.608
< C      INITIALIZE ARRAYS USING VEGETATION AND SOIL SURFACE INFORMATION           INIT.609
< C                                                                                INIT.610
<   190 IF(IMOIAV(1).EQ.0)GOTO 230                                                 INIT.611
<       IF(ISFPAR(1).EQ.1)GOTO 210                                                 INIT.612
<       IF(ISFPAR(1).EQ.2)GOTO 230                                                 INIT.613
<       SHCLND=1.E6                                                                INIT.614
<       DO 200 I=1,ILX                                                             INIT.615
<         DO 200 J=1,JLX                                                           INIT.616
<           SHC(I,J)=SHCLND                                                        INIT.617
<   200   CONTINUE                                                                 INIT.618
<                                                                                  INIT.619
<       GOTO 230                                                                   INIT.620
< C                                                                                INIT.621
<   210 CONTINUE                                                                   INIT.622
<       DO 220 I=1,ILX                                                             INIT.623
<         DO 220 J=1,JLX                                                           INIT.624
<           IS=INT(SATBRT(I,J)+0.001)                                              INIT.625
<           SHC(I,J)=SFHC(IS,ISN)                                                  INIT.626
<   220   CONTINUE                                                                 INIT.627
<                                                                                  INIT.628
<       IF(IFSNOW(1).EQ.0)GOTO 230                                                 INIT.629
<       DO 225 I=1,ILX                                                             INIT.630
<         DO 225 J=1,JLX                                                           INIT.631
<           IF(SNOWC(I,J).GT.0.)THEN                                               INIT.632
<             SHC(I,J)=SFHC(ISICE,ISN)                                             INIT.633
<           ENDIF                                                                  INIT.634
<   225   CONTINUE                                                                 INIT.635
<                                                                                  INIT.636
<   230 CONTINUE                                                                   INIT.637
---
>   190 CONTINUE                                                                   07NOV00.71
> C                                                                                07NOV00.72
> C-----CALCULATE SLAB THERMAL CAPACITY CAPG(I,J): IT ARE DEPENDENT ON             07NOV00.73
> C     THC(I,J) - SOIL THERMAL INERTIAL, ONLY.                                    07NOV00.74
> C                                                                                07NOV00.75
>       DO 250 I=1,ILX                                                             07NOV00.76
>         DO 250 J=1,JLX                                                           07NOV00.77
>            CAPG(I,J)=3.298E6*THC(I,J)                                            07NOV00.78
>            IF(ISOIL.EQ.1)THEN                                                    07NOV00.79
> C-----CAPG REPRESENTS SOIL HEAT CAPACITY (J/K/M^3) WHEN DIFSL=5.E-7 (M^2/S)      07NOV00.80
> C     TO GIVE A CORRECT THERMAL INERTIA (=CAPG*DIFSL^0.5)                        07NOV00.81
>              CAPG(I,J)=5.9114E7*THC(I,J)                                         07NOV00.82
>            ENDIF                                                                 07NOV00.83
>   250   CONTINUE                                                                 07NOV00.84
630c609
< C-----READ IN SLAB TEMPERATURE:                                                  INIT.640
---
> C-----READ IN LOWBDY INFORMATION                                                 07NOV00.85
632,742c611,612
<         IFOUNDTMN=0                                                              INIT.642
<         IF(DM_IONODE())THEN                                                      INIT.643
<           OPEN(8, FILE='LOWBDY_DOMAIN1',FORM='UNFORMATTED',STATUS='OLD',         25JAN00.27
<      $         ERR=9010)                                                         25JAN00.28
<         ENDIF                                                                    INIT.645
<   100   CONTINUE                                                                 INIT.646
<         IF(DM_IONODE())READ (8,ERR=9007,END=9008)FLAG                            INIT.647
< #ifdef MPP1                                                                      INIT.648
<         CALL DM_BCAST_INTEGERS(FLAG,1)                                           INIT.649
< #endif                                                                           INIT.650
<         IF(FLAG.EQ.0)THEN                                                        INIT.651
<           IF(DM_IONODE())THEN                                                    INIT.652
<             READ (8,IOSTAT=IER)JBHI,JBHR,JBHIC,JBHRC                             INIT.653
<           ENDIF                                                                  INIT.654
< #ifdef MPP1                                                                      INIT.655
<           CALL DM_BCAST_INTEGERS(JBHI,NUMINT*NUMPROGS)                           INIT.656
<           CALL DM_BCAST_REALS(JBHR,NUMREAL*NUMPROGS)                             25JAN00.29
<           CALL DM_BCAST_INTEGERS(IER,1)                                          INIT.658
< #endif                                                                           INIT.659
<           IF(IER.NE.0)THEN                                                       INIT.660
<             write(*,'("Error reading big header from subs temp file")')          INIT.661
<             STOP                                                                 INIT.662
<           ENDIF                                                                  INIT.663
< C should do a simple array dimension check here                                  INIT.664
<           IXCHECK=JBHI(16,1)                                                     INIT.665
<           JXCHECK=JBHI(17,1)                                                     INIT.666
<           IF((IXCHECK.NE.IX).OR.(JXCHECK.NE.JX))THEN                             INIT.667
<             PRINT *,                                                             INIT.668
<      &      'THE SUBSTRATE TEMP FILE DOES NOT MATCH THE EXPECTED SIZE'           INIT.669
<             PRINT *,'NESTIX NESTJX FROM NAMELIST            =',IX,JX             INIT.670
<             PRINT *,'NESTIX NESTJX FROM SUBSTRATE TEMP FILE =',                  INIT.671
<      &       IXCHECK,JXCHECK                                                     INIT.672
<             STOP 'SUBSTRATE TEMP INPUT FILE PROBLEM'                             INIT.673
<           ENDIF                                                                  INIT.674
<           GOTO 100                                                               INIT.675
<         ELSEIF(FLAG.EQ.1)THEN                                                    INIT.676
<           IF(DM_IONODE())THEN                                                    INIT.677
<             READ (8,IOSTAT=IER)NDIM,START_INDEX,END_INDEX,RTIME,                 INIT.678
<      +                        STAGGERING,ORDERING,CURRENT_DATE,NAME,             INIT.679
<      +                        UNITS,DESCRIPTION                                  INIT.680
<           ENDIF                                                                  INIT.681
< #ifdef MPP1                                                                      INIT.682
<           CALL DM_BCAST_INTEGERS(NDIM,1)                                         INIT.683
<           CALL DM_BCAST_INTEGERS(START_INDEX,LEN_START_INDEX)                    INIT.684
<           CALL DM_BCAST_INTEGERS(END_INDEX,LEN_END_INDEX)                        INIT.685
<           CALL DM_BCAST_REALS(RTIME,1)                                           INIT.686
<           CALL DM_BCAST_STRING(STAGGERING,LEN_STAGGERING)                        INIT.687
<           CALL DM_BCAST_STRING(ORDERING,LEN_ORDERING)                            INIT.688
<           CALL DM_BCAST_STRING(CURRENT_DATE,LEN_CURRENT_DATE)                    INIT.689
<           CALL DM_BCAST_STRING(NAME,LEN_NAME)                                    INIT.690
<           CALL DM_BCAST_STRING(UNITS,LEN_UNITS)                                  INIT.691
<           CALL DM_BCAST_STRING(DESCRIPTION,LEN_DESCRIPTION)                      INIT.692
<           CALL DM_BCAST_INTEGERS(IER,1)                                          INIT.693
< #endif                                                                           INIT.694
<           IF(IER.NE.0)THEN                                                       INIT.695
<             write(*,'("Error reading subheader from subs temp file")')           INIT.696
<             STOP                                                                 INIT.697
<           ENDIF                                                                  INIT.698
< C may need to check on time too - but later                                      INIT.699
<           IF(NDIM.EQ.2.AND.NAME(1:8).EQ.'RES TEMP'.AND.ISOIL.NE.2)THEN           25JAN00.30
< #ifndef MPP1                                                                     INIT.701
<             READ (8)((TMN(I,J),I=1,END_INDEX(1)),J=1,END_INDEX(2))               INIT.702
< #else                                                                            INIT.703
<             DO J = J, MJX                                                        INIT.704
<               DO I = 1, MIX                                                      INIT.705
<                 TMN(I,J) = 0.                                                    INIT.706
<               ENDDO                                                              INIT.707
<             ENDDO                                                                INIT.708
<             LENDIM1=(END_INDEX(1)-START_INDEX(1)+1)                              INIT.710
<             LENDIM2=(END_INDEX(2)-START_INDEX(2)+1)                              INIT.711
<             LENDIM3=(END_INDEX(3)-START_INDEX(3)+1)                              INIT.712
<             IUNIT=8                                                              INIT.713
<             CALL DM_DIST_READ(IUNIT,1,TMN,NDIM,LENDIM1,LENDIM2,1,                25JAN00.31
<      +           MIX,MJX,1)                                                      INIT.715
< #endif                                                                           INIT.716
<             PRINT *, 'FOUND INPUT FIELD ', NAME, ' FOR ', CURRENT_DATE           INIT.717
<             IFOUNDTMN=1                                                          INIT.718
<           ELSE IF(NDIM.EQ.2.AND.NAME(1:8).EQ.'TSEASFC ')THEN                     25JAN00.32
< #ifndef MPP1                                                                     25JAN00.33
<             READ (8)((TSS(I,J),I=1,END_INDEX(1)),J=1,END_INDEX(2))               25JAN00.34
< #else                                                                            25JAN00.35
<             DO J = J, MJX                                                        25JAN00.36
<               DO I = 1, MIX                                                      25JAN00.37
<                 TSS(I,J) = 0.                                                    25JAN00.38
<               ENDDO                                                              25JAN00.39
<             ENDDO                                                                25JAN00.40
<             LENDIM1=(END_INDEX(1)-START_INDEX(1)+1)                              25JAN00.41
<             LENDIM2=(END_INDEX(2)-START_INDEX(2)+1)                              25JAN00.42
<             LENDIM3=(END_INDEX(3)-START_INDEX(3)+1)                              25JAN00.43
<             IUNIT=8                                                              25JAN00.44
<             CALL DM_DIST_READ(IUNIT,1,TSS,NDIM,LENDIM1,LENDIM2,1,                25JAN00.45
<      +           MIX,MJX,1)                                                      25JAN00.46
< #endif                                                                           25JAN00.47
<             PRINT *, 'FOUND INPUT FIELD ', NAME, ' FOR ', CURRENT_DATE           25JAN00.48
<             IFOUNDTSS=1                                                          25JAN00.49
<           ELSE                                                                   INIT.719
<             IF(DM_IONODE())READ (8)                                              INIT.720
<             PRINT *, 'SKIP FIELD NAMED ', NAME                                   INIT.721
<           ENDIF                                                                  INIT.722
<           GOTO 100                                                               INIT.723
<         ELSEIF(FLAG.EQ.2)THEN                                                    INIT.724
<          PRINT *, 'END OF SUBSTRATE TEMP INPUT TIME'                             INIT.725
<           IF(IFOUNDTMN.NE.1.AND.ISOIL.NE.2)THEN                                  25JAN00.50
<             PRINT *, 'SUBSTRATE TEMP NOT FOUND'                                  INIT.727
<             STOP                                                                 INIT.728
<           ENDIF                                                                  INIT.729
<           IF(IFOUNDTSS.NE.1)THEN                                                 25JAN00.51
<             PRINT *, 'SEA SURFACE TEMP NOT FOUND'                                25JAN00.52
<           ENDIF                                                                  25JAN00.53
<         ENDIF                                                                    INIT.730
<   270 CONTINUE                                                                   INIT.732
---
>       CALL LBDYIN(1,TBDYLBE,BDYLTIM,BDYLFRQ,ISOIL,IACTIV,IX,JX)                  07NOV00.86
> C                                                                                07NOV00.87
827,830d696
<       IF(IFTAPE.EQ.1)CALL OUTTAP(41,1,IL,JL,MKX,1)                               INIT.814
< #ifndef MPP1                                                                     INIT.815
<       IF(IFPRT.EQ.1)CALL OUTPRT(IEXEC(1),1)                                      INIT.816
< #endif                                                                           INIT.817
834a701,707
> C                                                                                07NOV00.88
> C-----OUTPUT THE FIRST TIME PERIOD DATA                                          07NOV00.89
> C                                                                                07NOV00.90
>       IF(IFTAPE.EQ.1)CALL OUTTAP(41,1,IL,JL,MKX,1)                               07NOV00.91
> #ifndef MPP1                                                                     07NOV00.92
>       IF(IFPRT.EQ.1)CALL OUTPRT(IEXEC(1),1)                                      07NOV00.93
> #endif                                                                           07NOV00.94
839a713,716
> C                                                                                07NOV00.95
> C-----INITIALIZE LOCATIONS FOR TIME SERIES OUTPUT                                07NOV00.96
> C                                                                                07NOV00.97
>       IF (IFTSOUT) CALL INITTS(1,IL,JL)                                          07NOV00.98
857c734
<   640 IF(SAVTIM.GT.XTIME)GOTO 660                                                INIT.844
---
>   640 IF(NINT(SAVTIM/DTMIN).GT.KTAU)GOTO 660                                     07NOV00.99
860c737
<   660 IF(TAPTIM.GT.XTIME)GOTO 670                                                INIT.847
---
>   660 IF(NINT(TAPTIM/DTMIN).GT.KTAU)GOTO 670                                     07NOV00.100
863c740
<   670 IF(PRTTIM.GT.XTIME)GOTO 710                                                INIT.850
---
>   670 IF(NINT(PRTTIM/DTMIN).GT.KTAU)GOTO 710                                     07NOV00.101
871,874d747
<       SAVTIM=SAVTIM-0.000001                                                     INIT.858
<       TAPTIM=TAPTIM-0.000001                                                     INIT.859
<       PRTTIM=PRTTIM-0.000001                                                     INIT.860
<       DECTIM=DECTIM-0.000001                                                     INIT.861
===================================================================
domain/initial/param.F
diff -r3.16 -r3.43
34a35,36
> #     include <parpx.incl>                                                       07NOV00.102
> #     include <bucket.incl>                                                      07NOV00.103
71a74,76
>       INTEGER IFOGMD                                                             07NOV00.104
>       INTEGER IMOIAVI                                                            07NOV00.105
>       DIMENSION IFOGMD(MAXSES)                                                   07NOV00.106
98c103
<      3                 BUFFRQ,                                                   PARAM.97
---
>      3                 BUFFRQ,IFTSOUT,TSLAT,TSLON,ITSN,JTSN,                     07NOV00.107
106c111
<      &        IEVAP,IFOGMD,ISTLYR,ISMLYR,                                        24SEP99.32
---
>      &        IEVAP,IFOGMD,ISTLYR,ISMLYR,ISSTVAR,                                07NOV00.108
108a114
>      &        ,ISMRD,NUDGE,IFGROW                                                07NOV00.109
118c124,125
<      4       CUQMAX,CUQMIN,SOLSET,CZO,OZO,VCONVC,RAD,TREL,BFAC                   PARAM.117
---
>      4       CUQMAX,CUQMIN,SOLSET,CZO,OZO,VCONVC,RAD,TREL,BFAC,                  07NOV00.110
>      5       SOILFAC                                                             07NOV00.111
127d133
<       INTEGER IFOGMD                                                             PARAM.126
129d134
<       DIMENSION IFOGMD(MAXSES)                                                   PARAM.128
180a186,193
> C     IFTSOUT: WHETHER TO OUTPUT TIME SERIES                                     07NOV00.112
> C              = 1; YES                                                          07NOV00.113
> C              = 0; NO                                                           07NOV00.114
> C      TSLAT : LATITUDE LOCATION FOR TIME SERIES, SOUTHERN LAT IS NEGATIVE       07NOV00.115
> C      TSLON : LONGITUDE LOCATION FOR TIME SERIES, WESTERN LON IS NEGATIVE       07NOV00.116
> C              DEFAULT NUMBER OF TIME SERIES POINTS IS 30, BUT MAY BE            07NOV00.117
> C              INCREASED BY MODIFYING PARAMETER ITSDIF IN include/parame         07NOV00.118
> C                                                                                07NOV00.119
189a203
> C              = 7 ; PLEIM-XIU LSM and PBL                                       07NOV00.120
216c230,234
< C              = 2 ; VARIABLES FOR SOIL AND VEGETATION                           PARAM.215
---
> C                                                                                07NOV00.121
> C     ISSTVAR: WHETHER TO VARY SST DURING MODEL INTEGRATION.                     07NOV00.122
> C              ALSO DEPENDING ON INPUT DATA.                                     07NOV00.123
> C              = 0 ; NO                                                          07NOV00.124
> C              = 1 ; YES                                                         07NOV00.125
240c258
< C              OR NOT.                                                           PARAM.238
---
> C              USING A SIMPLE BUCKET MODEL OR NOT.                               07NOV00.126
242c260,262
< C              = 1 ; YES                                                         PARAM.240
---
> C              = 1 ; YES, USE DEFAULT TABLE VALUES                               07NOV00.127
> C              = 2 ; YES, USE CONVERTED VALUES FROM TOP LAYER (10 CM)            07NOV00.128
> C                    SOIL MOISTURE DATA AS INPUT                                 07NOV00.129
602c622,623
<         OPEN(19, FILE='LANDUSE.TBL',FORM='FORMATTED',STATUS='OLD')               24SEP99.40
---
>         OPEN(19, FILE='LANDUSE.TBL',FORM='FORMATTED',STATUS='OLD',               07NOV00.130
>      -           ERR=9006)                                                       07NOV00.131
609,611c630,632
< #ifdef MPP1                                                                      PARAM.608
< #  include <mpp_param_12.incl>                                                   PARAM.609
< #endif                                                                           PARAM.610
---
>       CALL DM_BCAST_STRING( MMINLU , 4 )                                         07NOV00.132
>       CALL DM_BCAST_INTEGERS ( ISICE ,  1 )                                      07NOV00.133
>       CALL DM_BCAST_INTEGERS ( ISWATER ,  1 )                                    07NOV00.134
647,649c668,681
< #ifdef MPP1                                                                      PARAM.642
< #  include <mpp_param_14.incl>                                                   PARAM.643
< #endif                                                                           PARAM.644
---
>       CALL DM_BCAST_STRING( LUTYPE , 4 )                                         07NOV00.135
>       CALL DM_BCAST_STRING( MMINLU , 4 )                                         07NOV00.136
>       CALL DM_BCAST_INTEGERS ( LUN   ,  1 )                                      07NOV00.137
>       CALL DM_BCAST_INTEGERS ( NSN   ,  1 )                                      07NOV00.138
>       CALL DM_BCAST_INTEGERS ( LUSEAS,  1 )                                      07NOV00.139
>       CALL DM_BCAST_INTEGERS ( LUCATS,  1 )                                      07NOV00.140
>       CALL DM_BCAST_INTEGERS ( LI,      1 )                                      07NOV00.141
>       CALL DM_BCAST_REALS    ( ALBD,    NLU*NSEAS )                              07NOV00.142
>       CALL DM_BCAST_REALS    ( SLMO,    NLU*NSEAS )                              07NOV00.143
>       CALL DM_BCAST_REALS    ( SFEM,    NLU*NSEAS )                              07NOV00.144
>       CALL DM_BCAST_REALS    ( SFZ0,    NLU*NSEAS )                              07NOV00.145
>       CALL DM_BCAST_REALS    ( THERIN,  NLU*NSEAS )                              07NOV00.146
>       CALL DM_BCAST_REALS    ( SCFX,    NLU       )                              07NOV00.147
>       CALL DM_BCAST_REALS    ( SFHC,    NLU*NSEAS )                              07NOV00.148
676a709,718
> C  INITIALIZING TIME SERIES PARAMETERS                                           07NOV00.149
>       IFTSOUT=.FALSE.                                                            07NOV00.150
>       DO I=1,ITSDIM                                                              07NOV00.151
>          TSLAT(I)=999.                                                           07NOV00.152
>          TSLON(I)=999.                                                           07NOV00.153
>          DO N=1,MAXNES                                                           07NOV00.154
>             ITSN(N,I)=1                                                          07NOV00.155
>             JTSN(N,I)=1                                                          07NOV00.156
>          ENDDO                                                                   07NOV00.157
>       ENDDO                                                                      07NOV00.158
702a745
>       ISSTVAR=0                                                                  07NOV00.159
744a788,791
> #if defined (SOIL3)
>       ISMLYR(1)=10                                                               07NOV00.161
>       ISMLYR(2)=200                                                              07NOV00.162
> #elif defined (SOIL2)
747d793
<       ISTLYR(3)=400                                                              24SEP99.83
749a796,799
> #endif                                                                           07NOV00.164
>       ISMRD=0        ! default SM init by MAVAIL                                 07NOV00.165
>       NUDGE=0        ! default is no SM nudge                                    07NOV00.166
>       IFGROW=0       ! default is to use VEGFRAC                                 07NOV00.167
861a912,913
> C SOIL-STEP FACTOR (LARGER IS MORE CONSERVATIVE, RECOMMEND 1.0-2.0)              07NOV00.168
>       SOILFAC=1.0                                                                07NOV00.169
991c1043
< 151   FORMAT(1X,'IN PARAM: NPFV = ',I2)                                          PARAM.977
---
> 151   FORMAT(1X,'IN PARAM: NPFV FOR FDDA PRINT = ',I2)                           07NOV00.170
1019c1071
<         OPEN(10, FILE='mmlif',FORM='FORMATTED',STATUS='OLD')                     PARAM.1005
---
>         OPEN(10, FILE='mmlif',FORM='FORMATTED',STATUS='OLD',ERR=9005)            07NOV00.171
1030a1083,1133
> C                                                                                07NOV00.172
> C-----SPECIFY THE BUCKET MODEL CONSTANTS AS A FUNCTION OF LANDUSE:               07NOV00.173
> C     ERATE  : EVAPORATION RATE                                                  07NOV00.174
> C     MAMAX  : MAX MOISTURE AVAILABILITY ALLOWED                                 07NOV00.175
> C     MAMIN  : MIN MOISTURE AVAILABILITY ALLOWED                                 07NOV00.176
> C                                                                                07NOV00.177
> C-----READ IN BUCKET MODEL CONSTANTS FROM BUCKET.TBL FILE                        07NOV00.178
> C                                                                                07NOV00.179
>       DO NN = 1,MAXNES                                                           07NOV00.180
>          IF(IMOIAV(NN).GE.1) IMOIAVI = 1                                         07NOV00.181
>       END DO                                                                     07NOV00.182
>       IF (IMOIAVI.EQ.1) THEN                                                     07NOV00.183
>         IF (DM_IONODE()) THEN                                                    07NOV00.184
>           OPEN(18, FILE='BUCKET.TBL',                                            07NOV00.185
>      -         FORM='FORMATTED',STATUS='OLD',ERR=9004)                           07NOV00.186
>         ENDIF                                                                    07NOV00.187
>         IF (DM_IONODE()) THEN                                                    07NOV00.188
>           LUMATCH=0                                                              07NOV00.189
>  2010     CONTINUE                                                               07NOV00.190
>           READ (18,2000,END=2020)LUTYPE                                          07NOV00.191
>           READ (18,*)LUCATS,LUSEAS                                               07NOV00.192
>           IF(LUTYPE.EQ.MMINLU)THEN                                               07NOV00.193
>             LUN=LUCATS                                                           07NOV00.194
>             LUMATCH=1                                                            07NOV00.195
>           ENDIF                                                                  07NOV00.196
>           DO LC=1,LUCATS                                                         07NOV00.197
>             IF(LUTYPE.EQ.MMINLU)THEN                                             07NOV00.198
>               READ (18,*)LI,MAMAX(LC),MAMIN(LC),ERATE(LC)                        07NOV00.199
>               IF(LC.NE.LI) STOP 'MISSING BUCKET.TBL: UNIT 18'                    07NOV00.200
>             ELSE                                                                 07NOV00.201
>               READ (18,*)                                                        07NOV00.202
>             ENDIF                                                                07NOV00.203
>           ENDDO                                                                  07NOV00.204
>           GOTO 2010                                                              07NOV00.205
>  2020     CONTINUE                                                               07NOV00.206
>           IF(LUMATCH.EQ.0)THEN                                                   07NOV00.207
>             PRINT *,                                                             07NOV00.208
>      -     'LANDUSE IN INPUT FILE DOES NOT MATCH DATA IN BUCKET TBL'             07NOV00.209
>             STOP 'INCONSISTENT OR MISSING BUCKET.TBL FILE'                       07NOV00.210
>           ENDIF                                                                  07NOV00.211
>         ENDIF                                                                    07NOV00.212
>         CALL DM_BCAST_STRING    ( LUTYPE , 4 )                                   07NOV00.213
>         CALL DM_BCAST_REALS     ( MAMAX , NLU )                                  07NOV00.214
>         CALL DM_BCAST_REALS     ( MAMIN , NLU )                                  07NOV00.215
>         CALL DM_BCAST_REALS     ( ERATE , NLU )                                  07NOV00.216
>         CALL DM_BCAST_INTEGERS  ( LI , 1 )                                       07NOV00.217
>         CALL DM_BCAST_INTEGERS  ( LUN , 1 )                                      07NOV00.218
>         CALL DM_BCAST_INTEGERS  ( LUSEAS , 1 )                                   07NOV00.219
>         CALL DM_BCAST_INTEGERS  ( LUCATS , 1 )                                   07NOV00.220
>         CALL DM_BCAST_INTEGERS  ( LUMATCH , 1 )                                  07NOV00.221
>       ENDIF                                                                      07NOV00.222
1069a1173,1178
> C...Also store MPHYSTBL if it is selected                                        07NOV00.223
> #ifdef MPHYSTBL1                                                                 07NOV00.224
>       BHI(29,13)=1                                                               07NOV00.225
>       BHIC(29,13)='MPHYSTBL: 1=USE LOOKUP TABLE VERSION OF '                     07NOV00.226
>      *    //      'THE EXPLICIT MOISTURE SCHEME            '                     07NOV00.227
> #endif                                                                           07NOV00.228
1445a1555,1559
> #ifdef IBLT7                                                                     07NOV00.229
>       I_IBLT(7)=1                                                                07NOV00.230
> #else                                                                            07NOV00.231
>       I_IBLT(7)=0                                                                07NOV00.232
> #endif                                                                           07NOV00.233
1459a1574,1578
> #ifdef SOIL3                                                                     07NOV00.234
>       I_ISOIL(3)=1                                                               07NOV00.235
> #else                                                                            07NOV00.236
>       I_ISOIL(3)=0                                                               07NOV00.237
> #endif                                                                           07NOV00.238
1539,1540c1658,1660
<       IF(IBLTYP(1).NE.2.AND.IBLTYP(1).NE.5.AND.IMVDIF.EQ.1)THEN                  PARAM.1512
<         PRINT *,'ERROR: IMVDIF=1 REQUIRES IBLTYP=2 OR 5'                         PARAM.1513
---
>       IF(IBLTYP(1).NE.2.AND.IBLTYP(1).NE.5.AND.IBLTYP(1).NE.7                    07NOV00.239
>      >                                    .AND.IMVDIF.EQ.1)THEN                  07NOV00.240
>         PRINT *,'ERROR: IMVDIF=1 REQUIRES IBLTYP=2, 5 OR 7'                      07NOV00.241
1567a1688,1695
>       IF(IBLTYP(1).EQ.7.AND.ISOIL.NE.3)THEN                                      07NOV00.242
>         PRINT *,'ERROR: IBLTYP=7 REQUIRES ISOIL=3'                               07NOV00.243
>         IWARN=IWARN+1                                                            07NOV00.244
>       ENDIF                                                                      07NOV00.245
>       IF(IBLTYP(1).NE.7.AND.ISOIL.EQ.3)THEN                                      07NOV00.246
>         PRINT *,'ERROR: ISOIL=3 REQUIRES IBLTYP=7'                               07NOV00.247
>         IWARN=IWARN+1                                                            07NOV00.248
>       ENDIF                                                                      07NOV00.249
1580c1708
<       IF(IBLTYP(1).NE.2.AND.IBLTYP(1).NE.5.AND.IBLTYP(1).NE.6.AND.(              PARAM.1549
---
>       IF(IBLTYP(1).NE.2.AND.(IBLTYP(1).LT.5.OR.IBLTYP(1).GT.7).AND.(             07NOV00.250
1583c1711
<         PRINT *,'ERROR: FDDA REQUIRES IBLTYP=2, 5, OR 6'                         PARAM.1552
---
>         PRINT *,'ERROR: FDDA REQUIRES IBLTYP=2, 5, 6,or 7'                       07NOV00.251
1645,1646c1773,1775
<           IF(IBLTYP(N).NE.2.AND.IBLTYP(N).NE.5.AND.IMVDIF.EQ.1)THEN              PARAM.1614
<             PRINT *,'ERROR: IMVDIF=1 REQUIRES IBLTYP=2 OR 5'                     PARAM.1615
---
>           IF(IBLTYP(N).NE.2.AND.IBLTYP(N).NE.5.AND.IBLTYP(1).NE.7                07NOV00.252
>      >                                        .AND.IMVDIF.EQ.1)THEN              07NOV00.253
>             PRINT *,'ERROR: IMVDIF=1 REQUIRES IBLTYP=2, 5, OR 7'                 07NOV00.254
1661a1791,1798
>           IF(IBLTYP(N).EQ.7.AND.ISOIL.NE.3)THEN                                  07NOV00.255
>             PRINT *,'ERROR: IBLTYP=7 REQUIRES ISOIL=3'                           07NOV00.256
>             IWARN=IWARN+1                                                        07NOV00.257
>           ENDIF                                                                  07NOV00.258
>           IF(IBLTYP(N).NE.7.AND.ISOIL.EQ.3)THEN                                  07NOV00.259
>             PRINT *,'ERROR: ISOIL=3 REQUIRES IBLTYP=7'                           07NOV00.260
>             IWARN=IWARN+1                                                        07NOV00.261
>           ENDIF                                                                  07NOV00.262
1766c1903,1904
<       EOMEG=7.2722E-5                                                            PARAM.1731
---
> C  EOMEG USES THE SIDEREAL DAY (NOT SOLAR DAY)                                   07NOV00.263
>       EOMEG=7.2921E-5                                                            07NOV00.264
1785a1924
> #ifdef ICUPA2                                                                    07NOV00.265
1840a1980
> #endif                                                                           07NOV00.266
2008a2149,2159
> #if defined (SOIL3) 
>       ELSEIF(ISOIL.EQ.3.AND.ILDDIM.EQ.1)THEN                                     07NOV00.268
>         DZS(1)=0.01                                                              07NOV00.269
>         DZS(2)=0.99                                                              07NOV00.270
>         ZS(1)=0.5*DZS(1)                                                         07NOV00.271
>         ZS(2)=DZS(1)+0.5*DZS(2)                                                  07NOV00.272
>         DO NN3=1,MLX                                                             07NOV00.273
>           IF(ISTLYR(NN3).GT.0)NSTL=NN3                                           07NOV00.274
>           IF(ISMLYR(NN3).GT.0)NSML=NN3                                           07NOV00.275
>         ENDDO                                                                    07NOV00.276
> #elif defined (SOIL2)
2021a2173
> #endif                                                                           07NOV00.278
2052a2205,2206
>       BDYLFRQ=0.                                                                 07NOV00.279
>       BDYLTIM=0.                                                                 07NOV00.280
2059c2213
< #ifdef IBLT6                                                                     PARAM.2010
---
> #if defined(IBLT6) || defined(IBLT7)
2181a2336
>       CLOSE (18)                                                                 07NOV00.283
2191c2346
<       PRINT9200,MIX,MJX,MKX,MAXNES                                               PARAM.2142
---
>       PRINT9200,MIX,MJX,MKX,MLX,MAXNES                                           07NOV00.284
2235d2389
<         STOP                                                                     PARAM.2186
2242a2397
>       IF(IBLTYP(1).EQ.7)PRINT1069,IBLTYP(1)                                      07NOV00.285
2249a2405
>       IF(ISOIL.EQ.3)PRINT1073,ISOIL                                              07NOV00.286
2255d2410
<       IF(ISFPAR(1).EQ.2)PRINT1179                                                PARAM.2206
2256a2412,2415
>       IF(ISSTVAR.EQ.1)PRINT 1165                                                 07NOV00.287
>       IF(ISSTVAR.EQ.0)PRINT 1166                                                 07NOV00.288
>       IF(IMOIAV(1).EQ.1)PRINT1168,IMOIAV(1)                                      07NOV00.289
>       IF(IMOIAV(1).EQ.2)PRINT1169,IMOIAV(1)                                      07NOV00.290
2301c2460
<      1 ',   MAXNES = ',I3)                                                       PARAM.2251
---
>      1 '   MLX = ',I3,',   MAXNES = ',I3)                                        07NOV00.291
2307c2466
<  1001 FORMAT(' IMPHYS = ',I3,'  THIS IS A DRY CASE WITH PASSIVE '                PARAM.2257
---
>  1001 FORMAT(' IMPHYS = ',I3,'  THIS IS A DRY CASE WITH PASSIVE ',               07NOV00.292
2322c2481
<  1041 FORMAT(12X,'IEVAP  = ',I3,'  EVAPORATION EFFECT OF RAINWATER '             PARAM.2272
---
>  1041 FORMAT(12X,'IEVAP  = ',I3,'  EVAPORATION EFFECT OF RAINWATER ',            07NOV00.293
2341c2500
<  1040 FORMAT(/' IBLTYP = ',I3,'  FRICTIONLESS AND INSULATED FOR THE '            PARAM.2291
---
>  1040 FORMAT(/' IBLTYP = ',I3,'  FRICTIONLESS AND INSULATED FOR THE ',           07NOV00.294
2350,2351c2509,2510
<  1065 FORMAT(/' STOP...CANNOT RUN G-S PBL WITH IICE=1')                          PARAM.2300
<  1067 FORMAT(/' STOP...IFOGMD CAN ONLY BE USED WITH G-S PBL,'                    PARAM.2301
---
>  1065 FORMAT(/' WARNING...RUNNING G-S PBL ICE. PBL WILL IGNORE ICE')             07NOV00.295
>  1067 FORMAT(/' STOP...IFOGMD CAN ONLY BE USED WITH G-S PBL,',                   07NOV00.296
2354a2514
>  1069 FORMAT(/' IBLTYP = ',I3,'  PLEIM-XIU PBL IS USED.')                        07NOV00.297
2362c2522,2523
<  1100 FORMAT(' ISFFLX = ',I3, '  HEAT AND MOISTURE FLUXES FROM THE '             PARAM.2312
---
>  1073 FORMAT(' ISOIL  = ',I3, '  PLEIM-XIU LAND-SURFACE MODEL.')                 07NOV00.298
>  1100 FORMAT(' ISFFLX = ',I3, '  HEAT AND MOISTURE FLUXES FROM THE ',            07NOV00.299
2388c2549,2555
<  1179 FORMAT(12X,'SURFACE PARAMETERS FOR VEG AND SOIL.')                         PARAM.2338
---
>  1165 FORMAT(12X,'SST WILL BE UPDATED DURING MODEL INTEGRATION')                 07NOV00.300
>  1166 FORMAT(12X,'SST WILL NOT BE UPDATED DURING MODEL INTEGRATION')             07NOV00.301
>  1168 FORMAT(' IMOIAV = ',I3, '  MOISTURE AVAIL WILL VARY IN TIME ',             07NOV00.302
>      1 'USING BUCKET MODEL,',/,15X,'USING TABLE VALUE TO START.')                07NOV00.303
>  1169 FORMAT(' IMOIAV = ',I3, '  MOISTURE AVAIL WILL VARY IN TIME ',             07NOV00.304
>      1 'USING BUCKET MODEL,',/,15X,                                              07NOV00.305
>      2 'USING SOIL-MOISTURE CONVERTED VALUE TO START.')                          07NOV00.306
2429a2597,2602
> 9004  PRINT *, 'ERRPR OPENING BUCKET MODEL DATA FILE FROM UNIT 18'               07NOV00.307
>       STOP '9004 IN PARAM'                                                       07NOV00.308
> 9005  PRINT *, 'ERRPR OPENING NAMELIST FILE mmlif'                               07NOV00.309
>       STOP '9005 IN PARAM'                                                       07NOV00.310
> 9006  PRINT *, 'ERRPR OPENING LANDUSE.TBL FILE FROM UNIT 19'                     07NOV00.311
>       STOP '9006 IN PARAM'                                                       07NOV00.312
2437a2611,2616
> 9004  PRINT *, 'ERRPR OPENING BUCKET MODEL DATA FILE FROM UNIT 18'               07NOV00.313
>       CALL FKILL_MODEL( '9004 IN PARAM' )                                        07NOV00.314
> 9005  PRINT *, 'ERROR OPENING NAMELIST FILE mmlif'                               07NOV00.315
>       CALL FKILL_MODEL( '9005 IN PARAM' )                                        07NOV00.316
> 9006  PRINT *, 'ERRPR OPENING LANDUSE.TBL FILE FROM UNIT 19'                     07NOV00.317
>       CALL FKILL_MODEL( '9006 IN PARAM' )                                        07NOV00.318
2440d2618
<                                                                                  PARAM.2377
===================================================================
domain/io/Makefile
diff -r3.1 -r3.3
17a18
> 	outts.o \
37a39
> 	outts.i \
58a61
> 	outts.f \
126a130,133
> outts.o: ../../include/parame.incl ../../include/param2.incl
> outts.o: ../../include/param3.incl ../../include/point2d.incl
> outts.o: ../../include/point3d.incl ../../include/rpstar.incl
> outts.o: ../../include/nonhyd.incl 
===================================================================
domain/io/conmas.F
diff -r3.2 -r3.4
69,70c69,70
<    30 FORMAT(11X,'AT TIME = ',F10.3,' H, TOTAL AIR  = ',E12.5,' KG, ERR'         24SEP99.90
<      1,'OR = ',E12.5,' %.'/38X,'HORIZONTAL ADVECTION = ',E12.5,' KG.')           CONMAS.70
---
>    30 FORMAT(11X,'AT TIME = ',F10.3,' H, TOTAL AIR  = ',E12.5,' KG, CHA'         07NOV00.319
>      1,'NGE = ',E12.5,' %.'/38X,'HORIZONTAL ADVECTION = ',E12.5,' KG.')          07NOV00.320
75c75
<    40 FORMAT(33X,'TOTAL WATER = ',E12.5,' KG, ERROR = ',E12.5,' %.'/             CONMAS.75
---
>    40 FORMAT(33X,'TOTAL WATER = ',E12.5,' KG, CHANGE = ',E12.5,' %.'/            07NOV00.321
===================================================================
domain/io/initsav.F
diff -r3.0 -r3.11
20a21
>       REAL DTCOARSE,DTTMP                                                        07NOV00.322
23a25
>       XTIMR=FLOAT(IXTIMR)                                                        07NOV00.323
32c34
<             IF(XTIME.GT.XSTNES(LLN)+10..AND.XTIME.LT.XENNES(LLN))THEN            INITSAV.32
---
>             IF(XTIMR.GT.XSTNES(LLN)+1..AND.XTIMR.LT.XENNES(LLN))THEN             07NOV00.324
39c41
<           IF(XTIME.LT.XSTNES(LLN).OR.XTIME.GT.XENNES(LLN)+10.)THEN               INITSAV.39
---
>           IF(XTIMR.LT.XSTNES(LLN).OR.XTIMR.GT.XENNES(LLN)+10.)THEN               07NOV00.325
46a49,50
>         IF (LLN.EQ.1) DTCOARSE = DT2                                             07NOV00.326
>         DTTMP = DTCOARSE/IRAX**LEVIDN(LLN)                                       07NOV00.327
53c57
<      +       IFOHUG,IUTSAV,MAXNES,MKX,MIX,MJX)                                   INITSAV.53
---
>      +       IFOHUG,IUTSAV)                                                      07NOV00.328
58,60c62,65
<         IXTIME=IFIX(XTIME+.001)                                                  INITSAV.58
<         PRINT *,'READING SAVE FILE FOR DOMAIN ',LLN,                             INITSAV.59
<      1      ' AT XTIME=',XTIME,' AND KTAU=',KTAU,' DTMIN=',DTMIN                 INITSAV.60
---
>         IXTIME=NINT(XTIME)                                                       07NOV00.329
>         PRINT 910, LLN,XTIME,KTAU                                                07NOV00.330
> 910   FORMAT(1X,'READING SAVE FILE FOR DOMAIN ',I2,                              07NOV00.331
>      1      ' AT XTIME=',F10.2,' AND KTAU=',I8)                                  07NOV00.332
65a71,86
> C                                                                                07NOV00.333
> C ..... IF THE CODE DETECTS THE TIME STEP IS DEFINED DIFFERENTLY AT THE          07NOV00.334
> C          RESTART, IT WILL CHANGE DT, DT2, AND DTMIN.                           07NOV00.335
> C          THERE ARE OTHER CONSTANTS USED IN THE MODEL THAT DEPEND ON            07NOV00.336
> C          TIME STEP. BUT FOR NOW WE ARE KEEPING THEM UNCHANGED WHEN             07NOV00.337
> C          TIME STEP CHANGES. THESE ARE: GNUDGE, XKHMAX, XKHZ.                   07NOV00.338
> C                                                                                07NOV00.339
>         IF (ABS(DT-DTTMP).GE.0.001) THEN                                         07NOV00.340
>           KTAU = NINT(DT/DTTMP*FLOAT(KTAU))                                      07NOV00.341
>           PRINT 900, DT/2., DTTMP/2., KTAU                                       07NOV00.342
>           DT = DTTMP                                                             07NOV00.343
>           DT2 = DTTMP                                                            07NOV00.344
>           DTMIN = DTTMP/120.                                                     07NOV00.345
>         END IF                                                                   07NOV00.346
> 900   FORMAT(1X,'*** RESET TIME STEP AT RESTART: PREVIOUS TISTEP = ',            07NOV00.347
>      +       F4.0,', NEW TISTEP = ',F4.0,', NEW KTAU = ',I8)                     07NOV00.348
75c96
<             PRINT *,'NESTI,NESTJ,IMOVCO:',                                       INITSAV.75
---
>             IF(IMOVE(LLN).GT.0) PRINT *,'NESTI,NESTJ,IMOVCO:',                   07NOV00.349
77c98
<             IF(IMOVCO(LLN).GT.0)PRINT*,'INCREMENT (IMOVEI,IMOVEJ)=',             INITSAV.77
---
>             IF(IMOVE(LLN).GT.0) PRINT*,'INCREMENT (IMOVEI,IMOVEJ)=',             07NOV00.350
349a371,380
> C                                                                                07NOV00.351
> C-----INITIALIZE LOCATIONS FOR TIME SERIES OUTPUT AT RESTART                     07NOV00.352
> C                                                                                07NOV00.353
>       IF (IFTSOUT) THEN                                                          07NOV00.354
>          DO LLN=1,MAXNES                                                         07NOV00.355
>             CALL ADDRX1C(IAXALL(1,LLN))                                          07NOV00.356
>             CALL INITTS(LLN,IL,JL)                                               07NOV00.357
>             CALL ADDRX1C(IAXALL(1,1))                                            07NOV00.358
>          END DO                                                                  07NOV00.359
>       ENDIF                                                                      07NOV00.360
356c387
<   640 IF(SAVTIM-.001.GT.XTIME)GOTO 660                                           INITSAV.356
---
>   640 IF(NINT(SAVTIM/DTMIN).GT.KTAU)GOTO 660                                     07NOV00.361
359c390
<   660 IF(TAPTIM.GT.XTIME)GOTO 670                                                INITSAV.359
---
>   660 IF(NINT(TAPTIM/DTMIN).GT.KTAU)GOTO 670                                     07NOV00.362
362c393
<   670 IF(PRTTIM.GT.XTIME)GOTO 710                                                INITSAV.362
---
>   670 IF(NINT(PRTTIM/DTMIN).GT.KTAU)GOTO 710                                     07NOV00.363
368,370d398
< C                                                                                INITSAV.368
< C.....FOR LARGE DOMAIN:                                                          INITSAV.369
< C                                                                                INITSAV.370
373,376d400
<       SAVTIM=SAVTIM-0.000001                                                     INITSAV.373
<       TAPTIM=TAPTIM-0.000001                                                     INITSAV.374
<       PRTTIM=PRTTIM-0.000001                                                     INITSAV.375
<       DECTIM=DECTIM-0.000001                                                     INITSAV.376
===================================================================
domain/io/output.F
diff -r3.2 -r3.5
19c19
<       IF((XTIME.LT.TAPTIM).OR.(IFTAPE.NE.1))GOTO 30                              OUTPUT.19
---
>       IF((KTAU.LT.NINT(TAPTIM/DTMIN)).OR.(IFTAPE.NE.1))GOTO 30                   07NOV00.364
28c28
<           PRINT 10, TAPTIM,LLN                                                   OUTPUT.28
---
>           PRINT 10, XTIMC,LLN                                                    07NOV00.365
41c41
<       IF((.NOT.IFSAVE).OR.(XTIME.LT.SAVTIM))GOTO 80                              OUTPUT.41
---
>       IF((.NOT.IFSAVE).OR.(KTAU.LT.NINT(SAVTIM/DTMIN)))GOTO 80                   07NOV00.366
55c55
<           PRINT 70, SAVTIM,LLN,IFIX(XTIME+.001)                                  25JAN00.107
---
>           PRINT 70, XTIMC,LLN,NINT(XTIME)                                        07NOV00.367
===================================================================
domain/io/outtap.F
diff -r3.16 -r3.37
43a44
> #     include <parpx.incl>                                                       07NOV00.368
78c79,93
<       REAL  HDOTH(MAX(MIX,MIX_G)*MAX(MJX,MJX_G)*(MKX+1))                         OUTTAP.79
---
>       INTEGER MIX2,MJX2,MIJX,NSPG2,SCRSZ,HDOTHSZ,IOSCRSZ                         07NOV00.369
>       PARAMETER(MIX2=MAX(MIX,MIX_G))                                             07NOV00.370
>       PARAMETER(MJX2=MAX(MJX,MJX_G))                                             07NOV00.371
>       PARAMETER(MIJX=MAX(MIX2,MJX2))                                             07NOV00.372
>       PARAMETER(NSPG2=MAX(NSPGD,NSPGX))                                          07NOV00.373
>       PARAMETER(SCRSZ = MIJX*NSPG2*(MKX+1))                                      07NOV00.374
>       PARAMETER(HDOTHSZ = MIX2*MJX2*(MKX+1))                                     07NOV00.375
>       PARAMETER(IOSCRSZ = MAX(SCRSZ,HDOTHSZ))                                    07NOV00.376
>       REAL SCR(IOSCRSZ), HDOTH(IOSCRSZ)                                          07NOV00.377
>       COMMON /OUTSCRATCH/ SCR                                                    07NOV00.378
>       EQUIVALENCE (SCR,HDOTH)                                                    07NOV00.379
> C      INTEGER MIX2,MJX2                                                         07NOV00.380
> C      PARAMETER(MIX2=MAX(MIX,MIX_G))                                            07NOV00.381
> C      PARAMETER(MJX2=MAX(MJX,MJX_G))                                            07NOV00.382
> C      REAL HDOTH(MIX2*MJX2*(MKX+1))                                             07NOV00.383
95,96c110,114
<             IF (MOD(NINT(XTIME/TAPFRQ),NINT(BUFFRQ/TAPFRQ+0.01)).EQ.1            24SEP99.91
<      *        .OR. (BUFFRQ.EQ.TAPFRQ .AND. XTIME.GT.0.)) THEN                    24SEP99.92
---
>             ITMP = MAX(NINT(BUFFRQ/(TAPFRQ*INCTAP(NESCOU))),1)                   07NOV00.384
>             IF (MOD(NINT(XTIME/(TAPFRQ*INCTAP(NESCOU))),ITMP).EQ.1               07NOV00.385
>      *        .OR. (NINT(BUFFRQ).EQ.NINT(TAPFRQ) .AND. XTIME.GT.0.)              07NOV00.386
>      *        .OR. (NINT(BUFFRQ).LE.NINT(TAPFRQ*INCTAP(NESCOU))                  07NOV00.387
>      *        .AND. XTIME.GT.0.)) THEN                                           07NOV00.388
168a187,206
>                                                                                  07NOV00.389
>       IF (NESCOU.NE.1) THEN                                                      07NOV00.390
>          DO NP=6,7                                                               07NOV00.391
>          DO NIV=1,NUMINT                                                         07NOV00.392
>             JBHI(NIV,NP)=-999                                                    07NOV00.393
>             JBHIC(NIV,NP)( 1:80)=                                                07NOV00.394
>      *                   '                                        '              07NOV00.395
>      *               //  '                                        '              07NOV00.396
>          END DO                                                                  07NOV00.397
>          END DO                                                                  07NOV00.398
>                                                                                  07NOV00.399
>          DO NP=6,7                                                               07NOV00.400
>          DO NRV=1,NUMREAL                                                        07NOV00.401
>             JBHR(NRV,NP)=-999.                                                   07NOV00.402
>             JBHRC(NRV,NP)( 1:80)=                                                07NOV00.403
>      *                   '                                        '              07NOV00.404
>      *               //  '                                        '              07NOV00.405
>          END DO                                                                  07NOV00.406
>          END DO                                                                  07NOV00.407
>       END IF                                                                     07NOV00.408
205a244
>         JBHI(24,1)=2                                                             07NOV00.409
238c277
<       JBHI (3,11)=3                                                              25JAN00.113
---
>       JBHI (3,11)=4                                                              07NOV00.410
385,386c424,425
<       JBHIC(4,13)='IBLTYP:  0=FRICTIONLESS; 1=BULK PBL; 2=B'                     24SEP99.102
<      *     //     'LACKADAR PBL;3=B-T;4=ETA M-Y;5=MRF;6=G-S'                     24SEP99.103
---
>       JBHIC(4,13)='IBLTYP:  0=FRICTIONLESS; 1=BULK;2=BLACKA'                     07NOV00.411
>      *     //     'DAR;3=B-T;4=ETA M-Y;5=MRF;6=G-S;7=PX    '                     07NOV00.412
455a495,497
>       JBHI(28,13)=ISSTVAR                                                        07NOV00.413
>       JBHIC(28,13)='ISSTVAR: 1=SST VARYING IN TIME          '                    07NOV00.414
>      *     //      '0=SST DOES NOT VARY IN TIME             '                    07NOV00.415
675,680c717,719
<       DO I=1,ILX                                                                 OUTTAP.675
<           PSA(I,JL)=PSA(I,JL-1)                                                  OUTTAP.676
<       ENDDO                                                                      OUTTAP.677
<       DO J=1,JL                                                                  OUTTAP.678
<           PSA(IL,J)=PSA(IL-1,J)                                                  OUTTAP.679
<       ENDDO                                                                      OUTTAP.680
---
>       CALL FILLCRS(PSA,MIX,MJX,1,IL,JL,1)                                        07NOV00.416
>                                                                                  07NOV00.417
>       CALL FILLCRS(TA,MIX,MJX,MKX,IL,JL,KL)                                      07NOV00.418
699a739
>          CALL FILLCRS(QVA,MIX,MJX,MKX,IL,JL,KL)                                  07NOV00.419
709a750
>           CALL FILLCRS(QCA,MIX,MJX,MKX,IL,JL,KL)                                 07NOV00.420
717a759
>           CALL FILLCRS(QRA,MIX,MJX,MKX,IL,JL,KL)                                 07NOV00.421
727a770
>             CALL FILLCRS(QIA,MIX,MJX,MKX,IL,JL,KL)                               07NOV00.422
732c775
<      +                           'CLOUD WATER MIXING RATIO',                     OUTTAP.732
---
>      +                           'CLOUD ICE MIXING RATIO',                       07NOV00.423
735a779
>             CALL FILLCRS(QNIA,MIX,MJX,MKX,IL,JL,KL)                              07NOV00.424
746a791
>             CALL FILLCRS(QGA,MIX,MJX,MKX,IL,JL,KL)                               07NOV00.425
754a800
>             CALL FILLCRS(QNCA,MIX,MJX,MKX,IL,JL,KL)                              07NOV00.426
771a818
>          CALL FILLCRS(TURKE,MIX,MJX,MKX,IL,JL,KL)                                07NOV00.427
781a829
>          CALL FILLCRS(TKEA,MIX,MJX,MKX,IL,JL,KL+1)                               07NOV00.428
794a843
>          CALL FILLCRS(RTTEN,MIX,MJX,MKX,IL,JL,KL)                                07NOV00.429
816a866
>          CALL FILLCRS(WA,MIX,MJX,MKX+1,IL,JL,KL+1)                               07NOV00.430
824a875
>          CALL FILLCRS(PPA,MIX,MJX,MKX,IL,JL,KL)                                  07NOV00.431
1033,1034c1084,1089
<         DO J = 1,JLX                                                             OUTTAP.1026
<          HSCRL(I,J) = QFX(I,J)*XLV                                               OUTTAP.1027
---
>         DO J = 1,JLX                                                             07NOV00.432
>          IF(IBLTYP(NESCOU).EQ.7) THEN                                            07NOV00.433
>             HSCRL(I,J) = QFX(I,J)   ! in PX QFX already includes Lv              07NOV00.434
>          ELSE                                                                    07NOV00.435
>             HSCRL(I,J) = QFX(I,J)*XLV                                            07NOV00.436
>          ENDIF                                                                   07NOV00.437
1053c1108,1112
<           HSCRL(I,J) = GSW(I,J)/(1.-ALB(I,J))                                    OUTTAP.1046
---
>          IF(IBLTYP(NESCOU).EQ.7) THEN                                            07NOV00.438
>             HSCRL(I,J) = GSW(I,J)/(1.-ALBEDO(I,J))                               07NOV00.439
>          ELSE                                                                    07NOV00.440
>             HSCRL(I,J) = GSW(I,J)/(1.-ALB(I,J))                                  07NOV00.441
>          ENDIF                                                                   07NOV00.442
1068a1128,1142
>       IF(IFRAD.GE.2)THEN                                                         07NOV00.443
>         CALL EQUATO(OSW,MIX,MJX,1,HDOTH,IL,JL,1)                                 07NOV00.444
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.445
>      +                     'SWOUT',CURRENT_DATE,                                 07NOV00.446
>      +                     'C','YX','W/m^2',                                     07NOV00.447
>      +                     'TOP OUTGOING SHORTWAVE RADIATION',                   07NOV00.448
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.449
> C                                                                                07NOV00.450
>         CALL EQUATO(OLW,MIX,MJX,1,HDOTH,IL,JL,1)                                 07NOV00.451
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.452
>      +                     'LWOUT',CURRENT_DATE,                                 07NOV00.453
>      +                     'C','YX','W/m^2',                                     07NOV00.454
>      +                     'TOP OUTGOING LONGWAVE RADIATION',                    07NOV00.455
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.456
>       ENDIF                                                                      07NOV00.457
1090c1164
<       IF(ISOIL.EQ.2) THEN                                                        OUTTAP.1078
---
>       IF(ISOIL.GE.2) THEN                                                        07NOV00.458
1134a1209
>         IF(ISOIL.EQ.2) THEN                                                      07NOV00.459
1162a1238
>         ENDIF                                                                    07NOV00.460
1163a1240,1287
> C                                                                                07NOV00.461
> C----- EXTRA OUTPUT FOC MRF PBL:  T2, Q2, U10, and V10:                          07NOV00.462
> C                                                                                07NOV00.463
>       IF (IBLTYP(NESCOU) .EQ. 5) THEN                                            07NOV00.464
>          CALL EQUATO(TA2,MIX,MJX,1,HDOTH,IL,JL,1)                                07NOV00.465
>          CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                        07NOV00.466
>      +                        'T2',CURRENT_DATE,                                 07NOV00.467
>      +                        'C','YX','K',                                      07NOV00.468
>      +                        '2-meter Temperature',                             07NOV00.469
>      +                        IX,JX,1,MIX,MJX,1 )                                07NOV00.470
> C                                                                                07NOV00.471
>          CALL EQUATO(QA2,MIX,MJX,1,HDOTH,IL,JL,1)                                07NOV00.472
>          CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                        07NOV00.473
>      +                        'Q2',CURRENT_DATE,                                 07NOV00.474
>      +                        'C','YX','kg kg{-1}',                              07NOV00.475
>      +                        '2-meter Mixing Ratio',                            07NOV00.476
>      +                        IX,JX,1,MIX,MJX,1 )                                07NOV00.477
> C                                                                                07NOV00.478
> C      MAKE USE OF FILLCRS ROUTINE TO FILL THE LAST ROW AND COLUMN               07NOV00.479
> C           OF U10 AND V10                                                       07NOV00.480
> C                                                                                07NOV00.481
>          CALL FILLCRS(UA10,MIX,MJX,1,IL,JL,1)                                    07NOV00.482
>          CALL EQUATO(UA10,MIX,MJX,1,HDOTH,IL,JL,1)                               07NOV00.483
>          CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                        07NOV00.484
>      +                        'U10',CURRENT_DATE,                                07NOV00.485
>      +                        'C','YX','m s{-1}',                                07NOV00.486
>      +                        '10-meter U Component',                            07NOV00.487
>      +                        IX,JX,1,MIX,MJX,1 )                                07NOV00.488
> C                                                                                07NOV00.489
>          CALL FILLCRS(VA10,MIX,MJX,1,IL,JL,1)                                    07NOV00.490
>          CALL EQUATO(VA10,MIX,MJX,1,HDOTH,IL,JL,1)                               07NOV00.491
>          CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                        07NOV00.492
>      +                        'V10',CURRENT_DATE,                                07NOV00.493
>      +                        'C','YX','m s{-1}',                                07NOV00.494
>      +                        '10-meter V Component',                            07NOV00.495
>      +                        IX,JX,1,MIX,MJX,1 )                                07NOV00.496
>       ENDIF                                                                      07NOV00.497
> C                                                                                07NOV00.498
> C     MOISTURE AVAILABILITY IF VARYING IN TIME                                   07NOV00.499
> C                                                                                07NOV00.500
>       IF (IMOIAV(NESCOU) .GE. 1) THEN                                            07NOV00.501
>          CALL EQUATO(MAVAIL,MIX,MJX,1,HDOTH,IL,JL,1)                             07NOV00.502
>          CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                        07NOV00.503
>      +                        'MAVAIL',CURRENT_DATE,                             07NOV00.504
>      +                        'C','YX','dimensionless',                          07NOV00.505
>      +                        'MOISTURE AVAILABILITY',                           07NOV00.506
>      +                        IX,JX,1,MIX,MJX,1 )                                07NOV00.507
>       ENDIF                                                                      07NOV00.508
1166a1291
>       IF (ISFPAR(NESCOU).EQ.1) THEN                                              07NOV00.509
1172c1297
<      +                       LUN,NSEAS,1,LUN,NSEAS,1 )                           OUTTAP.1143
---
>      +                       LUN,NSEAS,1,NLU,NSEAS,1 )                           07NOV00.510
1179c1304
<      +                       LUN,NSEAS,1,LUN,NSEAS,1 )                           OUTTAP.1150
---
>      +                       LUN,NSEAS,1,NLU,NSEAS,1 )                           07NOV00.511
1186c1311
<      +                       LUN,NSEAS,1,LUN,NSEAS,1 )                           OUTTAP.1157
---
>      +                       LUN,NSEAS,1,NLU,NSEAS,1 )                           07NOV00.512
1193c1318
<      +                       LUN,NSEAS,1,LUN,NSEAS,1 )                           OUTTAP.1164
---
>      +                       LUN,NSEAS,1,NLU,NSEAS,1 )                           07NOV00.513
1200c1325
<      +                       LUN,NSEAS,1,LUN,NSEAS,1 )                           OUTTAP.1171
---
>      +                       LUN,NSEAS,1,NLU,NSEAS,1 )                           07NOV00.514
1207c1332
<      +                       LUN,NSEAS,1,LUN,NSEAS,1 )                           OUTTAP.1178
---
>      +                       LUN,NSEAS,1,NLU,NSEAS,1 )                           07NOV00.515
1214c1339,1437
<      +                       LUN,1,1,LUN,1,1 )                                   OUTTAP.1185
---
>      +                       LUN,1,1,NLU,1,1 )                                   07NOV00.516
>       END IF                                                                     07NOV00.517
> C                                                                                07NOV00.518
> C---- Output 2-d variables if using the PX land surface/PBL model                07NOV00.519
> C                                                                                07NOV00.520
>       IF (IBLTYP(NESCOU) .EQ. 7) THEN                                            07NOV00.521
> C                                                                                07NOV00.522
>         CALL EQUATO(MOL,MIX,MJX,1,HDOTH,IL,JL,1)                                 07NOV00.523
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.524
>      +                     'M-O LENG',CURRENT_DATE,                              07NOV00.525
>      +                     'C','YX','m',                                         07NOV00.526
>      +                     'MONIN-OBUKOV LENGTH',                                07NOV00.527
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.528
> C                                                                                07NOV00.529
>         CALL EQUATO(RADNET,MIX,MJX,1,HDOTH,IL,JL,1)                              07NOV00.530
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.531
>      +                     'NET RAD',CURRENT_DATE,                               07NOV00.532
>      +                     'C','YX','W/m^2',                                     07NOV00.533
>      +                     'SURFACE NET RADIATION',                              07NOV00.534
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.535
> C                                                                                07NOV00.536
>         CALL EQUATO(ALBEDO,MIX,MJX,1,HDOTH,IL,JL,1)                              07NOV00.537
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.538
>      +                     'ALBEDO',CURRENT_DATE,                                07NOV00.539
>      +                     'C','YX','fraction',                                  07NOV00.540
>      +                     'SURFACE ALBEDO',                                     07NOV00.541
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.542
> C                                                                                07NOV00.543
>         CALL EQUATO(GRNFLX,MIX,MJX,1,HDOTH,IL,JL,1)                              07NOV00.544
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.545
>      +                     'GRNFLX',CURRENT_DATE,                                07NOV00.546
>      +                     'C','YX','W/m^2',                                     07NOV00.547
>      +                     'GROUND HEAT FLUX',                                   07NOV00.548
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.549
> C                                                                                07NOV00.550
>         CALL EQUATO(RA,MIX,MJX,1,HDOTH,IL,JL,1)                                  07NOV00.551
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.552
>      +                     'RA',CURRENT_DATE,                                    07NOV00.553
>      +                     'C','YX','s/m',                                       07NOV00.554
>      +                     'AERODYNAMIC RESISTANCE',                             07NOV00.555
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.556
> C                                                                                07NOV00.557
>         CALL EQUATO(RS,MIX,MJX,1,HDOTH,IL,JL,1)                                  07NOV00.558
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.559
>      +                     'RS',CURRENT_DATE,                                    07NOV00.560
>      +                     'C','YX','s/m',                                       07NOV00.561
>      +                     'SURFACE RESISTANCE',                                 07NOV00.562
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.563
> C                                                                                07NOV00.564
>         IF(NUDGE.EQ.1) THEN                                                      07NOV00.565
>         CALL EQUATO(THZ1OB,MIX,MJX,1,HDOTH,IL,JL,1)                              07NOV00.566
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.567
>      +                     'TOB1',CURRENT_DATE,                                  07NOV00.568
>      +                     'C','YX','K',                                         07NOV00.569
>      +                     'SFC OBS TEMP SCALED TO LOWEST MODEL LEVEL',          07NOV00.570
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.571
> C                                                                                07NOV00.572
>         CALL EQUATO(RHOBS,MIX,MJX,1,HDOTH,IL,JL,1)                               07NOV00.573
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.574
>      +                     'RHOBS',CURRENT_DATE,                                 07NOV00.575
>      +                     'C','YX','percent',                                   07NOV00.576
>      +                     'OBS. RELATIVE HUMIDITY',                             07NOV00.577
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.578
>         ENDIF                                                                    07NOV00.579
>                                                                                  07NOV00.580
>         CALL EQUATO(LAI,MIX,MJX,1,HDOTH,IL,JL,1)                                 07NOV00.581
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.582
>      +                     'LAI',CURRENT_DATE,                                   07NOV00.583
>      +                     'C','YX','area/area',                                 07NOV00.584
>      +                     'LEAF AREA INDEX',                                    07NOV00.585
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.586
>                                                                                  07NOV00.587
>         CALL EQUATO(VEGFRC,MIX,MJX,1,HDOTH,IL,JL,1)                              07NOV00.588
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.589
>      +                     'VEGFRC',CURRENT_DATE,                                07NOV00.590
>      +                     'C','YX','fraction',                                  07NOV00.591
>      +                     'VEGETATION COVERAGE',                                07NOV00.592
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.593
>                                                                                  07NOV00.594
>         CALL EQUATO(ZNT,MIX,MJX,1,HDOTH,IL,JL,1)                                 07NOV00.595
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.596
>      +                     'ZNT',CURRENT_DATE,                                   07NOV00.597
>      +                     'C','YX','m',                                         07NOV00.598
>      +                     'ROUGHNESS LENGTH',                                   07NOV00.599
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.600
>                                                                                  07NOV00.601
>       DO I=1,IL                                                                  07NOV00.602
>         DO J=1,JL                                                                07NOV00.603
>           HSCRL(I,J)=FLOAT(ISLTYP(I,J))                                          07NOV00.604
>         ENDDO                                                                    07NOV00.605
>       ENDDO                                                                      07NOV00.606
>         CALL EQUATO(HSCRL,MIX,MJX,1,HDOTH,IL,JL,1)                               07NOV00.607
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         07NOV00.608
>      +                     'ISLTYP',CURRENT_DATE,                                07NOV00.609
>      +                     'C','YX','USDA cat',                                  07NOV00.610
>      +                     'SOIL TEXTURE TYPE',                                  07NOV00.611
>      +                     IX,JX,1,MIX,MJX,1 )                                   07NOV00.612
> C                                                                                07NOV00.613
>       ENDIF                                                                      07NOV00.614
===================================================================
domain/io/rdinit.F
diff -r3.15 -r3.30
5a6
> #     include <defines.incl>                                                     07NOV00.615
34c35
< C     NVC=NUMBER OF VEGETATION CATEGORIES (SSiB)                                 RDINIT.36
---
> C     NVC=NUMBER OF VEGETATION CATEGORIES (USGS)                                 07NOV00.616
38c39
<       PARAMETER (NVC=17, NSC=17, NMO=12)                                         RDINIT.40
---
>       PARAMETER (NVC=25, NSC=17, NMO=12)                                         07NOV00.617
59c60,62
<      -        FNDSOILT(MLX),FNDSOILM(MLX),FNDLSMT,FNDLSMM                        24SEP99.224
---
>      -        FNDSOILT(MLX),FNDSOILM(MLX),FNDLSMT,FNDLSMM,FNDVEGCT,              07NOV00.618
>      -        FNDSOLCT                                                           07NOV00.619
>       LOGICAL FNDSOILMA                                                          07NOV00.620
87a91
>       FNDSOILMA=.FALSE.                                                          07NOV00.621
104a109,115
>       IF(ISOIL.EQ.3)THEN                                                         07NOV00.622
>         FNDVEGFR=.FALSE.                                                         07NOV00.623
>         FNDVEGCT=.FALSE.                                                         07NOV00.624
>         FNDSOLCT=.FALSE.                                                         07NOV00.625
>         FNDLSMT=.FALSE.                                                          07NOV00.626
>         FNDLSMM=.FALSE.                                                          07NOV00.627
>       ENDIF                                                                      07NOV00.628
196d206
<           ISKF = ISKF+1                                                          RDINIT.187
276a287,288
>         ELSE IF(NAME8.EQ.'TSEASFC ')THEN                                         07NOV00.629
>           CALL EQUATE(HDOTH,IX,JX,1,TSS,MIX,MJX,1)                               07NOV00.630
291c303
<           CALL EQUATE(HDOTH,IX,JX,1,SNOWC,MIX,MJX,1)                             RDINIT.282
---
>           IF(.NOT.FNDWEASD)CALL EQUATE(HDOTH,IX,JX,1,SNOWC,MIX,MJX,1)            07NOV00.631
296a309
> C_FLIC_END_NOFLIC                                                                07NOV00.632
306a320
> C_FLIC_BEGIN_NOFLIC                                                              07NOV00.633
315c329
<         ELSE IF(NAME8.EQ.'TEMPGRD ')THEN                                         RDINIT.301
---
>         ELSE IF(NAME8.EQ.'TEMPGRD '.AND.ISOIL.EQ.2)THEN                          07NOV00.634
334a349
>           FNDVEGCT=.TRUE.                                                        07NOV00.635
336c351
<         ELSE IF(NAME6.EQ.'SOLCAT'                                                RDINIT.322
---
>         ELSE IF(NAME6.EQ.'SOICAT'                                                07NOV00.636
338a354
>           FNDSOLCT=.TRUE.                                                        07NOV00.637
358,370c374,409
<         ELSE IF(NAME5.EQ.'SOILM'                                                 RDINIT.344
<      -          .AND.MIXL.GT.1)THEN                                              RDINIT.345
<           READ(NAME8(6:8),'(I3)')ILYR                                            RDINIT.346
<           ILEV=0                                                                 RDINIT.347
<           DO NL=1,NSML                                                           RDINIT.348
<             IF(ILYR.EQ.ISMLYR(NL))ILEV=NL                                        RDINIT.349
<           ENDDO                                                                  RDINIT.350
<           IF(ILEV.NE.0)THEN                                                      RDINIT.351
<             FNDSOILM(ILEV)=.TRUE.                                                24SEP99.243
<             CALL EQUATE(HDOTH,IX,JX,1,SOILM(1,1,ILEV),MIXL,MJXL,1)               RDINIT.353
<           ELSE                                                                   RDINIT.354
<             PRINT *,NAME8,' LAYER NOT RECOGNIZED'                                RDINIT.355
<           ENDIF                                                                  RDINIT.356
---
> C       ELSE IF(NAME5.EQ.'SOILM'                                                 07NOV00.638
> C    -          .AND.MIXL.GT.1)THEN                                              07NOV00.639
>         ELSE IF(NAME5.EQ.'SOILM') THEN                                           07NOV00.640
>           IF (MIXL.GT.1) THEN                                                    07NOV00.641
>             READ(NAME8(6:8),'(I3)')ILYR                                          07NOV00.642
>             ILEV=0                                                               07NOV00.643
>             DO NL=1,NSML                                                         07NOV00.644
>               IF(ILYR.EQ.ISMLYR(NL))ILEV=NL                                      07NOV00.645
>             ENDDO                                                                07NOV00.646
>             IF(ILEV.NE.0)THEN                                                    07NOV00.647
>               FNDSOILM(ILEV)=.TRUE.                                              07NOV00.648
>               CALL EQUATE(HDOTH,IX,JX,1,SOILM(1,1,ILEV),MIXL,MJXL,1)             07NOV00.649
>             ELSE                                                                 07NOV00.650
>               PRINT *,NAME8,' LAYER NOT RECOGNIZED'                              07NOV00.651
>             ENDIF                                                                07NOV00.652
>           ELSE IF(NAME8.EQ.'SOILM010' .AND. IMOIAV(INEST).EQ.2) THEN             07NOV00.653
> C IF SOIL MOISTURE FIELD IS PRESENT AND IMOIAV = 2, USE IT TO DEFINE             07NOV00.654
> C    MOISTURE AVAILABILITY IN THE MODEL, INSTEAD OF TABLE VALUE                  07NOV00.655
>             FNDSOILMA=.TRUE.                                                     07NOV00.656
>             CALL EQUATE(HDOTH,IX,JX,1,MAVAIL(1,1),MIX,MJX,1)                     07NOV00.657
> C CONVERT SOIL MOISTURE TO MOISTURE AVAILIBILITY (FROM J. BRESCH)                07NOV00.658
> C_FLIC_END_NOFLIC                                                                07NOV00.659
>             DO I = 1,IX                                                          07NOV00.660
>               DO J = 1,JX                                                        07NOV00.661
>                 IF (MAVAIL(I,J) .LT. 0.02) THEN                                  07NOV00.662
>                   MAVAIL(I,J) = 0.02                                             07NOV00.663
>                 ELSE IF (MAVAIL(I,J) .GT. 0.35) THEN                             07NOV00.664
>                   MAVAIL(I,J) = 0.7                                              07NOV00.665
>                 ELSE                                                             07NOV00.666
>                   MAVAIL(I,J) = MAVAIL(I,J)*2. + (.5-MAVAIL(I,J))*.09            07NOV00.667
>                 END IF                                                           07NOV00.668
>               END DO                                                             07NOV00.669
>             END DO                                                               07NOV00.670
> C_FLIC_BEGIN_NOFLIC                                                              07NOV00.671
>           ENDIF                                                                  07NOV00.672
> C CALCULATING MOISTURE AVAILABILITY FROM SOIL MOISTURE FIELD                     07NOV00.673
406a446
>             ISKF = ISKF+1                                                        07NOV00.674
437,440d476
<         IF(.NOT.FNDSOILH.AND..NOT.FNDLSMT)THEN                                   24SEP99.272
<            PRINT *,'NO SOIL HEIGHT FOUND: CHECK REGRID JOB'                      RDINIT.396
<            ISTOP=ISTOP+1                                                         RDINIT.397
<         ENDIF                                                                    RDINIT.398
463a500,505
> C FOR IMOIAV = 2                                                                 07NOV00.675
>       IF (.NOT.FNDSOILMA .AND. IMOIAV(INEST).EQ.2) THEN                          07NOV00.676
>          PRINT *, '10 CM SOIL MOISTURE NOT FOUND FOR DOMAIN ', INEST             07NOV00.677
>          PRINT *, 'CHECK REGRID JOB OR RESET IMOIAV = 1 AND RUN AGAIN'           07NOV00.678
>          STOP                                                                    07NOV00.679
>       END IF                                                                     07NOV00.680
570a613
>           IF(VEGFRC(I,J).LT.1.E-3)VEGFRC(I,J)=0.                                 07NOV00.681
599,600c642,646
< C     CHECK FOR 1-WAY NESTED OUTPUT LSM DATA ALREADY ON CORRECT LAYERS           24SEP99.283
<        IF(.NOT.FNDLSMT.AND..NOT.FNDLSMM)THEN                                     24SEP99.284
---
> C     SKIP THE FOLLOWING FOR 1-WAY NESTED INPUT IF LSM DATA WAS FOUND            07NOV00.682
>        IF(.NOT.FNDLSMT.AND..NOT.FNDLSMM) THEN                                    07NOV00.683
>          IF(FNDSOILH)THEN                                                        07NOV00.684
>           PRINT *,'THIS USED A PRE-3.4 VERSION OF REGRID'                        07NOV00.685
>           PRINT *,'SOIL HEIGHT ADJUSTMENT DONE IN MM5 INSTEAD OF REGRID'         07NOV00.686
609a656
>          END IF                                                                  07NOV00.687
688a736,790
> C--------PX-VEGELAND if IBLTYP = 7                                               07NOV00.688
> #ifdef IBLT7                                                                     07NOV00.689
>       IF(IBLTYP(1).EQ.7) THEN                                                    07NOV00.690
> C        PRINT *,' vcat(20,20,7),vf(06),scat(5)=',                               07NOV00.691
> C     >   vegcat(20,20,7),vegfmo(20,20,6),solcat(20,20,5),                       07NOV00.692
> C     >   ' JULDAY=',JULDAY                                                      07NOV00.693
>            IF(FNDVEGCT.AND.FNDSOLCT.AND.FNDVEGFR)THEN                            07NOV00.694
>              CALL VEGELAND(VEGCAT,VEGFMO,JULDAY,ILX,JLX,ZNT,RSTMIN,              07NOV00.695
>      >                      XLAI,XVEG,XLAIMN,XVEGMN)                             07NOV00.696
>              CALL SOILAV(SOLCAT,ILX,JLX,ISLTYP)                                  07NOV00.697
>            ELSE                                                                  07NOV00.698
>              PRINT *,'MISSING FIELD REQUIRED'                                    07NOV00.699
>              IF(.NOT.FNDVEGCT)PRINT *,'VEGCAT: USE IEXTRA IN TERRAIN'            07NOV00.700
>              IF(.NOT.FNDSOLCT)PRINT *,'SOLCAT: USE IEXTRA IN TERRAIN'            07NOV00.701
>              IF(.NOT.FNDVEGFR)PRINT *,'VEGFMO'                                   07NOV00.702
>              STOP 'IN RDINIT'                                                    07NOV00.703
>            ENDIF                                                                 07NOV00.704
> C     CHECK FOR 1-WAY NESTED OUTPUT LSM DATA ALREADY ON CORRECT LAYERS           07NOV00.705
>        IF(.NOT.FNDLSMT.AND..NOT.FNDLSMM)THEN                                     07NOV00.706
> C     FIND MID-LEVELS OF INPUT SOIL DATA                                         07NOV00.707
>         SMLEV(1)=0.5*FLOAT(ISMLYR(1))*0.01                                       07NOV00.708
>         DO NL=2,NSML                                                             07NOV00.709
>           SMLEV(NL)=0.01*(FLOAT(ISMLYR(NL-1))+0.5*FLOAT(ISMLYR(NL)               07NOV00.710
>      -              -ISMLYR(NL-1)))                                              07NOV00.711
>         ENDDO                                                                    07NOV00.712
>         DO J=1,JLX                                                               07NOV00.713
>         DO I=1,ILX                                                               07NOV00.714
>           STCA(I,J,1)=TGA(I,J)                                                   07NOV00.715
>           DO L=1,MLX                                                             07NOV00.716
>             IF(ZS(L).LE.SMLEV(1))THEN                                            07NOV00.717
> C             MODEL LAYER SHALLOWER THAN OR EQUAL TO FIRST INPUT LAYER           07NOV00.718
>               SMCA(I,J,L)=SOILM(I,J,1)                                           07NOV00.719
>               SMCB(I,J,L)=SMCA(I,J,L)                                            07NOV00.720
>             ELSE IF(ZS(L).GT.SMLEV(NSML))THEN                                    07NOV00.721
> C             MODEL LAYER MORE THAN DEEPEST INPUT - SET TO DEEPEST INPUT         07NOV00.722
>               SMCA(I,J,L)=SOILM(I,J,NSML)                                        07NOV00.723
>               SMCB(I,J,L)=SMCA(I,J,L)                                            07NOV00.724
>             ELSE                                                                 07NOV00.725
> C             MODEL LAYER BETWEEN INPUT LAYERS - INTERPOLATE                     07NOV00.726
>               DO NL=1,NSML-1                                                     07NOV00.727
>                 IF(ZS(L).GT.SMLEV(NL).AND.ZS(L).LE.SMLEV(NL+1))THEN              07NOV00.728
>                   SMCA(I,J,L)=((SMLEV(NL+1)-ZS(L))*SOILM(I,J,NL)+                07NOV00.729
>      -                        (ZS(L)-SMLEV(NL))*SOILM(I,J,NL+1))                 07NOV00.730
>      -                        /(SMLEV(NL+1)-SMLEV(NL))                           07NOV00.731
>                   SMCB(I,J,L)=SMCA(I,J,L)                                        07NOV00.732
>                 ENDIF                                                            07NOV00.733
>               ENDDO                                                              07NOV00.734
>             ENDIF                                                                07NOV00.735
>           ENDDO                                                                  07NOV00.736
>         ENDDO                                                                    07NOV00.737
>         ENDDO                                                                    07NOV00.738
>        ENDIF                                                                     07NOV00.739
>       ENDIF                                                                      07NOV00.740
> #endif                                                                           07NOV00.741
> C---------------------------------                                               07NOV00.742
691a794
>       IF (DM_IONODE())THEN                                                       07NOV00.743
692a796,797
>       ENDIF                                                                      07NOV00.744
>                                                                                  07NOV00.745
===================================================================
domain/io/rdter.F
diff -r3.8 -r3.13
2c2
<      -         XLAT,XLONG,MSFD,MSFX,F,ISOIL)                                     24SEP99.290
---
>      -         XLAT,XLONG,MSFD,MSFX,F,ISOIL,VEGFRC)                              07NOV00.746
9a10
> #     include <chardate.incl>                                                    07NOV00.747
27a29,37
>       real vegfrc(mixl,mjxl)                                                     07NOV00.748
>       real vegfmo(mixl,mjxl,12)                                                  07NOV00.749
>       integer imon                                                               07NOV00.750
>       character*6 name6                                                          07NOV00.751
>       character*19 cdatenew                                                      07NOV00.752
>       integer NY, NM, ND, MHOUR, MMIN, MSEC, m1, m2                              07NOV00.753
>       real realmon                                                               07NOV00.754
>       real frcmon                                                                07NOV00.755
> C                                                                                07NOV00.756
132a143
>         NAME6=name(1:6)                                                          07NOV00.757
138,141c149,156
< C       ELSE IF(NAME6.EQ.'VEGFRC'                                                RDTER.126
< C    -          .AND.MIXL.GT.1)THEN                                              RDTER.127
< C         READ(NAME8(7:8),'(I2)')IMON                                            RDTER.128
< C         CALL EQUATE(HSCR1L,IX,JX,1,VEGFMO(1,1,IMON),MIXL,MJXL,1)               RDTER.129
---
>         ELSE IF(NAME6.EQ.'VEGFRC'.AND.MIXL.GT.1)THEN                             07NOV00.758
>            READ(NAME8(7:8),'(I2)')IMON                                           07NOV00.759
> #ifndef MPP1                                                                     07NOV00.760
>            CALL EQUATE(HSCR1L,IX,JX,1,VEGFMO(1,1,IMON),MIXL,MJXL,1)              07NOV00.761
> #else                                                                            07NOV00.762
>            CALL EQUATE(HSCR1L,IX,JX,1,                                           07NOV00.763
>      +                VEGFMO(NOFLIC(1),NOFLIC(1),IMON),MIXL,MJXL,1)              07NOV00.764
> #endif                                                                           07NOV00.765
163a179,214
>                                                                                  07NOV00.766
>       IF(ISOIL.EQ.2)THEN                                                         07NOV00.767
> C     READ TERRAIN OUTPUT FOR TM, IVGTYP, ISLTYP, VEGFRC                         07NOV00.768
> C       USE DOMINANT IVGTYP ISLTYP - INTERPOLATE VEGFRC IN TIME                  07NOV00.769
> C                                                                                07NOV00.770
> C       REALMON=0. AND 12. ON DECEMBER 15TH                                      07NOV00.771
>                                                                                  07NOV00.772
> C        print*, 'xtime = ', xtime                                               07NOV00.773
> C        print*, 'julday = ', julday                                             07NOV00.774
> C        print*, 'cdate = ', cdate                                               07NOV00.775
>                                                                                  07NOV00.776
>          CALL GETH_NEWDATE( CDATENEW, CDATE, NINT(XTIME*60.) )                   07NOV00.777
> C        print*, 'cdatenew = ', cdatenew                                         07NOV00.778
>          call split_date_char ( cdatenew, NY , NM , ND ,                         07NOV00.779
>      -        MHOUR , MMIN , MSEC )                                              07NOV00.780
>          REALMON=FLOAT(NM)+FLOAT(ND-15)/30.                                      07NOV00.781
> C        print*, 'REALMON = ', REALMON                                           07NOV00.782
>                                                                                  07NOV00.783
>          IF(REALMON.GE.12.)REALMON=REALMON-12.                                   07NOV00.784
>          M1=IFIX(REALMON)                                                        07NOV00.785
>          M2=IFIX(REALMON+1)                                                      07NOV00.786
>          IF(M1.EQ.0)M1=12                                                        07NOV00.787
>          FRCMON=REALMON-IFIX(REALMON)                                            07NOV00.788
>          DO J=1,JLX                                                              07NOV00.789
>             DO I=1,ILX                                                           07NOV00.790
> C       LINEAR INTERPOLATION IN TIME FOR VEGFRC                                  07NOV00.791
>                VEGFRC(I,J)=                                                      07NOV00.792
>      &              (1.-FRCMON)*VEGFMO(I,J,M1)+FRCMON*VEGFMO(I,J,M2)             07NOV00.793
>             ENDDO                                                                07NOV00.794
>          ENDDO                                                                   07NOV00.795
>       ENDIF                                                                      07NOV00.796
> C                                                                                07NOV00.797
>       IF (DM_IONODE())THEN                                                       07NOV00.798
>          CLOSE (IUNIT)                                                           07NOV00.799
>       ENDIF                                                                      07NOV00.800
> C                                                                                07NOV00.801
===================================================================
domain/io/savread.F
diff -r3.2 -r3.4
2,3c2
<      * INTFG,IFGIHUG,ALLFO,IFOHUG,IUTSAV,MAXNES,                                 SAVREAD.2
<      * MKX,MIX,MJX)                                                              SAVREAD.3
---
>      * INTFG,IFGIHUG,ALLFO,IFOHUG,IUTSAV)                                        07NOV00.802
===================================================================
domain/io/shutdo.F
diff -r3.0 -r3.2
9c9
<       IXTIMR=IFIX(XTIME+.001)                                                    SHUTDO.9
---
>       IXTIMR=NINT(XTIME)                                                         07NOV00.803
===================================================================
domain/io/write_fieldrec.F
diff -r3.0 -r3.2
53c53
<       INTEGER        I                                                           WRITE_FIELDREC.53
---
>       INTEGER        I,J,K                                                       07NOV00.804
98a99,102
>       ELSE IF(NDIM.EQ.2.AND.ORDERING(1:2).EQ.'CA')THEN                           07NOV00.805
>         IF ( DM_IONODE() ) THEN                                                  07NOV00.806
> 	  WRITE(IUNIT)((BUFFER(I+(J-1)*IX),I=1,IR),J=1,JR)                              07NOV00.807
> 	ENDIF                                                                           07NOV00.808
===================================================================
domain/nest/Makefile
diff -r3.0 -r3.2
23c23,24
< 	ovlchk.o
---
> 	ovlchk.o \
> 	nestlsm.o
40c41,42
< 	ovlchk.i
---
> 	ovlchk.i \
> 	nestlsm.i
57c59,60
< 	ovlchk.f
---
> 	ovlchk.f \
> 	nestlsm.f
139a143
> stotndi.o: ../../include/soilp.incl ../../include/soilpn.incl
===================================================================
domain/nest/chknst.F
diff -r3.0 -r3.3
116c116
<         IF(XTIMET.GT.TAPTIM-TAPFRQ+5.)THEN                                       CHKNST.116
---
>         IF(KTAU.GE.NINT((TAPTIM-TAPFRQ+5.)/DTMIN))THEN                           07NOV00.809
129c129
<         PRINT *,'NUMLV = ',NUMLV(IDLEV,ICOARS),IDLEV,ICOARS                      CHKNST.129
---
> C       PRINT *,'NUMLV = ',NUMLV(IDLEV,ICOARS),IDLEV,ICOARS                      07NOV00.810
===================================================================
domain/nest/feedbk.F
diff -r3.3 -r3.6
107a108
>             XLAND(ICY,JCX)=XLANDN(IFY,JFX)                                       07NOV00.811
217a219,239
> C                                                                                07NOV00.812
> C--- MOISTURE AVAILABILITY FIELD FEEDBACK                                        07NOV00.813
> C                                                                                07NOV00.814
>       IF (IMOIAV(INEST).GE.1) THEN                                               07NOV00.815
> cmic$ do all autoscope                                                           07NOV00.816
> c$omp parallel do default(shared)                                                07NOV00.817
> c$omp&private(icy,jcx,jfx,jfp,jfm,ify,ifp,ifm)                                   07NOV00.818
>         DO 23 JCX=JWP1,JEM2                                                      07NOV00.819
>           JFX=2+(JCX-JWEST)*IRAX                                                 07NOV00.820
>           JFP=JFX+1                                                              07NOV00.821
>           JFM=JFX-1                                                              07NOV00.822
>           DO 23 ICY=ISP1,INM2                                                    07NOV00.823
>             IFY=2+(ICY-ISOUTH)*IRAX                                              07NOV00.824
>             IFP=IFY+1                                                            07NOV00.825
>             IFM=IFY-1                                                            07NOV00.826
>             MAVAIL(ICY,JCX)=(MAVAIN(IFY,JFX)+MAVAIN(IFP,JFX)+                    07NOV00.827
>      +                   MAVAIN(IFM,JFX)+MAVAIN(IFY,JFP)+MAVAIN(IFY,JFM)         07NOV00.828
>      +                   +MAVAIN(IFP,JFP)+MAVAIN(IFP,JFM)+                       07NOV00.829
>      +                   MAVAIN(IFM,JFP)+MAVAIN(IFM,JFM))/9.                     07NOV00.830
>    23     CONTINUE                                                               07NOV00.831
>       END IF                                                                     07NOV00.832
===================================================================
domain/nest/initnest.F
diff -r3.16 -r3.33
17a18
> #undef VECTOR
770a772,786
> C                                                                                07NOV00.834
> C--- MOISTURE AVAILABILITY IF INPUT IS USED                                      07NOV00.835
> C                                                                                07NOV00.836
>       IF(IMOIAV(NESCOU).EQ.2)THEN                                                07NOV00.837
> cmic$ do all autoscope                                                           07NOV00.838
> c$omp parallel do default(shared)                                                07NOV00.839
> c$omp&private(i,j,icm,jcm)                                                       07NOV00.840
>         DO J=1,JXXN-1                                                            07NOV00.841
>           DO I=1,IYYN-1                                                          07NOV00.842
>             ICM=(I-1)/3+ISOUTH                                                   07NOV00.843
>             JCM=(J-1)/3+JWEST                                                    07NOV00.844
>             MAVAIN(I,J)=MAVAIL(ICM,JCM)                                          07NOV00.845
>           ENDDO                                                                  07NOV00.846
>         ENDDO                                                                    07NOV00.847
>       ENDIF                                                                      07NOV00.848
773c789
<       IF(ISOIL.EQ.2)THEN                                                         INITNEST.772
---
>       IF(ISOIL.EQ.2.OR.ISOIL.EQ.3)THEN                                           07NOV00.849
789a806,809
>         CALL FILL(XICE,HELP1,MIX,MJX,IYY,JXX,IYY-1,JXX-1)                        07NOV00.850
>         CALL EXAINT(HELP1,IYY,JXX,HSCR1N,IYYN,JXXN,ISOUTH,JWEST,1)               07NOV00.851
>         CALL FILL(HSCR1N,XICEN,IYYN,JXXN,MIX,MJX,IYYN-1,JXXN-1)                  07NOV00.852
> C                                                                                07NOV00.853
803a824
>             IF (SNOAN(I,J) .LT. 0.) SNOAN(I,J)=0.                                07NOV00.854
1011c1032
<      +       XLONG,MSFD,MSFX,F,ISOIL)                                            24SEP99.308
---
>      +       XLONG,MSFD,MSFX,F,ISOIL,VEGFRC)                                     07NOV00.855
1035c1056
< C  SIMILARLY ADJUST TG AND TSL                                                   INITNEST.1013
---
> C  SIMILARLY ADJUST TG, TMN AND TSL                                              07NOV00.856
1038a1060
>                   TMN(I,J)=TMN(I,J)+DT0                                          07NOV00.857
1151a1174,1184
> C                                                                                07NOV00.858
> #ifdef SOIL2                                                                     07NOV00.859
>         IF (ISOIL .EQ. 2) THEN                                                   07NOV00.860
>            CALL ADDRX1C(IAXALL(1,NUMNES-1))                                      07NOV00.861
>            CALL ADDRX1N(IAXALL(1,NUMNES))                                        07NOV00.862
> C          Pass the help arrays simply as work space.                            07NOV00.863
>            PRINT *, 'LSM NEST INITIALIZATION FOR DOMAIN ', NUMNES                07NOV00.864
>            CALL NESTLSM(NESCOU, HELP1, HELP1N, HELP2, HELP2N)                    07NOV00.865
>         ENDIF                                                                    07NOV00.866
> #endif                                                                           07NOV00.867
> C                                                                                07NOV00.868
1206a1240,1247
> C                                                                                07NOV00.869
> C     READ IN LOWBDY FOR NEST (IF IT EXISTS)                                     07NOV00.870
> C     SKIP LOWBDY IF NOT ALLOWING SST/SNOWC/SEAICE TO VARY IN TIME               07NOV00.871
> C                                                                                07NOV00.872
>       IF (XTIME.EQ.0. .OR. ISSTVAR.EQ.1) THEN                                    07NOV00.873
>       CALL ADDRX1C(IAXALL(1,NUMNES))                                             07NOV00.874
>       CALL LBDYIN(NUMNES,TBDYLBE,BDYLTIM,BDYLFRQ,ISOIL,IACTIV,IL,JL)             07NOV00.875
>       END IF                                                                     07NOV00.876
1209a1251
>       CALL ADDRX1N(IAXALL(1,NUMNES))                                             07NOV00.877
1249a1292,1296
>       IF(IBLTYP(N).EQ.7)PRINT1065,IBLTYP(N)                                      07NOV00.878
>       IF(IBLTYP(N).EQ.7.AND.IOVERW(N).NE.1) THEN                                 07NOV00.879
>          PRINT *,'IBLTYP=7 REQUIRES IOVERW=1 FOR NEST INPUT'                     07NOV00.880
>          STOP 'REQUIRE MMINPUT FILE FOR THE NEST'                                07NOV00.881
>       END IF                                                                     07NOV00.882
1260d1306
<       IF(ISFPAR(N).EQ.2)PRINT1179                                                INITNEST.1215
1261a1308,1309
>       IF(IMOIAV(N).EQ.1)PRINT1168,IMOIAV(N)                                      07NOV00.883
>       IF(IMOIAV(N).EQ.2)PRINT1169,IMOIAV(N)                                      07NOV00.884
1282c1330
<  1001 FORMAT(' IMPHYS = ',I3,'  THIS NEST IS DRY WITH PASSIVE '                  INITNEST.1237
---
>  1001 FORMAT(' IMPHYS = ',I3,'  THIS NEST IS DRY WITH PASSIVE ',                 07NOV00.885
1285c1333
<  1002 FORMAT(' IMPHYS = ',I3,'  THIS NEST IS MOIST WITH STABLE '                 INITNEST.1240
---
>  1002 FORMAT(' IMPHYS = ',I3,'  THIS NEST IS MOIST WITH STABLE ',                07NOV00.886
1326a1375
>  1065 FORMAT(/' IBLTYP = ',I3,'  PLEIM-XIU PBL AND LSM ARE USED.')               07NOV00.887
1347c1396,1400
<  1179 FORMAT(12X,'SURFACE PARAMETERS FOR VEG AND SOIL.')                         INITNEST.1302
---
>  1168 FORMAT(' IMOIAV = ',I3, '  MOISTURE AVAIL WILL VARY IN TIME ',             07NOV00.888
>      1 'USING BUCKET MODEL,',/,15X,'USING TABLE VALUE TO START.')                07NOV00.889
>  1169 FORMAT(' IMOIAV = ',I3, '  MOISTURE AVAIL WILL VARY IN TIME ',             07NOV00.890
>      1 'USING BUCKET MODEL,',/,15X,                                              07NOV00.891
>      2 'USING SOIL-MOISTURE CONVERTED VALUE TO START.')                          07NOV00.892
1629d1681
<       IF(ISFPAR(N).EQ.2)GOTO 466                                                 INITNEST.1588
1681c1733,1734
<           MAVAIN(I,J)=SLMO(IS,ISN)                                               INITNEST.1643
---
>           IF(IMOIAV(NESCOU).NE.2.OR.IS.EQ.ISWATER)                               07NOV00.893
>      -      MAVAIN(I,J)=SLMO(IS,ISN)                                             07NOV00.894
1720,1756c1773,1789
<       GOTO 470                                                                   INITNEST.1682
<   466 CONTINUE                                                                   INITNEST.1683
< C       ISFPAR(N)=2                                                              INITNEST.1684
< C       USES VEG AND SOIL CATEGORIES                                             INITNEST.1685
<   470 IF(IMOIAV(N).EQ.0)GOTO 510                                                 INITNEST.1686
<       IF(ISFPAR(N).EQ.1)GOTO 490                                                 INITNEST.1687
<       IF(ISFPAR(N).EQ.2)GOTO 510                                                 INITNEST.1688
<       SHCLND=1.E6                                                                INITNEST.1689
< cmic$ do all autoscope                                                           INITNEST.1690
< c$omp parallel do default(shared)                                                INITNEST.1691
< c$omp&private(i,j)                                                               INITNEST.1692
<       DO 480 J=1,JNLX                                                            INITNEST.1693
<         DO 480 I=1,INLX                                                          INITNEST.1694
<           SHCN(I,J)=SHCLND                                                       INITNEST.1695
<   480   CONTINUE                                                                 INITNEST.1696
<                                                                                  INITNEST.1697
<       GOTO 510                                                                   INITNEST.1698
<   490 CONTINUE                                                                   INITNEST.1699
< cmic$ do all autoscope                                                           INITNEST.1700
< c$omp parallel do default(shared)                                                INITNEST.1701
< c$omp&private(i,j,is)                                                            INITNEST.1702
<       DO 500 J=1,JNLX                                                            INITNEST.1703
<         DO 500 I=1,INLX                                                          INITNEST.1704
<           IS=INT(SATBRN(I,J)+0.001)                                              INITNEST.1705
<           SHCN(I,J)=SFHC(IS,ISN)                                                 INITNEST.1706
<   500   CONTINUE                                                                 INITNEST.1707
<                                                                                  INITNEST.1708
<       IF(IFSNOW(N).EQ.0)GOTO 510                                                 INITNEST.1709
< cmic$ do all autoscope                                                           INITNEST.1710
< c$omp parallel do default(shared)                                                INITNEST.1711
< c$omp&private(i,j)                                                               INITNEST.1712
<       DO 505 J=1,JNLX                                                            INITNEST.1713
<         DO 505 I=1,INLX                                                          INITNEST.1714
<           IF((SNOWCN(I,J).GT.0.))THEN                                            INITNEST.1715
<             SHCN(I,J)=SFHC(11,ISN)                                               INITNEST.1716
<           ENDIF                                                                  INITNEST.1717
<   505   CONTINUE                                                                 INITNEST.1718
---
>   470 CONTINUE                                                                   07NOV00.895
> C                                                                                07NOV00.896
> C-----CALCULATE SLAB THERMAL CAPACITY CAPGN(I,J): IT ARE DEPENDENT ON            07NOV00.897
> C     THCN(I,J) - SOIL THERMAL INERTIAL, ONLY.                                   07NOV00.898
> C                                                                                07NOV00.899
> cmic$ do all autoscope                                                           07NOV00.900
> c$omp parallel do default(shared)                                                07NOV00.901
> c$omp&private(i,j)                                                               07NOV00.902
>       DO 480 J=1,JNLX                                                            07NOV00.903
>         DO 480 I=1,INLX                                                          07NOV00.904
>           CAPGN(I,J)=3.298E6*THCN(I,J)                                           07NOV00.905
>           IF(ISOIL.EQ.1)THEN                                                     07NOV00.906
> C---- CAPG REPRESENTS SOIL HEAT CAPACITY (J/K/M^3) WHEN DIFSL=5.E-7 (M^2/S)      07NOV00.907
> C     TO GIVE A CORRECT THERMAL INERTIA (=CAPG*DIFSL^0.5)                        07NOV00.908
>             CAPGN(I,J)=5.9114E7*THCN(I,J)                                        07NOV00.909
>           ENDIF                                                                  07NOV00.910
>   480   CONTINUE                                                                 07NOV00.911
1758d1790
<   510 CONTINUE                                                                   INITNEST.1720
1916a1949,1956
> C                                                                                07NOV00.912
> C-----INITIALIZE LOCATIONS FOR TIME SERIES OUTPUT                                07NOV00.913
> C                                                                                07NOV00.914
>       IF (IFTSOUT) THEN                                                          07NOV00.915
>          CALL ADDRX1C(IAXALL(1,NUMNES))                                          07NOV00.916
>          CALL INITTS(NUMNES,IL,JL)                                               07NOV00.917
>          CALL ADDRX1C(IAXALL(1,1))                                               07NOV00.918
>       ENDIF                                                                      07NOV00.919
===================================================================
domain/nest/stotndi.F
diff -r3.0 -r3.2
23a24,25
> #     include <soilp.incl>                                                       07NOV00.920
> #     include <soilpn.incl>                                                      07NOV00.921
624a627,690
>                                                                                  07NOV00.922
>       IF(ISOIL.EQ.2.OR.ISOIL.EQ.3)THEN                                           07NOV00.923
>       DO L=1,MLX                                                                 07NOV00.924
> C                                                                                07NOV00.925
> C--- LSM SOIL FIELDS                                                             07NOV00.926
> C                                                                                07NOV00.927
>       DO 372 NF=1,9                                                              07NOV00.928
>         DO 372 I=IS2,IC2                                                         07NOV00.929
>           DO 372 J=JW2,JC2                                                       07NOV00.930
>             PSCA(J,I,NF)=STCA(I,J,L)                                             07NOV00.931
>             PSCA2(J,I,NF)=SMCA(I,J,L)                                            07NOV00.932
>   372     CONTINUE                                                               07NOV00.933
> C                                                                                07NOV00.934
> C--- AT JWEST                                                                    07NOV00.935
> C                                                                                07NOV00.936
>       CALL SINTY(PSCA,MJX,MIX,JWEST,ISOUTH,IENDC-1,1,1)                          07NOV00.937
>       CALL SINTY(PSCA2,MJX,MIX,JWEST,ISOUTH,IENDC-1,1,1)                         07NOV00.938
> C                                                                                07NOV00.939
> C--- AT JENDC-1                                                                  07NOV00.940
> C                                                                                07NOV00.941
>       CALL SINTY(PSCA,MJX,MIX,JENDC-1,ISOUTH,IENDC-1,2,1)                        07NOV00.942
>       CALL SINTY(PSCA2,MJX,MIX,JENDC-1,ISOUTH,IENDC-1,2,1)                       07NOV00.943
>       DO 374 NN=1,2                                                              07NOV00.944
>         DO 374 I=1,INLX                                                          07NOV00.945
>           II=(I-1)/3+ISOUTH                                                      07NOV00.946
>           JJ=MOD(I-1,3)*3+NN                                                     07NOV00.947
>           JJE=MOD(I-1,3)*3+(4-NN)                                                07NOV00.948
>           STCAN(I,NN,L)=PSCA(JWEST,II,JJ)                                        07NOV00.949
>           STCAN(I,JNL-NN,L)=PSCA(JENDC-1,II,JJE)                                 07NOV00.950
>           STCBN(I,NN,L)=STCAN(I,NN,L)                                            07NOV00.951
>           STCBN(I,JNL-NN,L)=STCAN(I,JNL-NN,L)                                    07NOV00.952
>           SMCAN(I,NN,L)=PSCA2(JWEST,II,JJ)                                       07NOV00.953
>           SMCAN(I,JNL-NN,L)=PSCA2(JENDC-1,II,JJE)                                07NOV00.954
>           SMCBN(I,NN,L)=SMCAN(I,NN,L)                                            07NOV00.955
>           SMCBN(I,JNL-NN,L)=SMCAN(I,JNL-NN,L)                                    07NOV00.956
>   374   CONTINUE                                                                 07NOV00.957
>                                                                                  07NOV00.958
>       DO 376 NF=1,9                                                              07NOV00.959
>         DO 376 I=IS2,IC2                                                         07NOV00.960
>           DO 376 J=JW2,JC2                                                       07NOV00.961
>             PSCA(J,I,NF)=STCA(I,J,L)                                             07NOV00.962
>             PSCA2(J,I,NF)=SMCA(I,J,L)                                            07NOV00.963
>   376     CONTINUE                                                               07NOV00.964
>                                                                                  07NOV00.965
>       CALL SINTX(PSCA,MJX,MIX,JWEST,JENDC-1,ISOUTH,1,1)                          07NOV00.966
>       CALL SINTX(PSCA,MJX,MIX,JWEST,JENDC-1,IENDC-1,2,1)                         07NOV00.967
>       CALL SINTX(PSCA2,MJX,MIX,JWEST,JENDC-1,ISOUTH,1,1)                         07NOV00.968
>       CALL SINTX(PSCA2,MJX,MIX,JWEST,JENDC-1,IENDC-1,2,1)                        07NOV00.969
>       DO 378 NN=1,2                                                              07NOV00.970
>         DO 378 J=1,JNLX                                                          07NOV00.971
>           JJ=(J-1)/3+JWEST                                                       07NOV00.972
>           II=MOD(J-1,3)+3*(NN-1)+1                                               07NOV00.973
>           IIN=MOD(J-1,3)+3*(2-NN)+4                                              07NOV00.974
>           STCAN(NN,J,L)=PSCA(JJ,ISOUTH,II)                                       07NOV00.975
>           STCAN(INL-NN,J,L)=PSCA(JJ,IENDC-1,IIN)                                 07NOV00.976
>           STCBN(NN,J,L)=STCAN(NN,J,L)                                            07NOV00.977
>           STCBN(INL-NN,J,L)=STCAN(INL-NN,J,L)                                    07NOV00.978
>           SMCAN(NN,J,L)=PSCA2(JJ,ISOUTH,II)                                      07NOV00.979
>           SMCAN(INL-NN,J,L)=PSCA2(JJ,IENDC-1,IIN)                                07NOV00.980
>           SMCBN(NN,J,L)=SMCAN(NN,J,L)                                            07NOV00.981
>           SMCBN(INL-NN,J,L)=SMCAN(INL-NN,J,L)                                    07NOV00.982
>   378   CONTINUE                                                                 07NOV00.983
>       ENDDO                                                                      07NOV00.984
>       ENDIF                                                                      07NOV00.985
627d692
<                                                                                  STOTNDI.627
===================================================================
domain/nest/stotndt.F
diff -r3.2 -r3.5
323c323,324
<                   QNCWBTN(I,K,NN)=(PSCA4(JWEST,II,JJ)-QNCWBN(I,K,NN))* RDT       25JAN00.244
---
>                   QNCWBTN(I,K,NN)=(PSCA4(JWEST,II,JJ)-QNCWBN(I,K,NN))            07NOV00.986
>      +                            * RDT                                          07NOV00.987
372c373
<                   QGSBTN(J,K,NN)=(PSCA3(JJ,ISOUTH,II)-QGSBN(J,K,NN))* RDT        25JAN00.251
---
>                   QGSBTN(J,K,NN)=(PSCA3(JJ,ISOUTH,II)-QGSBN(J,K,NN))*RDT         07NOV00.988
===================================================================
domain/util/Makefile
diff -r3.1 -r3.2
16a17
> 	fillcrs.o \
30a32
> 	fillcrs.i \
44a47
> 	fillcrs.f \
===================================================================
domain/util/equate.F
diff -r3.2 -r3.4
30a31,33
>       IMPLICIT NONE                                                              07NOV00.989
>       INTEGER IXI,JXI,KXI,IXO,JXO,KXO                                            07NOV00.990
>       REAL    FIN(IXI,JXI,KXI),FOUT(IXO,JXO,KXO)                                 07NOV00.991
===================================================================
dynamics/nonhydro/Makefile
diff -r3.0 -r3.2
55a56,57
> solve.o: ../../include/comicl.incl
> solve.o: ../../include/soil.incl
===================================================================
dynamics/nonhydro/solve.F
diff -r3.15 -r3.31
28a29
> #include <soil.incl>                                                             07NOV00.992
94a96
> C      DATA      AEARTH /6370.997E3/                                             07NOV00.993
98a101
>       INTEGER   IST,IEN,JST,JEN                                                  07NOV00.994
110a114,119
>       INTEGER   ICUT                                                             07NOV00.995
>       REAL      INTERIOR_MASK(MIX,MJX)                                           07NOV00.996
>                                                                                  07NOV00.997
> #ifdef VECTOR                                                                    07NOV00.998
> #  include <vector_solve_temps.incl>                                             07NOV00.999
> #endif                                                                           07NOV00.1000
658c667
<       IF(ISOIL.EQ.2)THEN                                                         SOLVE.619
---
>       IF(ISOIL.GE.2 .OR. IMOIAV(INEST).GE.1)THEN                                 07NOV00.1001
696c705
< #ifdef ICUPA3                                                                    SOLVE.657
---
> #ifdef ICUPA3                                                                    07NOV00.1002
700a710
> #ifndef VECTOR                                                                   07NOV00.1003
718,719c728,731
<           CALL CUPARA3(T3D,QV3D,PSB,T3DTEN,QV3DTEN,RAINC,CLDFRA,HT,U3D,          SOLVE.690
<      +         V3D,PP3D,INEST,J,IBNES,IENES-1)                                   SOLVE.691
---
>           CALL CUPARA3(T3D,QV3D,PSB,T3DTEN,QV3DTEN,RAINC,CLDFRA,HT,              07NOV00.1004
>      +         U3D,V3D,PP3D,                                                     07NOV00.1005
>      +         RPSB,DT,DX,R,CP,G,TO,XLV,RV,A,PTOP,                               07NOV00.1006
>      +         INEST,J,IBNES,IENES-1)                                            07NOV00.1007
725a738,740
> #else                                                                            07NOV00.1008
> #  include <call_vector_cupara3.incl>                                            07NOV00.1009
> #endif                                                                           07NOV00.1010
887,890c902,905
<             CALL LWRAD(J,RTTEN,PSA,GLW,XLAT,XLONG,TGA,EMISS,T3D,QV3D,            SOLVE.859
<      +           QC3D,QR3D,QI3D,QNI3D,PP3D,INEST)                                SOLVE.860
<             CALL SWRAD(J,RTTEN,PSA,GSW,XLAT,XLONG,ALB,T3D,QV3D,QC3D,QR3D         SOLVE.861
<      +           ,QI3D,QNI3D,QG3D,PP3D,INEST)                                    SOLVE.862
---
>             CALL LWRAD(J,RTTEN,PSA,GLW,OLW,XLAT,XLONG,TGA,EMISS,T3D,             07NOV00.1011
>      +           QV3D,QC3D,QR3D,QI3D,QNI3D,PP3D,INEST)                           07NOV00.1012
>             CALL SWRAD(J,RTTEN,PSA,GSW,OSW,XLAT,XLONG,ALB,T3D,                   07NOV00.1013
>      +           QV3D,QC3D,QR3D,QI3D,QNI3D,QG3D,PP3D,INEST)                      07NOV00.1014
927,928c942,943
<             CALL COLMOD(J,KTAU,IUTRAD,NRADISP,CLDFRA,FRLA,FRSA,T3D,QV3D,         SOLVE.899
<      +           PP3D)                                                           25JAN00.285
---
>             CALL COLMOD(J,KTAU,IUTRAD,NRADISP,CLDFRA,FRLA,FRSA,OLW,OSW,          07NOV00.1015
>      +           T3D,QV3D,PP3D)                                                  07NOV00.1016
959c974
< cmic$2 private(j)                                                                25JAN00.296
---
> cmic$2 private(j,cldfra)                                                         07NOV00.1017
961c976
< c$& local(j)                                                                     25JAN00.298
---
> c$& local(j,cldfra)                                                              07NOV00.1018
963c978
< c$omp&private(j)                                                                 25JAN00.300
---
> c$omp&private(j,cldfra)                                                          07NOV00.1019
973,976c988,991
<             CALL RRTM(J,ILX,CLDFRA,INEST,GLW,RTTEN,T3D,QV3D,QC3D,QR3D            25JAN00.310
<      +           ,QI3D,QNI3D,QG3D,PP3D,PSA,TGA,EMISS)                            25JAN00.311
<             CALL SWRAD(J,RTTEN,PSA,GSW,XLAT,XLONG,ALB,T3D,QV3D,QC3D,QR3D         25JAN00.312
<      +           ,QI3D,QNI3D,QG3D,PP3D,INEST)                                    25JAN00.313
---
>             CALL RRTM(J,ILX,CLDFRA,INEST,GLW,OLW,RTTEN,T3D,QV3D,QC3D             07NOV00.1020
>      +           ,QR3D,QI3D,QNI3D,QG3D,PP3D,PSA,TGA,EMISS)                       07NOV00.1021
>             CALL SWRAD(J,RTTEN,PSA,GSW,OSW,XLAT,XLONG,ALB,T3D,QV3D,QC3D          07NOV00.1022
>      +           ,QR3D,QI3D,QNI3D,QG3D,PP3D,INEST)                               07NOV00.1023
1085c1100
< #ifdef IBLT5                                                                     SOLVE.1014
---
> #ifdef IBLT5                                                                     07NOV00.1024
1089a1105,1117
>         ICUT = 0                                                                 07NOV00.1025
>         IF ( INEST .GT. 1 ) ICUT = 1                                             07NOV00.1026
>         DO J = 1,JLX                                                             07NOV00.1027
>           DO I = 1,ILX                                                           07NOV00.1028
>             IF ( I .GE. (2+ICUT) .AND. I .LE. (ILX-1-ICUT) .AND.                 07NOV00.1029
>      +           J .GE. (2+ICUT) .AND. J .LE. (JLX-1-ICUT)) THEN                 07NOV00.1030
>               INTERIOR_MASK(I,J) = 1.                                            07NOV00.1031
>             ELSE                                                                 07NOV00.1032
>               INTERIOR_MASK(I,J) = 0.                                            07NOV00.1033
>             ENDIF                                                                07NOV00.1034
>           ENDDO                                                                  07NOV00.1035
>         ENDDO                                                                    07NOV00.1036
> #ifndef VECTOR                                                                   07NOV00.1037
1098c1126
<         DO J=1,JLX                                                               SOLVE.1027
---
>         DO J=1,JLX                                                               07NOV00.1038
1101c1129,1140
<      +         QNC3D,UCD,VCD,QC3DTEN,T3DTEN,QV3DTEN,QI3DTEN,QNC3DTEN)            SOLVE.1030
---
>      +         QNC3D,UCD,VCD,QC3DTEN,T3DTEN,QV3DTEN,QI3DTEN,QNC3DTEN,            07NOV00.1039
>      +         TGA,TGB,PSB,RPSB,XLV,                                             07NOV00.1040
>      +         TA2,QA2,UA10,VA10,                                                07NOV00.1041
>      +         SVP1,SVP2,SVP3,SVPT0,EP1,EP2,ZNT,XLAND,UST,                       07NOV00.1042
>      +         MAVAIL,                                                           07NOV00.1043
>      +         REGIME,HOL,PBL,ZOL,MOL,QFX,HFX,RV,TSLA,TSLB,T0,PPB,               07NOV00.1044
>      +         EMISS,GLW,GSW,TMN,CAPG,SNOWC,XLAT,XLONG,                          07NOV00.1045
>      +         RAINP,RAINC,RAINNC,                                               07NOV00.1046
>      +         PRW,ALB,SHC,THC,SATBRT,                                           07NOV00.1047
>      +         XMOIST,                                                           07NOV00.1048
>      +         INTERIOR_MASK,                                                    07NOV00.1049
>      +         1,ILX)                                                            07NOV00.1050
1102a1142,1144
> #else                                                                            07NOV00.1051
> #  include <call_vector_mrfpbl.incl>                                             07NOV00.1052
> #endif                                                                           07NOV00.1053
1154a1197
>         DTTKE=DT/2.0                                                             07NOV00.1054
1161d1203
<             DTTKE=DT/2.0                                                         SOLVE.1086
1228a1271,1289
> C                                                                                07NOV00.1055
> C... PX mods start                                                               07NOV00.1056
> C                                                                                07NOV00.1057
> #ifdef IBLT7                                                                     07NOV00.1058
> C                                                                                07NOV00.1059
> C --- IBLTYP=7: PX PBL                                                           07NOV00.1060
> C                                                                                07NOV00.1061
>       IF(IBLTYP(INEST).EQ.7)THEN                                                 07NOV00.1062
> C Note: no parallel code yet                                                     07NOV00.1063
> C                                                                                07NOV00.1064
>         DO J=1,JLX                                                               07NOV00.1065
>           PARJSUM(ITQEVA_SUM,J)=0.0                                              07NOV00.1066
>           CALL PXPBL(IYY,JXX,J,INEST,U3D,V3D,T3D,QV3D,PP3D,QC3D,QI3D,            07NOV00.1067
>      +         QNC3D,UCD,VCD,T3DTEN,QC3DTEN,QV3DTEN,QI3DTEN,QNC3DTEN)            07NOV00.1068
>         ENDDO                                                                    07NOV00.1069
>       ENDIF                                                                      07NOV00.1070
> #endif                                                                           07NOV00.1071
> C...PX mods end                                                                  07NOV00.1072
> C                                                                                07NOV00.1073
1230c1291
<       IF(IBLTYP(INEST).GE.2)THEN                                                 SOLVE.1152
---
>       IF(IBLTYP(INEST).GE.1)THEN                                                 07NOV00.1074
1580c1641
< cmic$1        tb,qcb,qrb,psa,                                                    SOLVE.1514
---
> cmic$1        tb,qcb,qrb,psa,rainnc,                                             07NOV00.1075
1611a1673
> # ifndef VECTOR                                                                  07NOV00.1076
1622c1684
< #ifdef MPP1                                                                      SOLVE.1556
---
> #  ifdef MPP1                                                                    07NOV00.1077
1624,1625c1686,1687
< #endif                                                                           SOLVE.1558
< #ifdef MPHYSTBL1                                                                 SOLVE.1559
---
> #  endif                                                                         07NOV00.1078
> #  ifdef MPHYSTBL1                                                               07NOV00.1079
1629c1691,1692
< #else                                                                            SOLVE.1563
---
> #  else                                                                          07NOV00.1080
> C NOTE EXTRA RPSB ARGUMENT                                                       07NOV00.1081
1631,1633c1694,1697
<      +           ,T3D,QV3D,QC3D,QR3D,QI3D,QNI3D,PP3D,PSB,RAINNC,INEST,J,         SOLVE.1565
<      +           IBNES,IENES-1)                                                  SOLVE.1566
< #endif                                                                           SOLVE.1567
---
>      +           ,T3D,QV3D,QC3D,QR3D,QI3D,QNI3D,PP3D,PSB,RPSB,RAINNC             07NOV00.1082
>      +           ,INEST,J                                                        07NOV00.1083
>      +           ,IBNES,IENES-1)                                                 07NOV00.1084
> #  endif                                                                         07NOV00.1085
1634a1699,1701
> # else                                                                           07NOV00.1086
> #    include <call_vector_exmoisr.incl>                                          07NOV00.1087
> # endif                                                                          07NOV00.1088
1716c1783
<       IF(ISOIL.EQ.2)THEN                                                         SOLVE.1650
---
>       IF(ISOIL.GE.2 .OR. IMOIAV(INEST).GE.1)THEN                                 07NOV00.1089
1957a2025,2029
> #ifndef MPP1                                                                     07NOV00.1090
>          PRINT *, NINT(XTIME*60.), INEST                                         07NOV00.1091
> #else                                                                            07NOV00.1092
> #include <mpp_solve_50.incl>                                                     07NOV00.1093
> #endif                                                                           07NOV00.1094
2005a2078,2081
> C                                                                                07NOV00.1095
> C --- OUTPUT TIME SERIES                                                         07NOV00.1096
> C                                                                                07NOV00.1097
>       IF (IFTSOUT) CALL OUTTS(INEST,IL,JL,XTIME)                                 07NOV00.1098
===================================================================
dynamics/nonhydro/sound.F
diff -r3.0 -r3.4
93d92
<       INTEGER   ITIME                                                            SOUND.93
122d120
<       ITIME=NINT(KTAU*DTL)                                                       SOUND.122
241d238
<         ITIME=NINT(IT*DTS+ITL*DTL/2.)                                            SOUND.241
513c510
<           PRINT *,' CALCULATING MEANS FOR UP. RAD. B.C.'                         SOUND.513
---
> C         PRINT *,' CALCULATING MEANS FOR UP. RAD. B.C.'                         07NOV00.1099
531,532c528,529
<           PRINT *, 'INEST ABAR RHON XMSFBAR NPTS ',                              SOUND.531
<      +              INEST,ABAR,RHON,XMSFBAR,NPTS                                 SOUND.532
---
> C         PRINT *, 'INEST ABAR RHON XMSFBAR NPTS ',                              07NOV00.1100
> C    +              INEST,ABAR,RHON,XMSFBAR,NPTS                                 07NOV00.1101
558,560c555,557
<           PRINT2002,ABAR,RHON                                                    SOUND.558
<           DO 9 J=0,6                                                             SOUND.559
<             PRINT2001,(DX*XMSFBAR*TMASK(I,J),I=0,6)                              SOUND.560
---
> C         PRINT2002,ABAR,RHON                                                    07NOV00.1102
> C         DO 9 J=0,6                                                             07NOV00.1103
> C           PRINT2001,(DX*XMSFBAR*TMASK(I,J),I=0,6)                              07NOV00.1104
563c560
<     9     CONTINUE                                                               SOUND.563
---
> C   9     CONTINUE                                                               07NOV00.1105
829,835c826,828
< #ifndef MPP1                                                                     SOUND.829
<         IF(IT.EQ.ISTEP)THEN                                                      SOUND.830
<           PRINT*,ITIME,INEST                                                     SOUND.831
<         ENDIF                                                                    SOUND.832
< #else                                                                            SOUND.833
< #  include <mpp_sound_80.incl>                                                   SOUND.834
< #endif                                                                           SOUND.835
---
> #ifdef MPP1                                                                      07NOV00.1106
> #  include <mpp_sound_80.incl>                                                   07NOV00.1107
> #endif                                                                           07NOV00.1108
===================================================================
fdda/grid/blw.F
diff -r3.0 -r3.2
1,2c1
<       SUBROUTINE BLW(IL,JL,WTTOP,BLWXY,BLDUM2D,RINBLW,DX,TIMANLS,                BLW.1
<      1CDATES,IN)                                                                 BLW.2
---
>       SUBROUTINE BLW(IL,JL,WTTOP,BLWXY,BLDUM2D,RINBLW,DX,TIMANLS,IN)             07NOV00.1109
20d18
<       CHARACTER*19 CDATES                                                        BLW.20
24d21
< C     PRINT 5,RINBLW,RINDX,M,B,TIMANLS,CDATES                                    BLW.24
===================================================================
fdda/grid/bufvdgd.F
diff -r3.0 -r3.2
20c20
< C_FLIC_RUNPAD(4)                                                                 BUFVDGD.20
---
> C_FLIC_RUNPAD(8)                                                                 07NOV00.1110
===================================================================
fdda/grid/in4dgd.F
diff -r3.13 -r3.16
88c88
< #if defined(CRAY)||defined(rs6000)||defined(SGI_Origin)||defined(linux)          25JAN00.340
---
> #if defined(CRAY)||defined(rs6000)||defined(SGI_Origin)||defined(linux)
730,731c730
<           CALL BLW(IL,JL,WXYTOP,DUM2D,BLDUM2D,RINBLW,DX,TIMANLS,CDATES,          IN4DGD.666
<      +         IN)                                                               IN4DGD.667
---
>           CALL BLW(IL,JL,WXYTOP,DUM2D,BLDUM2D,RINBLW,DX,TIMANLS,IN)              07NOV00.1112
===================================================================
fdda/grid/setupgd.F
diff -r3.0 -r3.2
25c25
< C_FLIC_RUNPAD(4)                                                                 SETUPGD.25
---
> C_FLIC_RUNPAD(8)                                                                 07NOV00.1113
===================================================================
fdda/util/setfd.F
diff -r3.0 -r3.2
21c21
< C_FLIC_RUNPAD(4)                                                                 SETFD.21
---
> C_FLIC_RUNPAD(8)                                                                 07NOV00.1114
===================================================================
include/btblk1.incl
diff -r3.2 -r3.3
30d29
< CDIR$ TASKCOMMON BT1                                                             BTBLK1.30
===================================================================
include/btblk2.incl
diff -r3.2 -r3.3
7d6
< CDIR$ TASKCOMMON BLK1,BLK2                                                       BTBLK2.7
===================================================================
include/fog1d.incl
diff -r3.0 -r3.1
9d8
< CDIR$ TASKCOMMON FOG1D                                                           FOG1D.9
===================================================================
include/param2.incl
diff -r3.2 -r3.7
5c5
<      2 BDYFRQ,BUFFRQ                                                             PARAM2.5
---
>      2 BDYFRQ,BUFFRQ,TBDYLBE,BDYLTIM,BDYLFRQ,TSLAT,TSLON,SOILFAC                 07NOV00.1115
11a12
>      6 ,ITSN,JTSN,ISSTVAR                                                        07NOV00.1116
21c22,23
<      3  LFBTER,BDYFRQ,BUFFRQ,IFOGSW                                              24SEP99.404
---
>      3  LFBTER,BDYFRQ,BUFFRQ,IFOGSW,TBDYLBE,BDYLTIM,BDYLFRQ,SOILFAC,             07NOV00.1117
>      4  ISSTVAR                                                                  07NOV00.1118
32a35,39
> C                                                                                07NOV00.1119
>       COMMON/TSLOCS/ IFTSOUT,TSLAT,TSLON,ITSN,JTSN                               07NOV00.1120
>       LOGICAL   IFTSOUT                                                          07NOV00.1121
>       DIMENSION TSLAT(ITSDIM),TSLON(ITSDIM)                                      07NOV00.1122
>       DIMENSION ITSN(MAXNES,ITSDIM),JTSN(MAXNES,ITSDIM)                          07NOV00.1123
===================================================================
include/param3.incl
diff -r3.0 -r3.2
22a23
> #ifndef VECTOR                                                                   07NOV00.1124
23a25,29
> #else                                                                            07NOV00.1125
> C_FLIC_BEGIN_NOFLIC                                                              07NOV00.1126
>       DIMENSION ICON(MJX),ICONS(MJX)                                             07NOV00.1127
> C_FLIC_END_NOFLIC                                                                07NOV00.1128
> #endif                                                                           07NOV00.1129
===================================================================
include/parame
diff -r3.4 -r3.9
79c79
<       PARAMETER (NVARX=8,NVARMX=4,NVARSX=40,NVARI=13,                            PARAME.74
---
>       PARAMETER (NVARX=8,NVARMX=4,NVARSX=46,NVARI=13,                            07NOV00.2490
115c115
<      1     20*MIXL*MJXL+4*MIXL*MJXL*MLX+                                         PARAME.110
---
>      1     32*MIXL*MJXL+4*MIXL*MJXL*MLX+                                         07NOV00.2491
143d142
< C--- 11 FOR THE HYDROSTATIC SPLIT-EXPLICIT SCHEME,                               PARAME.139
154c153
< C--- 24 FOR LAND-SURFACE,                                                        PARAME.150
---
> C--- 36 FOR LAND-SURFACE,                                                        07NOV00.2492
168c167
<      1     +NVARI+NVARP+27+11+46+24+9+20+2+14+1+1                                PARAME.164
---
>      1     +NVARI+NVARP+27+11+46+36+9+20+2+14+1+1                                07NOV00.2493
176a176,178
> C                                                                                07NOV00.2494
>       INTEGER ITSDIM                                                             07NOV00.2495
>       PARAMETER (ITSDIM=30)                                                      07NOV00.2496
===================================================================
include/pmoist.incl
diff -r3.0 -r3.4
18a19
> #ifndef NOKUO                                                                    07NOV00.1130
19a21,22
> #endif                                                                           07NOV00.1131
> #ifndef VECTOR                                                                   07NOV00.1132
20a24,28
> #else                                                                            07NOV00.1133
> C_FLIC_BEGIN_NOFLIC                                                              07NOV00.1134
>       DIMENSION QWGHT(MJX,MKX)                                                   07NOV00.1135
> C_FLIC_END_NOFLIC                                                                07NOV00.1136
> #endif                                                                           07NOV00.1137
===================================================================
include/point2d.incl
diff -r3.2 -r3.5
18c18
<      1 SATBRT,SINROT,SNOWC,TGA,TGB,TSS,UST                                       24SEP99.405
---
>      1 SATBRT,SINROT,SNOWC,TGA,TGB,TSS,UST,OLW,OSW                               07NOV00.1138
25a26
>      6        (IAOS,   OSW(MIX,MJX)), (IAOL,   OLW(MIX,MJX)),                    07NOV00.1139
28a30,32
>       REAL TA2,QA2,UA10,VA10                                                     07NOV00.1140
>       POINTER (IATA2,  TA2(MIX,MJX)), (IAQA2,  QA2(MIX,MJX)),                    07NOV00.1141
>      1        (IAUA10,UA10(MIX,MJX)), (IAVA10,VA10(MIX,MJX))                     07NOV00.1142
33c37,38
<      4              IAGS, IAGL, IACG, IASC, IAEF, IACR, IASR, IATSS              24SEP99.407
---
>      4              IAGS, IAGL, IAOS, IAOL, IACG, IASC, IAEF, IACR,              07NOV00.1143
>      5              IASR, IATSS,IATA2,IAQA2,IAUA10,IAVA10                        07NOV00.1144
===================================================================
include/point2dn.incl
diff -r3.2 -r3.5
18c18
<      1 RAINPN,REGIMN,SATBRN,SINRTN,SNOWCN,TGAN,TGBN,TSSN,USTN                    24SEP99.408
---
>      1 RAINPN,REGIMN,SATBRN,SINRTN,SNOWCN,TGAN,TGBN,TSSN,USTN,OLWN,OSWN          07NOV00.1145
25a26
>      6        (INAOS,   OSWN(MIX,MJX)),(INAOL,  OLWN(MIX,MJX)),                  07NOV00.1146
28a30,32
>       REAL TA2N,QA2N,UA10N,VA10N                                                 07NOV00.1147
>       POINTER (INATA2, TA2N(MIX,MJX)),(INAQA2,  QA2N(MIX,MJX)),                  07NOV00.1148
>      1        (INAUA10,UA10N(MIX,MJX)),(INAVA10,VA10N(MIX,MJX))                  07NOV00.1149
34c38,39
<      4           INAGS,INAGL,INACG,INASC,INAEF,INACR,INASR,INATSS                24SEP99.410
---
>      4           INAGS,INAGL,INAOS,INAOL,INACG,INASC,INAEF,INACR,                07NOV00.1150
>      5           INASR,INATSS,INATA2,INAQA2,INAUA10,INAVA10                      07NOV00.1151
===================================================================
include/soilp.incl
diff -r3.0 -r3.2
5a6,8
> C-- ADDITIONAL ARRAYS FOR PXPBL                                                  07NOV00.1152
>       REAL LAI,ALBEDO,RADNET,THZ1OB,RHOBS,RA,RS,RSTMIN                           07NOV00.1153
>       REAL XLAI,XVEG,XLAIMN,XVEGMN                                               07NOV00.1154
14,15c17,24
<      & (IACMA,CMCA(MIXL,MJXL)),(IASNA,SNOA(MIXL,MJXL)),                          SOILP.14
<      & (IACMB,CMCB(MIXL,MJXL)),(IASNB,SNOB(MIXL,MJXL)),                          SOILP.15
---
>      & (IALAI,   LAI(MIXL,MJXL)),(IAALB,ALBEDO(MIXL,MJXL)),                      07NOV00.1155
>      & (IARAD,RADNET(MIXL,MJXL)),(IATHZ,THZ1OB(MIXL,MJXL)),                      07NOV00.1156
>      & (IARHO, RHOBS(MIXL,MJXL)),(IARA,RA(MIXL,MJXL)),                           07NOV00.1157
>      & (IARS,     RS(MIXL,MJXL)),(IARST,RSTMIN(MIXL,MJXL)),                      07NOV00.1158
>      & (IAXLA,  XLAI(MIXL,MJXL)),(IAXVG,  XVEG(MIXL,MJXL)),                      07NOV00.1159
>      & (IAXLM,XLAIMN(MIXL,MJXL)),(IAXVM,XVEGMN(MIXL,MJXL)),                      07NOV00.1160
>      & (IACMA,CMCA(MIXL,MJXL)),(IASNA,SNOA(MIXL,MJXL)),                          07NOV00.1161
>      & (IACMB,CMCB(MIXL,MJXL)),(IASNB,SNOB(MIXL,MJXL)),                          07NOV00.1162
20,21c29,31
<      &     IASRO,IABRO,IAASM,IAACE,IAACS,IASFE,IASNP,IAXIC,IACMA,IASNA,          SOILP.20
<      &     IACMB,IASNB,IAVGT,IASLT,IASMA,IASTA,IASMB,IASTB                       SOILP.21
---
>      &     IASRO,IABRO,IAASM,IAACE,IAACS,IASFE,IASNP,IAXIC,IALAI,IAALB,          07NOV00.1163
>      &     IARAD,IATHZ,IARHO,IARA,IARS,IARST,IAXLA,IAXVG,IAXLM,IAXVM,            07NOV00.1164
>      &     IACMA,IASNA,IACMB,IASNB,IAVGT,IASLT,IASMA,IASTA,IASMB,IASTB           07NOV00.1165
===================================================================
include/soilpn.incl
diff -r3.0 -r3.2
5a6,8
> C-- ADDITIONAL ARRAYS FOR PXPBL                                                  07NOV00.1166
>       REAL LAIN,ALBEDON,RADNETN,THZ1OBN,RHOBSN,RAN,RSN,RSTMINN                   07NOV00.1167
>       REAL XLAIN,XVEGN,XLAIMNN,XVEGMNN                                           07NOV00.1168
13a17,22
>      & (INLAI,   LAIN(MIXL,MJXL)),(INALB,ALBEDON(MIXL,MJXL)),                    07NOV00.1169
>      & (INRAD,RADNETN(MIXL,MJXL)),(INTHZ,THZ1OBN(MIXL,MJXL)),                    07NOV00.1170
>      & (INRHO, RHOBSN(MIXL,MJXL)),(INRA,RAN(MIXL,MJXL)),                         07NOV00.1171
>      & (INRS,     RSN(MIXL,MJXL)),(INRST,RSTMINN(MIXL,MJXL)),                    07NOV00.1172
>      & (INXLA,  XLAIN(MIXL,MJXL)),(INXVG,  XVEGN(MIXL,MJXL)),                    07NOV00.1173
>      & (INXLM,XLAIMNN(MIXL,MJXL)),(INXVM,XVEGMNN(MIXL,MJXL)),                    07NOV00.1174
20,21c29,31
<      &     INSRO,INBRO,INASM,INACE,INACS,INSFE,INSNP,INXIC,INCMA,INSNA,          SOILPN.20
<      &     INCMB,INSNB,INVGT,INSLT,INSMA,INSTA,INSMB,INSTB                       SOILPN.21
---
>      &     INSRO,INBRO,INASM,INACE,INACS,INSFE,INSNP,INXIC,INLAI,INALB,          07NOV00.1175
>      &     INRAD,INTHZ,INRHO,INRA,INRS,INRST,INXLA,INXVG,INXLM,INXVM,            07NOV00.1176
>      &     INCMA,INSNA,INCMB,INSNB,INVGT,INSLT,INSMA,INSTA,INSMB,INSTB           07NOV00.1177
===================================================================
include/surface.incl
diff -r3.0 -r3.1
21,23d20
< CDIR$ TASKCOMMON SURFACE1                                                        SURFACE.21
< CDIR$ TASKCOMMON SURFACE2                                                        SURFACE.22
< CDIR$ TASKCOMMON SURFACE3                                                        SURFACE.23
===================================================================
include/surfslab.incl
diff -r3.2 -r3.3
18d17
< CDIR$ TASKCOMMON COMSURFSLAB                                                     SURFSLAB.18
===================================================================
include/varia.incl
diff -r3.0 -r3.5
1,2c1,2
<       INTEGER KPBL2D,MITER0                                                      VARIA.1
<       COMMON/PBLDIM/MITER0,KPBL2D                                                VARIA.2
---
>       INTEGER KPBL2D                                                             07NOV00.1178
>       COMMON/PBLDIM/KPBL2D                                                       07NOV00.1179
4,5c4,5
<       REAL HSCR1,HSCR2,HSCR3,HSCR4,PT2TOT,PTEN,PTNTOT                            VARIA.4
<       INTEGER IPTN                                                               VARIA.5
---
> #ifndef VECTOR                                                                   07NOV00.1180
>       REAL HSCR1,HSCR2,HSCR3,HSCR4,PTEN                                          07NOV00.1181
7c7
<      1   PTNTOT,PT2TOT,IPTN,PTEN,HSCR1,HSCR2,HSCR3                               VARIA.7
---
>      1                      PTEN,HSCR1,HSCR2,HSCR3                               07NOV00.1182
9,10c9
<       REAL PHI                                                                   VARIA.9
<       DIMENSION PHI(MIX,MJX,MKX),                                                VARIA.10
---
>       DIMENSION                                                                  07NOV00.1183
14c13
<       DIMENSION PTNTOT(MJX),PT2TOT(MJX),IPTN(MJX)                                VARIA.14
---
> #endif                                                                           07NOV00.1184
===================================================================
memory/address/addall.F
diff -r3.2 -r3.5
469,470c469,470
< C       13 REAL 2D ARRAYS                                                        ADDALL.469
<         DO N=1,13                                                                ADDALL.470
---
> C       25 REAL 2D ARRAYS                                                        07NOV00.1185
>         DO N=1,25                                                                07NOV00.1186
474c474
<         NCOU=NCOU+13*MIXL*MJXL                                                   ADDALL.474
---
>         NCOU=NCOU+25*MIXL*MJXL                                                   07NOV00.1187
508a509
>         ISAVER = IAXALL(NCOUNT,K)                                                07NOV00.1188
===================================================================
memory/address/addrx1c.F
diff -r3.0 -r3.2
42c42
<      4         IDUDU6B(4),IDUDU16(14),IDUD16(24)                                 ADDRX1C.42
---
>      4         IDUDU6B(4),IDUDU16(14),IDUD16(36)                                 07NOV00.1189
154c154
<       DO 170 N=1,24                                                              ADDRX1C.154
---
>       DO 170 N=1,36                                                              07NOV00.1190
===================================================================
memory/address/addrx1n.F
diff -r3.0 -r3.2
53c53
<      4         IDUDU6B(4),IDUDU16(14),IDUD16(24)                                 ADDRX1N.53
---
>      4         IDUDU6B(4),IDUDU16(14),IDUD16(36)                                 07NOV00.1191
166c166
<       DO 170 N=1,24                                                              ADDRX1N.166
---
>       DO 170 N=1,36                                                              07NOV00.1192
===================================================================
physics/advection/simple/vadv.F
diff -r3.4 -r3.8
30a31,32
>       REAL      EPSI                                                             07NOV00.1193
>       PARAMETER (EPSI=1.E-15)                                                    07NOV00.1194
36c38
<       INTEGER   KZZ,IND,IN,EPSI                                                  25JAN00.462
---
>       INTEGER   KZZ,IND,IN                                                       07NOV00.1195
41,42c43,44
<       REAL      PA287(MIX,MJX,MKX)                                               VADV.41
<       REAL      PS287(MIX,MJX,MKX)                                               VADV.42
---
>       REAL      PA287                                                            07NOV00.1196
>       REAL      PS287                                                            07NOV00.1197
61c63
< c$& local(i,j,k,dotqdot)                                                         VADV.61
---
> c$& local(i,j,k,dotqdot,pa287,ps287)                                             07NOV00.1198
63c65
< c$omp&private(i,j,k,dotqdot)                                                     VADV.63
---
> c$omp&private(i,j,k,dotqdot,pa287,ps287)                                         07NOV00.1199
67,69c69,70
<             PA287(I,J,K)=1.0/(PSA(I,J)*A(K)+PTOP)**0.287                         VADV.67
<             PS287(I,J,K)=(PSA(I,J)*SIGMA(K)+PTOP)**0.287                         VADV.68
<             DOTQDOT(I,K)=FA(I,J,K)*PA287(I,J,K)                                  VADV.69
---
>             PA287=1.0/(PSA(I,J)*A(K)+PTOP)**0.287                                07NOV00.1200
>             DOTQDOT(I,K)=FA(I,J,K)*PA287                                         07NOV00.1201
74c75,76
<             F(I,J,K)=PS287(I,J,K)*(TWT(K,1)*DOTQDOT(I,K)+TWT(K,2)*               VADV.74
---
>             PS287=(PSA(I,J)*SIGMA(K)+PTOP)**0.287                                07NOV00.1202
>             F(I,J,K)=PS287*(TWT(K,1)*DOTQDOT(I,K)+TWT(K,2)*                      07NOV00.1203
96d97
<             EPSI=1.E-15                                                          25JAN00.463
===================================================================
physics/cumulus/bm/cupara7.F
diff -r3.0 -r3.2
2a3,4
>                                                                                  07NOV00.1204
>       IMPLICIT NONE                                                              07NOV00.1205
8,13c10,19
<       DIMENSION T3D(MIX,MJX,MKX), QV3D(MIX,MJX,MKX), PP3D(MIX,MJX,MKX)           CUPARA7.8
<       DIMENSION T3DTEN(MIX,MJX,MKX), QV3DTEN(MIX,MJX,MKX)                        CUPARA7.9
<       DIMENSION TBASE(MIXNH,MJXNH,MKXNH),CLDEFI(MIX,MJX)                         CUPARA7.10
<       DIMENSION RAINC(MIX,MJX),PSB(MIX,MJX)                                      CUPARA7.11
<       DIMENSION TMOD(MIX,MKX),QMOD(MIX,MKX)                                      CUPARA7.12
<       DIMENSION XLAND(MIX,MKX)                                                   CUPARA7.13
---
>       INTEGER J,INEST,IBEG,IEND                                                  07NOV00.1206
>       REAL T3D(MIX,MJX,MKX), QV3D(MIX,MJX,MKX), PP3D(MIX,MJX,MKX)                07NOV00.1207
>       REAL T3DTEN(MIX,MJX,MKX), QV3DTEN(MIX,MJX,MKX)                             07NOV00.1208
>       REAL TBASE(MIXNH,MJXNH,MKXNH),CLDEFI(MIX,MJX)                              07NOV00.1209
>       REAL RAINC(MIX,MJX),PSB(MIX,MJX)                                           07NOV00.1210
>       REAL TMOD(MIX,MKX),QMOD(MIX,MKX)                                           07NOV00.1211
>       REAL XLAND(MIX,MKX)                                                        07NOV00.1212
> C                                                                                07NOV00.1213
>       INTEGER I,K                                                                07NOV00.1214
>       INTEGER ICOND,ICONSS                                                       07NOV00.1215
===================================================================
physics/cumulus/fc/cupara5.F
diff -r3.2 -r3.4
2c2
<      &                    QG3DTEN,QI3DTEN,RAINC,SCR1,U3D,V3D,T3D,QV3D,           CUPARA5.2
---
>      &                    QS3DTEN,QI3DTEN,RAINC,SCR1,U3D,V3D,T3D,QV3D,           07NOV00.1216
3a4,5
>                                                                                  07NOV00.1217
>       IMPLICIT NONE                                                              07NOV00.1218
12,18c14,24
<       DIMENSION RAINC(MIX,MJX), PSB(MIX,MJX), SCR1(MIX,MKX)                      CUPARA5.12
<       DIMENSION     T3DTEN(MIX,MJX,MKX),  QV3DTEN(MIX,MJX,MKX),                  CUPARA5.13
<      &          QR3DTEN(MIXM,MJXM,MKXM),  QC3DTEN(MIXM,MJXM,MKXM),               CUPARA5.14
<      &          QS3DTEN(MIXM,MJXM,MKXM),  QI3DTEN(MIXM,MJXM,MKXM)                CUPARA5.15
<       DIMENSION     T3D(MIX,MJX,MKX),        QV3D(MIX,MJX,MKX),                  CUPARA5.16
<      &              U3D(MIX,MJX,MKX),         V3D(MIX,MJX,MKX),                  CUPARA5.17
<      &             PP3D(MIX,MJX,MKX)                                             CUPARA5.18
---
>       INTEGER J,INEST,IMPHYS,IBEG,IEND                                           07NOV00.1219
>       REAL RAINC(MIX,MJX), PSB(MIX,MJX), SCR1(MIX,MKX)                           07NOV00.1220
>       REAL T3DTEN(MIX,MJX,MKX), QV3DTEN(MIX,MJX,MKX)                             07NOV00.1221
>       REAL QR3DTEN(MIXM,MJXM,MKXM), QC3DTEN(MIXM,MJXM,MKXM)                      07NOV00.1222
>       REAL QS3DTEN(MIXM,MJXM,MKXM), QI3DTEN(MIXM,MJXM,MKXM)                      07NOV00.1223
>       REAL T3D(MIX,MJX,MKX), QV3D(MIX,MJX,MKX)                                   07NOV00.1224
>       REAL U3D(MIX,MJX,MKX), V3D(MIX,MJX,MKX)                                    07NOV00.1225
>       REAL PP3D(MIX,MJX,MKX)                                                     07NOV00.1226
> C                                                                                07NOV00.1227
>       INTEGER I,K                                                                07NOV00.1228
>       INTEGER ICLDCK                                                             07NOV00.1229
===================================================================
physics/cumulus/grell/Makefile
diff -r3.0 -r3.1
48,49c48,49
< cup.o: ../../../include/parame.incl ../../../include/param3.incl
< cup.o: ../../../include/parccm2.incl ../../../include/pmoist.incl
---
> cup.o: ../../../include/parame.incl 
> cup.o: ../../../include/parccm2.incl
50a51
> cup.o: ../../../include/defines.incl
52,54c53,55
< cupara3.o: ../../../include/parccm2.incl ../../../include/param3.incl
< cupara3.o: ../../../include/pmoist.incl ../../../include/various.incl
< cupara3.o: ../../../include/nonhyd.incl ../../../include/rpstar.incl
---
> cupara3.o: ../../../include/parccm2.incl
> cupara3.o: ../../../include/defines.incl
> cupara3.o: ../../../include/nonhyd.incl
===================================================================
physics/cumulus/grell/cup.F
diff -r3.3 -r3.6
1,3c1,5
<         SUBROUTINE CUP(T,Q,Z1,TN,QO,PO,PRE,P,OUTTEM,OUTQ,                        CUP.1
<      &             DTIME,PSUR,US,VS,ISTART,IEND,KDET,DX,IFRAD,CLDFRA)            CUP.2
<                                                                                  CUP.3
---
> #include <defines.incl>                                                          07NOV00.1230
>         SUBROUTINE CUP(T,Q,Z1,TN,QO,PO,PRE,P,OUTTEM,OUTQ,                        07NOV00.1231
>      &             DTIME,PSUR,US,VS,IST,IEN,KDET,DX,IFRAD,CLDFRA,                07NOV00.1232
>      &             R,CP,G,TO,XLV,RV,A,PTOP)                                      07NOV00.1233
>       IMPLICIT NONE                                                              07NOV00.1234
5d6
< #     include <param3.incl>                                                      CUP.5
7d7
< #     include <pmoist.incl>                                                      CUP.7
8a9,10
>       REAL R,CP,G,TO,XLV,RV,A(MKX),PTOP                                          07NOV00.1235
>                                                                                  07NOV00.1236
21c23
<       DIMENSION AE(2),BE(2),HT(2)                                                CUP.21
---
>       REAL      AE(2),BE(2),HT(2)                                                07NOV00.1237
25c27
<       DIMENSION P(MIX,MKX),T(MIX,MKX),Q(MIX,MKX),                                CUP.25
---
>       REAL      P(MIX,MKX),T(MIX,MKX),Q(MIX,MKX),                                07NOV00.1238
31c33
<       DIMENSION HE(MIX,MKX),HES(MIX,MKX),QES(MIX,MKX),                           CUP.31
---
>       REAL      HE(MIX,MKX),HES(MIX,MKX),QES(MIX,MKX),                           07NOV00.1239
37c39
<       DIMENSION HEO(MIX,MKX),HESO(MIX,MKX),QESO(MIX,MKX),                        CUP.37
---
>       REAL      HEO(MIX,MKX),HESO(MIX,MKX),QESO(MIX,MKX),                        07NOV00.1240
45c47
<       DIMENSION XHE(MIX,MKX),XHES(MIX,MKX),XQES(MIX,MKX),                        CUP.45
---
>       REAL      XHE(MIX,MKX),XHES(MIX,MKX),XQES(MIX,MKX),                        07NOV00.1241
50,51c52,53
<       DIMENSION DELLAH(MIX,MKX),DELLAQ(MIX,MKX),DELLAT(MIX,MKX)                  CUP.50
<       DIMENSION DKK(MIX,MKX)                                                     CUP.51
---
>       REAL      DELLAH(MIX,MKX),DELLAQ(MIX,MKX),DELLAT(MIX,MKX)                  07NOV00.1242
>       REAL      DKK(MIX,MKX)                                                     07NOV00.1243
59c61,72
<       DIMENSION OUTTEM(MIX,MKX),OUTQ(MIX,MKX)                                    CUP.59
---
>       REAL      OUTTEM(MIX,MKX),OUTQ(MIX,MKX)                                    07NOV00.1244
> C                                                                                07NOV00.1245
> C DECLARATIONS FOR IMPLICIT NONE                                                 07NOV00.1246
> C                                                                                07NOV00.1247
>       REAL      XL,RD,DTIME,C0,E,EO,TVBAR,TVBARO,DH,PBCDIF,DZ,DZ1                07NOV00.1248
>       REAL      GAMMA,GAMMA0,QRCH,DZO,DZ2,GAMMO,GAMMO0,QRCHO,DQ                  07NOV00.1249
>       REAL      DT,DP,DV1,DV2,DV3,DV1Q,DV2Q,DV3Q,DETDO,DETDOQ,AUP                07NOV00.1250
>       REAL      ADW,GAMMA1,GAMMA2,DHH,DG,XDDD,OUTTES,DXTEMC                      07NOV00.1251
>       REAL      DX,DSMALC,DLARGC,CLFRCV,AFRACL,AFRACS,AKCLTH                     07NOV00.1252
>       INTEGER   I,J,K,KK,IERR,IPH,IPHO,IST,IEN,KBDIF                             07NOV00.1253
>       INTEGER   IFRAD,KCLTH                                                      07NOV00.1254
> C                                                                                07NOV00.1255
85c98
<         DO 5 I=ISTART,IEND                                                       CUP.85
---
>         DO 5 I=IST,IEN                                                           07NOV00.1256
103c116
<       DO 7 I=ISTART,IEND                                                         CUP.103
---
>       DO 7 I=IST,IEN                                                             07NOV00.1257
136c149
<         DO 10 I=ISTART,IEND                                                      CUP.136
---
>         DO 10 I=IST,IEN                                                          07NOV00.1258
148c161
<         DO 20 I=ISTART,IEND                                                      CUP.148
---
>         DO 20 I=IST,IEN                                                          07NOV00.1259
178,179c191,192
<       CALL MAXIMI(HE,MIX,MKX,1,KBMAX,K22,ISTART,IEND)                            CUP.178
<       DO 36 I=ISTART,IEND                                                        CUP.179
---
>       CALL MAXIMI(HE,MIX,MJX,MKX,1,KBMAX,K22,IST,IEN)                            07NOV00.1260
>       DO 36 I=IST,IEN                                                            07NOV00.1261
199c212
<       DO 27 I=ISTART,IEND                                                        CUP.199
---
>       DO 27 I=IST,IEN                                                            07NOV00.1262
244c257
<       DO 37 I=ISTART,IEND                                                        CUP.244
---
>       DO 37 I=IST,IEN                                                            07NOV00.1263
250c263
<         DO 35 I=ISTART,IEND                                                      CUP.250
---
>         DO 35 I=IST,IEN                                                          07NOV00.1264
256c269
<       DO 42 I=ISTART,IEND                                                        CUP.256
---
>       DO 42 I=IST,IEN                                                            07NOV00.1265
278c291
<       CALL MINIMI(HE,MIX,MKX,KB,KTOP,JMIN,ISTART,IEND)                           CUP.278
---
>       CALL MINIMI(HE,MIX,MJX,MKX,KB,KTOP,JMIN,IST,IEN)                           07NOV00.1266
282,320c295,332
<       DO 55 K=2,MKX-1                                                            CUP.282
<         DO 55 I=ISTART,IEND                                                      CUP.283
<           IF(AA0(I).EQ.-1.)GOTO 55                                               CUP.284
<           IF(JMIN(I).LE.3)THEN                                                   CUP.285
<             AA0(I)=-1.                                                           CUP.286
<             GOTO 55                                                              CUP.287
<           ENDIF                                                                  CUP.288
<           IF(K.LE.KBCON(I))GOTO 55                                               CUP.289
<           IF(K.GE.KTOP(I))GOTO 55                                                CUP.290
<           DZ=-.5*Z(I,K-1)+.5*Z(I,K+1)                                            CUP.291
<           DZ1=Z(I,K)-Z(I,K-1)                                                    CUP.292
<           GAMMA=(XL/CP)*(XL/(RV*(T(I,K)**2)))*QES(I,K)                           CUP.293
<           GAMMA0=(XL/CP)*(XL/(RV*(T(I,K-1)**2)))*QES(I,K-1)                      CUP.294
<           QRCH=QES(I,K)+(1./XL)*(GAMMA/(1.+GAMMA))*DBY(I,K)                      CUP.295
< C         QC(I,K)=(QCK(I)-QRCH)/(1.+C0*DZ)+QRCH                                  CUP.296
< C         PW(I,K)=C0*DZ*(QC(I,K)-QRCH)                                           CUP.297
< C         QCK(I)=QC(I,K)                                                         CUP.298
<           QC(I,K)=QCK(I)                                                         CUP.299
<           PW(I,K)=QCK(I)-QRCH                                                    CUP.300
<           QCK(I)=QRCH                                                            CUP.301
<           PWAV(I)=PWAV(I)+PW(I,K)                                                CUP.302
<           DZ1=Z(I,K)-Z(I,K-1)                                                    CUP.303
<           AA0(I)=AA0(I)+DZ1*(9.81/(1004.*(.5*(T(I,K)+T(I,K-1)))))*               CUP.304
<      +           DBY(I,K-1)/(1.+.5*GAMMA+.5*GAMMA0)                              CUP.305
<           DZO=-.5*ZO(I,K-1)+.5*ZO(I,K+1)                                         CUP.306
<           DZ2=ZO(I,K)-ZO(I,K-1)                                                  CUP.307
<           GAMMO=(XL/CP)*(XL/(RV*(TN(I,K)**2)))*QESO(I,K)                         CUP.308
<           GAMMO0=(XL/CP)*(XL/(RV*(TN(I,K-1)**2)))*QESO(I,K-1)                    CUP.309
<           QRCHO=QESO(I,K)+(1./XL)*(GAMMO/(1.+GAMMO))*DBYO(I,K)                   CUP.310
< C         QCO(I,K)=(QCKO(I)-QRCHO)/(1.+C0*DZO)+QRCHO                             CUP.311
< C         PWO(I,K)=C0*DZO*(QCO(I,K)-QRCHO)                                       CUP.312
< C         QCKO(I)=QCO(I,K)                                                       CUP.313
<           QCO(I,K)=QCKO(I)                                                       CUP.314
<           PWO(I,K)=QCKO(I)-QRCHO                                                 CUP.315
<           QCKO(I)=QRCHO                                                          CUP.316
<           PWAVO(I)=PWAVO(I)+PWO(I,K)                                             CUP.317
<           AA1(I)=AA1(I)+DZ2*(9.81/(1004.*(.5*(TN(I,K)+TN(I,K-1)))))*             CUP.318
<      +           DBYO(I,K-1)/(1.+.5*GAMMO+.5*GAMMO0)                             CUP.319
<    55   CONTINUE                                                                 CUP.320
---
>       DO 55 K=2,MKX-1                                                            07NOV00.1267
>         DO 55 I=IST,IEN                                                          07NOV00.1268
>          IF(AA0(I).NE.-1.)THEN                                                   07NOV00.1269
>           IF(JMIN(I).LE.3)THEN                                                   07NOV00.1270
>             AA0(I)=-1.                                                           07NOV00.1271
>           ELSE IF (K.GT.KBCON(I).AND.K.LT.KTOP(I))THEN                           07NOV00.1272
>             DZ=-.5*Z(I,K-1)+.5*Z(I,K+1)                                          07NOV00.1273
>             DZ1=Z(I,K)-Z(I,K-1)                                                  07NOV00.1274
>             GAMMA=(XL/CP)*(XL/(RV*(T(I,K)**2)))*QES(I,K)                         07NOV00.1275
>             GAMMA0=(XL/CP)*(XL/(RV*(T(I,K-1)**2)))*QES(I,K-1)                    07NOV00.1276
>             QRCH=QES(I,K)+(1./XL)*(GAMMA/(1.+GAMMA))*DBY(I,K)                    07NOV00.1277
> C         QC(I,K)=(QCK(I)-QRCH)/(1.+C0*DZ)+QRCH                                  07NOV00.1278
> C         PW(I,K)=C0*DZ*(QC(I,K)-QRCH)                                           07NOV00.1279
> C         QCK(I)=QC(I,K)                                                         07NOV00.1280
>             QC(I,K)=QCK(I)                                                       07NOV00.1281
>             PW(I,K)=QCK(I)-QRCH                                                  07NOV00.1282
>             QCK(I)=QRCH                                                          07NOV00.1283
>             PWAV(I)=PWAV(I)+PW(I,K)                                              07NOV00.1284
>             DZ1=Z(I,K)-Z(I,K-1)                                                  07NOV00.1285
>             AA0(I)=AA0(I)+DZ1*(9.81/(1004.*(.5*(T(I,K)+T(I,K-1)))))*             07NOV00.1286
>      +           DBY(I,K-1)/(1.+.5*GAMMA+.5*GAMMA0)                              07NOV00.1287
>             DZO=-.5*ZO(I,K-1)+.5*ZO(I,K+1)                                       07NOV00.1288
>             DZ2=ZO(I,K)-ZO(I,K-1)                                                07NOV00.1289
>             GAMMO=(XL/CP)*(XL/(RV*(TN(I,K)**2)))*QESO(I,K)                       07NOV00.1290
>             GAMMO0=(XL/CP)*(XL/(RV*(TN(I,K-1)**2)))*QESO(I,K-1)                  07NOV00.1291
>             QRCHO=QESO(I,K)+(1./XL)*(GAMMO/(1.+GAMMO))*DBYO(I,K)                 07NOV00.1292
> C         QCO(I,K)=(QCKO(I)-QRCHO)/(1.+C0*DZO)+QRCHO                             07NOV00.1293
> C         PWO(I,K)=C0*DZO*(QCO(I,K)-QRCHO)                                       07NOV00.1294
> C         QCKO(I)=QCO(I,K)                                                       07NOV00.1295
>             QCO(I,K)=QCKO(I)                                                     07NOV00.1296
>             PWO(I,K)=QCKO(I)-QRCHO                                               07NOV00.1297
>             QCKO(I)=QRCHO                                                        07NOV00.1298
>             PWAVO(I)=PWAVO(I)+PWO(I,K)                                           07NOV00.1299
>             AA1(I)=AA1(I)+DZ2*(9.81/(1004.*(.5*(TN(I,K)+TN(I,K-1)))))*           07NOV00.1300
>      +           DBYO(I,K-1)/(1.+.5*GAMMO+.5*GAMMO0)                             07NOV00.1301
>           ENDIF                                                                  07NOV00.1302
>          ENDIF                                                                   07NOV00.1303
>    55   CONTINUE                                                                 07NOV00.1304
324c336
<       DO 50 I=ISTART,IEND                                                        CUP.324
---
>       DO 50 I=IST,IEN                                                            07NOV00.1305
350c362
<         DO 61 I=ISTART,IEND                                                      CUP.350
---
>         DO 61 I=IST,IEN                                                          07NOV00.1306
362c374
<       DO 72 I=ISTART,IEND                                                        CUP.362
---
>       DO 72 I=IST,IEN                                                            07NOV00.1307
381c393
<         DO 95 I=ISTART,IEND                                                      CUP.381
---
>         DO 95 I=IST,IEN                                                          07NOV00.1308
413c425
<       DO 96 I=ISTART,IEND                                                        CUP.413
---
>       DO 96 I=IST,IEN                                                            07NOV00.1309
428c440
<       DO 98 I=ISTART,IEND                                                        CUP.428
---
>       DO 98 I=IST,IEN                                                            07NOV00.1310
449c461
<         DO 100 I=ISTART,IEND                                                     CUP.449
---
>         DO 100 I=IST,IEN                                                         07NOV00.1311
498c510
<       DO 101 I=ISTART,IEND                                                       CUP.498
---
>       DO 101 I=IST,IEN                                                           07NOV00.1312
507c519
<       DO 102 I=ISTART,IEND                                                       CUP.507
---
>       DO 102 I=IST,IEN                                                           07NOV00.1313
525c537
< C     DO 110 I=ISTART,IEND                                                       CUP.525
---
> C     DO 110 I=IST,IEN                                                           07NOV00.1314
536c548
< C     DO 112 I=ISTART,IEND                                                       CUP.536
---
> C     DO 112 I=IST,IEN                                                           07NOV00.1315
546c558
<         DO 115 I=ISTART,IEND                                                     CUP.546
---
>         DO 115 I=IST,IEN                                                         07NOV00.1316
557c569
<       DO 116 I=ISTART,IEND                                                       CUP.557
---
>       DO 116 I=IST,IEN                                                           07NOV00.1317
562c574
<         DO 120 I=ISTART,IEND                                                     CUP.562
---
>         DO 120 I=IST,IEN                                                         07NOV00.1318
572c584
<         DO 130 I=ISTART,IEND                                                     CUP.572
---
>         DO 130 I=IST,IEN                                                         07NOV00.1319
582c594
<       DO 132 I=ISTART,IEND                                                       CUP.582
---
>       DO 132 I=IST,IEN                                                           07NOV00.1320
588c600
< C        DO 135 I=ISTART,IEND                                                    CUP.588
---
> C        DO 135 I=IST,IEN                                                        07NOV00.1321
596c608
<         DO 140 I=ISTART,IEND                                                     CUP.596
---
>         DO 140 I=IST,IEN                                                         07NOV00.1322
616c628
<       DO 142 I=ISTART,IEND                                                       CUP.616
---
>       DO 142 I=IST,IEN                                                           07NOV00.1323
639c651
<         DO 160 I=ISTART,IEND                                                     CUP.639
---
>         DO 160 I=IST,IEN                                                         07NOV00.1324
655c667
<       DO 162 I=ISTART,IEND                                                       CUP.655
---
>       DO 162 I=IST,IEN                                                           07NOV00.1325
672c684
<         DO 171 I=ISTART,IEND                                                     CUP.672
---
>         DO 171 I=IST,IEN                                                         07NOV00.1326
715c727
<       DO 175 I=ISTART,IEND                                                       CUP.715
---
>       DO 175 I=IST,IEN                                                           07NOV00.1327
729c741
<         DO 180 I=ISTART,IEND                                                     CUP.729
---
>         DO 180 I=IST,IEN                                                         07NOV00.1328
741c753
<         DO 1800 I=ISTART,IEND                                                    CUP.741
---
>         DO 1800 I=IST,IEN                                                        07NOV00.1329
756c768
<         DO 205 I=ISTART,IEND                                                     CUP.756
---
>         DO 205 I=IST,IEN                                                         07NOV00.1330
===================================================================
physics/cumulus/grell/cupara3.F
diff -r3.0 -r3.3
0a1
> #include <defines.incl>                                                          07NOV00.1331
2,3c3,6
<      &                    HT,U3D,V3D,PP3D,INEST,J,ISTART,IEND)                   CUPARA3.2
<                                                                                  CUPARA3.3
---
>      &                    HT,U3D,V3D,PP3D,                                       07NOV00.1332
>      &                    RPSA,DT,DX,R,CP,G,TO,XLV,RV,A,PTOP,                    07NOV00.1333
>      &                    INEST,J,IST,IEN)                                       07NOV00.1334
>       IMPLICIT NONE                                                              07NOV00.1335
7,10d9
< #     include <param3.incl>                                                      CUPARA3.7
< #     include <pmoist.incl>                                                      CUPARA3.8
< #     include <various.incl>                                                     CUPARA3.9
< #     include <rpstar.incl>                                                      CUPARA3.10
11a11,14
>       REAL      R,CP,G,TO,XLV,RV,A(MKX),PTOP                                     07NOV00.1336
>       REAL      DT,DX                                                            07NOV00.1337
>       REAL      RPSA(MIX,MJX)                                                    07NOV00.1338
> #ifndef VECTOR                                                                   07NOV00.1339
12a16
> #endif                                                                           07NOV00.1340
22c26
<       DIMENSION T3D(MIX,MJX,MKX),  QV3D(MIX,MJX,MKX),                            CUPARA3.22
---
>       REAL      T3D(MIX,MJX,MKX),  QV3D(MIX,MJX,MKX),                            07NOV00.1341
26c30
<       DIMENSION T3DTEN(MIX,MJX,MKX),  QV3DTEN(MIX,MJX,MKX)                       CUPARA3.26
---
>       REAL      T3DTEN(MIX,MJX,MKX),  QV3DTEN(MIX,MJX,MKX)                       07NOV00.1342
30c34
<       DIMENSION T(MIX,MKX),Q(MIX,MKX),P(MIX,MKX),PO(MIX,MKX),                    CUPARA3.30
---
>       REAL      T(MIX,MKX),Q(MIX,MKX),P(MIX,MKX),PO(MIX,MKX),                    07NOV00.1343
33a38,43
> C                                                                                07NOV00.1344
> C declarations for implicit none                                                 07NOV00.1345
> C                                                                                07NOV00.1346
>       REAL DTIME,C0,PKK,CALC                                                     07NOV00.1347
>       INTEGER I,J,K,KK,IST,IEN,ICONJ,INEST                                       07NOV00.1348
> C                                                                                07NOV00.1349
42,43d51
<       JLXM5=JL-5                                                                 CUPARA3.42
<       ILXM5=IL-5                                                                 CUPARA3.43
48c56
<       DO 75 I=ISTART,IEND                                                        CUPARA3.48
---
>       DO 75 I=IST,IEN                                                            07NOV00.1350
53c61
<         DO 100 I=ISTART,IEND                                                     CUPARA3.53
---
>         DO 100 I=IST,IEN                                                         07NOV00.1351
54a63
> #ifndef VECTOR                                                                   07NOV00.1352
58a68,72
> #else                                                                            07NOV00.1353
> C U and V are averaged in the caller for the vector version                      07NOV00.1354
>           US(I,K) = U3D(I,J,KK)                                                  07NOV00.1355
>           VS(I,K) = V3D(I,J,KK)                                                  07NOV00.1356
> #endif                                                                           07NOV00.1357
81c95
<      +     ISTART,IEND,KDET,DX,IFRAD,CLDFRA)                                     CUPARA3.81
---
>      +     IST,IEN,KDET,DX,IFRAD,CLDFRA,R,CP,G,TO,XLV,RV,A,PTOP)                 07NOV00.1358
85c99
<         DO 300 I=ISTART,IEND                                                     CUPARA3.85
---
>         DO 300 I=IST,IEN                                                         07NOV00.1359
97c111
<       DO 50 I=ISTART,IEND                                                        CUPARA3.97
---
>       DO 50 I=IST,IEN                                                            07NOV00.1360
101a116
> #ifndef VECTOR                                                                   07NOV00.1361
102a118
> #endif                                                                           07NOV00.1362
===================================================================
physics/cumulus/grell/maximi.F
diff -r3.0 -r3.3
1,2c1,6
<        SUBROUTINE MAXIMI(ARRAY,MIX,MKX,KS,KE,KT,ISTART,IEND)                     MAXIMI.1
<       DIMENSION ARRAY(MIX,MKX)                                                   MAXIMI.2
---
>       SUBROUTINE MAXIMI(ARRAY,MIX,MJX,MKX,KS,KE,KT,IST,IEN)                      07NOV00.1363
>       IMPLICIT NONE                                                              07NOV00.1364
> C MJX is needed for vector version                                               07NOV00.1365
>       INTEGER   MIX,MJX,MKX                                                      07NOV00.1366
>       REAL      ARRAY(MIX,MKX)                                                   07NOV00.1367
>       REAL      X,XAR                                                            07NOV00.1368
4c8,9
<       DO 200 I=ISTART,IEND                                                       MAXIMI.4
---
>       INTEGER I,K,IST,IEN,KE,KS                                                  07NOV00.1369
>       DO 200 I=IST,IEN                                                           07NOV00.1370
===================================================================
physics/cumulus/grell/minimi.F
diff -r3.0 -r3.3
1,2c1,5
<         SUBROUTINE MINIMI(ARRAY,MIX,MKX,KS,KEND,KT,ISTART,IEND)                  MINIMI.1
<       DIMENSION ARRAY(MIX,MKX)                                                   MINIMI.2
---
>       SUBROUTINE MINIMI(ARRAY,MIX,MJX,MKX,KS,KEND,KT,IST,IEN)                    07NOV00.1371
>       IMPLICIT NONE                                                              07NOV00.1372
> C MJX is needed for vector version                                               07NOV00.1373
>       INTEGER   MIX,MJX,MKX                                                      07NOV00.1374
>       REAL      ARRAY(MIX,MKX)                                                   07NOV00.1375
4c7,9
<       DO 200 I=ISTART,IEND                                                       MINIMI.4
---
>       INTEGER I,K,IST,IEN                                                        07NOV00.1376
>       REAL    X                                                                  07NOV00.1377
>       DO 200 I=IST,IEN                                                           07NOV00.1378
===================================================================
physics/cumulus/kf/condload.F
diff -r3.0 -r3.2
2a3
>       IMPLICIT NONE                                                              07NOV00.1379
7a9,12
> C DECLARATIONS FOR IMPLICIT NONE                                                 07NOV00.1380
>       REAL QTOT,QLIQ,QICE,QNEW,QNEWLQ,QNEWIC,QEST,G1,WTW,BOTERM                  07NOV00.1381
>       REAL ENTERM,G,DZ,WAVG,CONV,RATE,RATIO3,OLDQ,RATIO4,DQ,QLQOUT               07NOV00.1382
>       REAL QICOUT,PPTDRG                                                         07NOV00.1383
===================================================================
physics/cumulus/kf/cupara6.F
diff -r3.2 -r3.4
3a4,5
>                                                                                  07NOV00.1384
>       IMPLICIT NONE                                                              07NOV00.1385
12,18c14,25
<       DIMENSION RAINC(MIX,MJX), PSB(MIX,MJX), SCR1(MIX,MKX)                      CUPARA6.12
<       DIMENSION     T3DTEN(MIX,MJX,MKX),  QV3DTEN(MIX,MJX,MKX),                  CUPARA6.13
<      &          QR3DTEN(MIXM,MJXM,MKXM),  QC3DTEN(MIXM,MJXM,MKXM),               CUPARA6.14
<      &          QS3DTEN(MIXM,MJXM,MKXM),  QI3DTEN(MIXM,MJXM,MKXM)                CUPARA6.15
<       DIMENSION     T3D(MIX,MJX,MKX),        QV3D(MIX,MJX,MKX),                  CUPARA6.16
<      &              U3D(MIX,MJX,MKX),         V3D(MIX,MJX,MKX),                  CUPARA6.17
<      &             PP3D(MIX,MJX,MKX)                                             CUPARA6.18
---
>       INTEGER J,INEST,IMPHYS,IBEG,IEND                                           07NOV00.1386
>       REAL RAINC(MIX,MJX), PSB(MIX,MJX), SCR1(MIX,MKX)                           07NOV00.1387
>       REAL T3DTEN(MIX,MJX,MKX), QV3DTEN(MIX,MJX,MKX)                             07NOV00.1388
>       REAL QR3DTEN(MIXM,MJXM,MKXM), QC3DTEN(MIXM,MJXM,MKXM)                      07NOV00.1389
>       REAL QS3DTEN(MIXM,MJXM,MKXM), QI3DTEN(MIXM,MJXM,MKXM)                      07NOV00.1390
>       REAL T3D(MIX,MJX,MKX), QV3D(MIX,MJX,MKX)                                   07NOV00.1391
>       REAL U3D(MIX,MJX,MKX), V3D(MIX,MJX,MKX)                                    07NOV00.1392
>       REAL PP3D(MIX,MJX,MKX)                                                     07NOV00.1393
> C                                                                                07NOV00.1394
>       INTEGER I,K,NK                                                             07NOV00.1395
>       INTEGER ICLDCK,NTST                                                        07NOV00.1396
>       REAL TST,TV,PRS,RHOE,W0                                                    07NOV00.1397
===================================================================
physics/cumulus/kf/envirtht.F
diff -r3.0 -r3.2
2a3,7
>       IMPLICIT NONE                                                              07NOV00.1398
> C Declarations for Implicit None                                                 07NOV00.1399
>       REAL    R1,EE,Q1,P1,TLOG,ALIQ,TDPT,CLIQ,DLIQ,BLIQ,TSAT,T00                 07NOV00.1400
>       REAL    T1,THT,P00,THT1,C1,C2,AICE,TFPT,CICE,DICE,BICE                     07NOV00.1401
>       REAL    C3,C4,TLOGIC,TSATLQ,TSATIC,RL,C5                                   07NOV00.1402
===================================================================
physics/cumulus/kf/kfpara.F
diff -r3.2 -r3.4
2a3
>       IMPLICIT NONE                                                              07NOV00.1403
61c62
<       DIMENSION U3D(MIX,MJX,MKX),  V3D(MIX,MJX,MKX),                             KFPARA.61
---
>       REAL      U3D(MIX,MJX,MKX),  V3D(MIX,MJX,MKX),                             07NOV00.1404
67c68
<       DIMENSION P0(KX),Z0(KX),T0(KX),TV0(KX),Q0(KX),U0(KX),    V0(KX),           KFPARA.67
---
>       REAL      P0(KX),Z0(KX),T0(KX),TV0(KX),Q0(KX),U0(KX),    V0(KX),           07NOV00.1405
76c77
<       DIMENSION DOMGDP(KX),EXN(KX),RHOE(KX),TVQU(KX),DP(KX),RH(KX),              KFPARA.76
---
>       REAL      DOMGDP(KX),EXN(KX),RHOE(KX),TVQU(KX),DP(KX),RH(KX),              07NOV00.1406
83,86c84,112
<       DIMENSION OMG(KXP1)                                                        KFPARA.83
<       DIMENSION RAINFB(KX),SNOWFB(KX)                                            KFPARA.84
< C     DIMENSION SCR1(MIX,MKX),PPBS(MIX,MKX+1)                                    KFPARA.85
<       DIMENSION PPBS(MIX,MKX+1),TBASE(MIXNH,MJXNH,MKXNH)                         KFPARA.86
---
>       REAL      OMG(KXP1)                                                        07NOV00.1407
>       REAL      RAINFB(KX),SNOWFB(KX)                                            07NOV00.1408
> C     REAL      SCR1(MIX,MKX),PPBS(MIX,MKX+1)                                    07NOV00.1409
>       REAL      PPBS(MIX,MKX+1),TBASE(MIXNH,MJXNH,MKXNH)                         07NOV00.1410
> C Declarations for IMPLICIT NONE                                                 07NOV00.1411
>       REAL     GDRY,FBFRC,P300,CELL,ES,ALIQ,BLIQ,DLIQ,B61,T00,DPTHMX             07NOV00.1412
>       REAL     QMIX,ZMIX,PMIX,ROCPQ,P00,TMIX,EMIX,TLOG,CLIQ,THMIX                07NOV00.1413
>       REAL     TDPT,TLCL,TVLCL,CPORQ,PLCL,DLP,TENV,QENV,TVEN                     07NOV00.1414
>       REAL     TVBAR,ZLCL,WKLCL,WKL,WABS,WSIGNE,DTLCL,GDT,WLCL,TVAVG             07NOV00.1415
>       REAL     QESE,WTW,RHOLCL,AU0,PIE,VMFLCL,UPOLD,UPNEW,ABE,TRPPT              07NOV00.1416
>       REAL     THTUDL,TUDL,TTEMP,TTFRZ,FRC1,QNEWLQ,QNEWIC,RL,XLS0                07NOV00.1417
>       REAL     XLS1,AICE,BICE,CICE,DICE,TBFRZ,R1,QNWFRZ,EFFQ,BE                  07NOV00.1418
>       REAL     BOTERM,ENTERM,DZZ,WSQ,RATE,UDLBE,REI,EE2,UD2,TTMP,F1              07NOV00.1419
>       REAL     F2,THTTMP,QTMP,TMPLIQ,TMPICE,TU95,TU10,EE1,UD1                    07NOV00.1420
>       REAL     CLDHGT,DPTT,DUMFDP,EE,TSAT,THTA,P150,USR,VCONV                    07NOV00.1421
>       REAL     TIMEC,TADVEC,SHSIGN,VWS,PEF,CBH,RCBH,PEFCBH,PEFF                  07NOV00.1422
>       REAL     PEFF2,TDER,THTMIN,DTMLTD,RLF,QS,DPDD,FRC,DPT,RDD                  07NOV00.1423
>       REAL     A1,TPDD,DSSDT,DTMP,RHBC,T1RH,QSRH,PPTFLX,CPR,CNDTNF               07NOV00.1424
>       REAL     UPDINC,AINCM2,RCED,DPPTDF,DMFLFS,DMFLFS2                          07NOV00.1425
>       REAL     RCED2,DDINC,AINCMX,AINCM1,AINC,TDER2,PPTFL2,FABE                  07NOV00.1426
>       REAL     STAB,DEVDMF,PPR,DTT,DTT1,DTIME,TMA,TMB,TMM                        07NOV00.1427
>       REAL     BCOEFF,ACOEFF,QVDIFF,TOPOMG,CPM,DQ,ABEG,DABE,DFDA                 07NOV00.1428
>       REAL     FABEOLD,AINCOLD,FRC2,DR,UDFRC,UEFRC,DDFRC,DEFRC,TUC               07NOV00.1429
>       REAL     TDC,QGS,RH0,RHG,QINIT,QFNL,ERR2,RELERR,RLC,RLS,RNC                07NOV00.1430
>       REAL     CV,RHIC,C5                                                        07NOV00.1431
>       INTEGER  IBEG,IEND,I,J,K,ML,NK,L5,L4,LLFC,KMIX,LOW,LC,MXLAYR               07NOV00.1432
>       INTEGER  NLAYRS,KPBL,KLCL,LCL,LET,IFLAG,KFRZ,NK1,LTOP,NJ                   07NOV00.1433
>       INTEGER  LTOP1,LTOPM1,LVF,NIC,KSTART,KMIN,LFS,ND,LDB,LDT                   07NOV00.1434
>       INTEGER  ND1,NDK,NM,LMAX,NCOUNT,NOITR,ISTOP,NSTEP,NTC,INEST                07NOV00.1435
===================================================================
physics/cumulus/kf/tpmix.F
diff -r3.0 -r3.2
3a4,11
>       IMPLICIT NONE                                                              07NOV00.1436
> C Declarations for Implicit none                                                 07NOV00.1437
>       REAL    C5,RV,RATIO2,ES,ALIQ,BLIQ,TU,CLIQ,DLIQ,QS,P,PI,THTGS,AICE          07NOV00.1438
>       REAL    BICE,CICE,DICE,ESLIQ,ESICE,RL,F0,THTU,T1,T0,F1,DT,QU,QNEW          07NOV00.1439
>       REAL    DQ,QTOT,QLIQ,QICE,DQICE,DQLIQ,RLL,XLV0,XLV1,XLS0,XLS1              07NOV00.1440
>       REAL    CP,QNEWLQ,QNEWIC                                                   07NOV00.1441
>       INTEGER ITCNT                                                              07NOV00.1442
>                                                                                  07NOV00.1443
===================================================================
physics/cumulus/kuo/cupara2.F
diff -r3.2 -r3.5
17a18,20
>                                                                                  07NOV00.1444
>       IMPLICIT NONE                                                              07NOV00.1445
>                                                                                  07NOV00.1446
34,39c37,43
<       DIMENSION QV3DTEN(MIX,MJX,MKX), T3DTEN(MIX,MJX,MKX)                        CUPARA2.34
<       DIMENSION QV3D(MIX,MJX,MKX), T3D(MIX,MJX,MKX)                              CUPARA2.35
<       DIMENSION PP3D(MIX,MJX,MKX), QDOT(MIX,MJX,KXP1)                            CUPARA2.36
<       DIMENSION RAINC(MIX,MJX), PSB(MIX,MJX)                                     CUPARA2.37
<       DIMENSION SCR3(MIX,MKX)                                                    CUPARA2.38
<       DIMENSION SEQT(MKX)                                                        CUPARA2.39
---
>       INTEGER J,IN,ISTART,IEND                                                   07NOV00.1447
>       REAL QV3DTEN(MIX,MJX,MKX), T3DTEN(MIX,MJX,MKX)                             07NOV00.1448
>       REAL QV3D(MIX,MJX,MKX), T3D(MIX,MJX,MKX)                                   07NOV00.1449
>       REAL PP3D(MIX,MJX,MKX), QDOT(MIX,MJX,KXP1)                                 07NOV00.1450
>       REAL RAINC(MIX,MJX), PSB(MIX,MJX)                                          07NOV00.1451
>       REAL SCR3(MIX,MKX)                                                         07NOV00.1452
>       REAL SEQT(MKX)                                                             07NOV00.1453
40a45
>       REAL PERT,PERQ,DLT,CDSCLD                                                  07NOV00.1454
42a48,57
>                                                                                  07NOV00.1455
>       INTEGER I,K,KK                                                             07NOV00.1456
>       INTEGER KBASE,KTOP                                                         07NOV00.1457
>       REAL SCA,EQTM,TTP,Q,PSG,T1,EQT                                             07NOV00.1458
>       REAL TMAX,QMAX,PMAX,EMAX,TDMAX,TMEAN                                       07NOV00.1459
>       REAL DALR,DPLR,ZLCL,TLCL,PLCL,DLNP,SIGLCL                                  07NOV00.1460
>       REAL ES,QS,DEQT,DSC,TTSUM,SUM,SUMB,ARH                                     07NOV00.1461
>       REAL PSX,PUX,E1,RH,XSAV,C301                                               07NOV00.1462
>       REAL TTCONV,APCNT,EDDYF                                                    07NOV00.1463
>                                                                                  07NOV00.1464
224,225c239,245
<           SCR3(I,K)=QV3D(I,J,K)*PSB(I,J)                                         25JAN00.477
<      +            *(QV3D(I,J,K-1)/QV3D(I,J,K))**QCON(K)                          25JAN00.478
---
>           IF(IVQADV.EQ.0)THEN                                                    07NOV00.1465
>             SCR3(I,K)=QV3D(I,J,K)*PSB(I,J)                                       07NOV00.1466
>      +              *(QV3D(I,J,K-1)/QV3D(I,J,K))**QCON(K)                        07NOV00.1467
>           ELSE                                                                   07NOV00.1468
>             SCR3(I,K)=(TWT(K,1)*QV3D(I,J,K)+TWT(K,2)*QV3D(I,J,K-1))              07NOV00.1469
>      +                *PSB(I,J)                                                  07NOV00.1470
>           ENDIF                                                                  07NOV00.1471
===================================================================
physics/cumulus/shallow/entrs.F
diff -r3.2 -r3.4
46,47c46
<         HC(K)=(HC(K-1)*(1.-CD(K,LP)*DZ*ENT*.5)+(1.+CD(K,LP))*ENT*DZ*H(K)         ENTRS.46
<      +        )/(1.+(1.+.5*CD(K,LP))*ENT*DZ)                                     ENTRS.47
---
>         HC(K)=(HC(K-1)*(1.-.5*DZ*ENT)+ENT*DZ*H(K))/(1.+.5*ENT*DZ)                07NOV00.1472
===================================================================
physics/cumulus/shallow/shallcu.F
diff -r3.0 -r3.2
15c15
<       DIMENSION   SCR1(MIX,MKX),        SCR2(MIX,MKX),                           SHALLCU.15
---
>       DIMENSION   SCR1(MIX,MJX,MKX),  SCR2(MIX,MJX,MKX),                         07NOV00.1473
42,43c42,43
<           TNS(K)=T(K)+(SCR1(I,KK))/PSB(I,J)*DT                                   SHALLCU.42
<           QNS(K)=Q(K)+(SCR2(I,KK))/PSB(I,J)*DT                                   SHALLCU.43
---
>           TNS(K)=T(K)+(SCR1(I,J,KK))/PSB(I,J)*DT                                 07NOV00.1474
>           QNS(K)=Q(K)+(SCR2(I,J,KK))/PSB(I,J)*DT                                 07NOV00.1475
===================================================================
physics/cumulus/shallow/shallow.F
diff -r3.3 -r3.5
270c270,273
<         CALL ZUNC(K22,ZU,KBCON,XX(LP),Z,KDIM,LP,KNUM,KTOP)                       SHALLOW.269
---
> C   ENTNET IS NET ENTRAINMENT MINUS DETRAINMENT WHICH IS ZERO FOR                07NOV00.1476
> C   SHALLOW CONVECTION                                                           07NOV00.1477
>         ENTNET=0.                                                                07NOV00.1478
>         CALL ZUNC(K22,ZU,KBCON,ENTNET,Z,KDIM,LP,KNUM,KTOP)                       07NOV00.1479
455c458
<           CALL ZUNC(K22,XZU,KBCON,XX(LPX),XZ,KDIM,LPX,KNUM,KTOPX)                SHALLOW.454
---
>           CALL ZUNC(K22,XZU,KBCON,ENTNET,XZ,KDIM,LPX,KNUM,KTOPX)                 07NOV00.1480
===================================================================
physics/cumulus/shared/precip.F
diff -r3.0 -r3.2
79,80c79
<         QC(K)=(QC(K-1)*(1.-CD(K,LP)*R*DZ*.5)+(1.+CD(K,LP))*R*DZ*QE(K))/(         PRECIP.79
<      +        1.+(1.+.5*CD(K,LP))*DZ*R)                                          PRECIP.80
---
>         QC(K)=(QC(K-1)*(1.-R*DZ*.5)+R*DZ*QE(K))/(1.+.5*DZ*R)                     07NOV00.1481
===================================================================
physics/explicit/reisner1/Makefile
diff -r3.0 -r3.1
60,63c60,62
< exmoisr.o: ../../../include/pmoist.incl ../../../include/point3d.incl
< exmoisr.o: ../../../include/point2d.incl ../../../include/various.incl
< exmoisr.o: ../../../include/nonhyd.incl ../../../include/nhcnst.incl
< exmoisr.o: ../../../include/rpstar.incl ../../../include/jrg.incl
---
> exmoisr.o: ../../../include/pmoist.incl
> exmoisr.o: ../../../include/various.incl
> exmoisr.o: ../../../include/defines.incl ../../../include/jrg.incl
66d64
< lexmoisr.o: ../../../include/point3d.incl ../../../include/point2d.incl
===================================================================
physics/explicit/reisner1/exmoisr.F
diff -r3.2 -r3.8
0a1
> #include <defines.incl>                                                          07NOV00.1482
3c4,5
<      &                   PSB,RAINNC,IN,J,IST,IEN)                                EXMOISR.3
---
>      &                   PSB,RPSB,RAINNC,IN,J,IST,IEN)                           07NOV00.1483
>       IMPLICIT NONE                                                              07NOV00.1484
24c26
<                                                                                  EXMOISR.24
---
> C_FLIC_BEGIN_NOFLIC                                                              07NOV00.1485
31,32c33
< #     include <nhcnst.incl>                                                      EXMOISR.31
< #     include <rpstar.incl>                                                      EXMOISR.32
---
> C_FLIC_END_NOFLIC                                                                07NOV00.1486
33a35,36
>       REAL RPSB(MIX,MJX)                                                         07NOV00.1487
>       REAL RPSC(MIX,MJX)                                                         07NOV00.1488
47a51,58
>                                                                                  07NOV00.1489
> #ifndef VECTOR                                                                   07NOV00.1490
>       REAL FR(MKX),FS(MKX),FI(MKX)                                               07NOV00.1491
>       REAL FALOUTR(MKX),FALOUTS(MKX),FALOUTI(MKX)                                07NOV00.1492
> #else                                                                            07NOV00.1493
>       REAL FR(MIX,MKX),FS(MIX,MKX),FI(MIX,MKX)                                   07NOV00.1494
>       REAL FALOUTR(MIX,MKX),FALOUTS(MIX,MKX),FALOUTI(MIX,MKX)                    07NOV00.1495
> #endif                                                                           07NOV00.1496
65,66c76
<      1     QR3DTEN(MIXM,MJXM,MKXM),SCR4R(MIX,MKX),FR(MKX),                       EXMOISR.65
<      1     FALOUTR(MKX)                                                          EXMOISR.66
---
>      1     QR3DTEN(MIXM,MJXM,MKXM),SCR4R(MIX,MKX)                                07NOV00.1497
73c83
<       REAL SCR4I(MIX,MKX),FI(MKX),FALOUTI(MKX)                                   EXMOISR.73
---
>       REAL SCR4I(MIX,MKX)                                                        07NOV00.1498
80c90
<      1     SCR4S(MIX,MKX),FS(MKX),FALOUTS(MKX)                                   EXMOISR.80
---
>      1     SCR4S(MIX,MKX)                                                        07NOV00.1499
87a98,117
> C DECLARATIONS FOR IMPLICIT NONE                                                 07NOV00.1500
>       INTEGER I,J,K                                                              07NOV00.1501
>       INTEGER IST,IEN,IN,ISAT,N                                                  07NOV00.1502
> #ifdef VECTOR                                                                    07NOV00.1503
>       INTEGER NSTEP(MIX)                                                         07NOV00.1504
>       LOGICAL MORETODO                                                           07NOV00.1505
> #else                                                                            07NOV00.1506
>       INTEGER NSTEP                                                              07NOV00.1507
> #endif                                                                           07NOV00.1508
>       REAL EVS,EIS,QVS1,QVI1,XNC,XMI,SUPICE,DI,XLATF,TEMP                        07NOV00.1509
>       REAL RHO2,SLOR1,SLOS1,VT2R,VT2S,RHO3,VSED,RGVM                             07NOV00.1510
>       REAL FALTNDR,FALTNDS,FALTNDI                                               07NOV00.1511
> #ifdef KMA                                                                       07NOV00.1512
>       real dt_rcp                                                                07NOV00.1513
>       real rhosno, tmp1, tmp2                                                    07NOV00.1514
>       real dum11_rcp                                                             07NOV00.1515
>       real dsigma_rcp(mkx)                                                       07NOV00.1516
>       real rcp_nstep                                                             07NOV00.1517
>       real g_rcp                                                                 07NOV00.1518
> #endif                                                                           07NOV00.1519
88a119,131
> #ifdef KMA                                                                       07NOV00.1520
>       dt_rcp = 1.0/dt                                                            07NOV00.1521
> #endif                                                                           07NOV00.1522
> #ifndef VECTOR                                                                   07NOV00.1523
>       DO I = IST, IEN                                                            07NOV00.1524
>           RPSC(I,J) = RPSB(I,J)                                                  07NOV00.1525
>       ENDDO                                                                      07NOV00.1526
> #else                                                                            07NOV00.1527
>       DO I = 1, MIX*MJX                                                          07NOV00.1528
>           RPSC(I,J) = RPSB(I,J)                                                  07NOV00.1529
>       ENDDO                                                                      07NOV00.1530
> #endif                                                                           07NOV00.1531
>                                                                                  07NOV00.1532
120a164,170
> #ifdef KMA                                                                       07NOV00.1533
>             rhosno= rho(i,k)*snow(i,k)                                           07NOV00.1534
>             tmp1=exp(log(pi*dsnow/rhosno) * (bs * .25))                          07NOV00.1535
>             tmp2=exp(log(const1a*(drain/(rhosno*const1b)*tmp1))*0.94)            07NOV00.1536
>             SONV(I,K)=exp( log(tmp2) * (4.0 / (4-.94 * bs + 4.0)))               07NOV00.1537
> #else                                                                            07NOV00.1538
>                                                                                  07NOV00.1539
123c173,174
<      +                0.94*BS+4))                                                EXMOISR.123
---
>      +                4.-0.94*BS))                                               07NOV00.1540
> #endif                                                                           07NOV00.1541
153a205,207
> #ifdef KMA                                                                       07NOV00.1542
>           dum11(i,k) = exp(.3333*log(prc(i,k))) / sqrt(pre(i,k))                 07NOV00.1543
> #else                                                                            07NOV00.1544
154a209
> #endif                                                                           07NOV00.1545
179a235,237
> #ifdef KMA                                                                       07NOV00.1546
>           SUPICE=(QAOUT(I,K)-QVSI(I,K)) * dt_rcp                                 07NOV00.1547
> #else                                                                            07NOV00.1548
180a239
> #endif                                                                           07NOV00.1549
181a241,243
> #ifdef KMA                                                                       07NOV00.1550
>             PRI(I,K)=AMAX1(0.,(XM01*XNC-ICE(I,K))*dt_rcp)                        07NOV00.1551
> #else                                                                            07NOV00.1552
182a245
> #endif                                                                           07NOV00.1553
198a262,265
> #ifdef KMA                                                                       07NOV00.1554
>             prai(i,k)=acris * exp(log(slos(i,k))*bacris) *                       07NOV00.1555
>      &               ice(i,k)*sonv(i,k)                                          07NOV00.1556
> #else                                                                            07NOV00.1557
199a267
> #endif                                                                           07NOV00.1558
204a273,276
> #ifdef KMA                                                                       07NOV00.1559
>             psacw(i,k)=acrcs * exp(log(slos(i,k))*bacrcs) *                      07NOV00.1560
>      &                cloud(i,k)*sonv(i,k)                                       07NOV00.1561
> #else                                                                            07NOV00.1562
205a278
> #endif                                                                           07NOV00.1563
207a281,283
> #ifdef KMA                                                                       07NOV00.1564
>           DI=16.3*sqrt(XMI)                                                      07NOV00.1565
> #else                                                                            07NOV00.1566
208a285
> #endif                                                                           07NOV00.1567
220a298,300
> #ifdef KMA                                                                       07NOV00.1568
>           PRCI(I,K)=AMAX1(0.,(ICE(I,K)-XSMAX*XNC)*DT_rcp)                        07NOV00.1569
> #else                                                                            07NOV00.1570
221a302
> #endif                                                                           07NOV00.1571
232a314,317
> #ifdef KMA                                                                       07NOV00.1572
>      +                SLOS(I,K)*SLOS(I,K)+sqrt(DEPS2)*DEPS3*DUM11(I,K)*          07NOV00.1573
>      +                exp(log(SLOS(I,K))*(DEPS4)))/ABI(I,K)                      07NOV00.1574
> #else                                                                            07NOV00.1575
234a320
> #endif                                                                           07NOV00.1576
246a333,335
> #ifdef KMA                                                                       07NOV00.1577
>             PRA(I,K)=ACRCR* exp(log(SLOR(I,K))*BACRCR)*CLOUD(I,K)                07NOV00.1578
> #else                                                                            07NOV00.1579
247a337
> #endif                                                                           07NOV00.1580
250a341,344
> #ifdef KMA                                                                       07NOV00.1581
>      +      0.78*SLOR(I,K)*SLOR(I,K)+sqrt(DEPR2)*DEPR3*DUM11(I,K)*               07NOV00.1582
>      +      exp(log(SLOR(I,K))*(DEPR4)))/ABW(I,K)                                07NOV00.1583
> #else                                                                            07NOV00.1584
252a347
> #endif                                                                           07NOV00.1585
276a372,376
> #ifdef KMA                                                                       07NOV00.1586
>           PMLTEV(I,K)=SONV(I,K)*DEPS1*(QAOUT(I,K)/QVS(I,K)-1.)*(0.65*            07NOV00.1587
>      +            SLOS(I,K)*SLOS(I,K)+sqrt(DEPS2)*DEPS3*DUM11(I,K)*              07NOV00.1588
>      +            exp(log( SLOS(I,K))*(DEPS4)))/AB(I,K)                          07NOV00.1589
> #else                                                                            07NOV00.1590
279a380
> #endif                                                                           07NOV00.1591
281,282d381
< C     if (j.eq.ist.and.k.eq.10) print *, '2,I,K,PRE,RAIN = ',                    EXMOISR.281
< C    +    i,k,pre(i,k), rain(i,k)                                                EXMOISR.282
287c386,389
< C     if (j.eq.ist.and.k.eq.10) print *, '3,I,K,PRE = ', i,k,pre(i,k)            EXMOISR.287
---
> #ifdef KMA                                                                       07NOV00.1592
>           PRE(I,K)=AMAX1(-RAIN(I,K)*DT_rcp,PRE(I,K))                             07NOV00.1593
>           PREI(I,K)=AMAX1(-SNOW(I,K)*DT_rcp,PREI(I,K))                           07NOV00.1594
> #else                                                                            07NOV00.1595
290c392
< C     if (j.eq.ist.and.k.eq.10) print *, '4,I,K,PRE = ', i,k,pre(i,k)            EXMOISR.290
---
> #endif                                                                           07NOV00.1596
296a399,405
> #ifdef KMA                                                                       07NOV00.1597
>               dum11_rcp = 1.0/dum11(i,k)                                         07NOV00.1598
>               NUFCI(I,K)=CLOUD(I,K)*NUFCI(I,K) * dum11_rcp                       07NOV00.1599
>               PRC(I,K)=CLOUD(I,K)*PRC(I,K) * dum11_rcp                           07NOV00.1600
>               PRA(I,K)=CLOUD(I,K)*PRA(I,K) * dum11_rcp                           07NOV00.1601
>               PSACW(I,K)=CLOUD(I,K)*PSACW(I,K) * dum11_rcp                       07NOV00.1602
> #else                                                                            07NOV00.1603
300a410
> #endif                                                                           07NOV00.1604
305a416,423
> #ifdef KMA                                                                       07NOV00.1605
>               dum11_rcp = 1.0/dum11(i,k)                                         07NOV00.1606
>               PRCI(I,K)=ICE(I,K)*PRCI(I,K) * dum11_rcp                           07NOV00.1607
>               PRAI(I,K)=ICE(I,K)*PRAI(I,K) * dum11_rcp                           07NOV00.1608
>               PRI(I,K)=ICE(I,K)*PRI(I,K) * dum11_rcp                             07NOV00.1609
>               PRD(I,K)=ICE(I,K)*PRD(I,K) * dum11_rcp                             07NOV00.1610
>               NUFCI(I,K)=ICE(I,K)*NUFCI(I,K) * dum11_rcp                         07NOV00.1611
> #else                                                                            07NOV00.1612
310a429
> #endif                                                                           07NOV00.1613
337a457,462
> #ifdef KMA                                                                       07NOV00.1614
>               dum11_rcp = 1.0/dum11(i,k)                                         07NOV00.1615
>               PRC(I,K)=CLOUD(I,K)*PRC(I,K) * dum11_rcp                           07NOV00.1616
>               PRA(I,K)=CLOUD(I,K)*PRA(I,K) * dum11_rcp                           07NOV00.1617
>               PSACW(I,K)=CLOUD(I,K)*PSACW(I,K) * dum11_rcp                       07NOV00.1618
> #else                                                                            07NOV00.1619
340a466
> #endif                                                                           07NOV00.1620
424a551,558
> #ifdef KMA                                                                       07NOV00.1621
>       do k = 1,kl                                                                07NOV00.1622
>       dsigma_rcp(k) = 1.0/dsigma(k)                                              07NOV00.1623
>       end do                                                                     07NOV00.1624
> #endif                                                                           07NOV00.1625
> #ifdef VECTOR                                                                    07NOV00.1626
> #  include <vec_exmoisr_80.incl>                                                 07NOV00.1627
> #else                                                                            07NOV00.1628
465a600,627
> #ifdef KMA                                                                       07NOV00.1629
>           rcp_nstep=1/NSTEP                                                      07NOV00.1630
>           FALTNDR=FALOUTR(K)*DSIGMA_RCP(K)                                       07NOV00.1631
>           FALTNDS=FALOUTS(K)*DSIGMA_RCP(K)                                       07NOV00.1632
>           FALTNDI=FALOUTI(K)*DSIGMA_RCP(K)                                       07NOV00.1633
>           QR3DTEN(I,J,K)=QR3DTEN(I,J,K)-FALTNDR*RCP_NSTEP                        07NOV00.1634
>           QNI3DTEN(I,J,K)=QNI3DTEN(I,J,K)-FALTNDS*RCP_NSTEP                      07NOV00.1635
>           QI3DTEN(I,J,K)=QI3DTEN(I,J,K)-FALTNDI*RCP_NSTEP                        07NOV00.1636
>           SCR4R(I,K)=SCR4R(I,K)-FALTNDR*DT*RCP_NSTEP                             07NOV00.1637
>           SCR4S(I,K)=SCR4S(I,K)-FALTNDS*DT*RCP_NSTEP                             07NOV00.1638
>           SCR4I(I,K)=SCR4I(I,K)-FALTNDI*DT*RCP_NSTEP                             07NOV00.1639
>           DO 120 K=2,KL                                                          07NOV00.1640
>             FALTNDR=(FALOUTR(K)-FALOUTR(K-1))*DSIGMA_RCP(K)                      07NOV00.1641
>             FALTNDS=(FALOUTS(K)-FALOUTS(K-1))*DSIGMA_RCP(K)                      07NOV00.1642
>             FALTNDI=(FALOUTI(K)-FALOUTI(K-1))*DSIGMA_RCP(K)                      07NOV00.1643
>             QR3DTEN(I,J,K)=QR3DTEN(I,J,K)-FALTNDR*RCP_NSTEP                      07NOV00.1644
>             QNI3DTEN(I,J,K)=QNI3DTEN(I,J,K)-FALTNDS*RCP_NSTEP                    07NOV00.1645
>             QI3DTEN(I,J,K)=QI3DTEN(I,J,K)-FALTNDI*RCP_NSTEP                      07NOV00.1646
>             SCR4R(I,K)=SCR4R(I,K)-FALTNDR*DT*RCP_NSTEP                           07NOV00.1647
>             SCR4S(I,K)=SCR4S(I,K)-FALTNDS*DT*RCP_NSTEP                           07NOV00.1648
>             SCR4I(I,K)=SCR4I(I,K)-FALTNDI*DT*RCP_NSTEP                           07NOV00.1649
>             FR(K)=AMAX1(FR(K)/DSIGMA(K),FR(K-1)*                                 07NOV00.1650
>      +                                DSIGMA_RCP(K-1))*DSIGMA(K)                 07NOV00.1651
>             FS(K)=AMAX1(FS(K)/DSIGMA(K),FS(K-1)*                                 07NOV00.1652
>      +                                DSIGMA_RCP(K-1))*DSIGMA(K)                 07NOV00.1653
>             FI(K)=AMAX1(FI(K)/DSIGMA(K),FI(K-1)*                                 07NOV00.1654
>      +                                DSIGMA_RCP(K-1))*DSIGMA(K)                 07NOV00.1655
> #else                                                                            07NOV00.1656
487a650
> #endif                                                                           07NOV00.1657
490,493c653,658
< C 6000 CONVERTS FROM SEC TO MIN AND FROM M TO CM                                 EXMOISR.487
< C      RAINNC(I,J)=RAINNC(I,J)+(FALOUTR(KL)+FALOUTS(KL)                          EXMOISR.488
< C     &           )*DTMIN*6000./G/NSTEP                                          EXMOISR.489
<           RAINNC(I,J)=RAINNC(I,J)+(FALOUTR(KL)+FALOUTS(KL)+FALOUTI(KL))*         EXMOISR.490
---
> #ifdef KMA                                                                       07NOV00.1658
>       G_RCP = 1.0/G                                                              07NOV00.1659
>       RAINNC(I,J)=RAINNC(I,J)+(FALOUTR(KL)+FALOUTS(KL)+FALOUTI(KL))*         EX  07NOV00.1660
>      +                DTMIN*6000.*G_RCP*RCP_NSTEP                                07NOV00.1661
> #else                                                                            07NOV00.1662
>       RAINNC(I,J)=RAINNC(I,J)+(FALOUTR(KL)+FALOUTS(KL)+FALOUTI(KL))*         EX  07NOV00.1663
494a660
> #endif                                                                           07NOV00.1664
496a663
> #endif                                                                           07NOV00.1665
===================================================================
physics/explicit/reisner2/exmoisg.F
diff -r3.2 -r3.5
401c401
<           IF(GRAUPEL(I,K).GT.R1.AND.SUPICE.LT.0..AND.TAOUT(I,K).LT.TO)           EXMOISG.389
---
>           IF(GRAUPEL(I,K).GT.R1.AND.TAOUT(I,K).LT.TO)                            07NOV00.1666
444c444
<               ELSEIF(PRD(I,K).LT.0.)THEN                                         EXMOISG.432
---
>               ELSE                                                               07NOV00.1667
917,918c917
<             QNC3DTEN(I,J,K)=QNC3DTEN(I,J,K)+(RHO3*DUM11(I,K)/XM01)/DT*           EXMOISG.905
<      +                      PSB(I,J)                                             EXMOISG.906
---
>             QNC3DTEN(I,J,K)=QNC3DTEN(I,J,K)+(RHO3*DUM11(I,K)/XM01)/DT            07NOV00.1668
===================================================================
physics/pbl_sfc/Makefile
diff -r3.0 -r3.2
61,62c61
< 	echo $(ISOIL) > $$tmpfile; \
< 	$(GREP) "0" $$tmpfile; \
---
> 	$(GREP) "7" $$tmpfile; \
64,65c63,64
< 		echo "ISOIL = 0"; \
< 		(cd util; $(MAKE) all); \
---
> 		echo "IBLTYP = 7"; \
> 		(cd pxpbl; $(MAKE) all); \
67,74c66
< 		echo "ISOIL != 0"; \
< 	fi; \
< 	$(GREP) "1" $$tmpfile; \
< 	if [ $$? = 0 ]; then \
< 		echo "ISOIL = 1"; \
< 		(cd util; $(MAKE) all); \
< 	else \
< 		echo "ISOIL != 1"; \
---
> 		echo "IBLTYP != 7"; \
75a68
> 	echo $(ISOIL) > $$tmpfile; \
80d72
< 		(cd util; $(MAKE) all); \
83a76
> 	@(cd util; $(MAKE) all);
138,139c131
< 	echo $(ISOIL) > $$tmpfile; \
< 	$(GREP) "0" $$tmpfile; \
---
> 	$(GREP) "7" $$tmpfile; \
141,142c133,134
< 		echo "ISOIL = 0"; \
< 		(cd util; $(MAKE) code); \
---
> 		echo "IBLTYP = 7"; \
> 		(cd pxpbl; $(MAKE) code); \
144,151c136
< 		echo "ISOIL != 0"; \
< 	fi; \
< 	$(GREP) "1" $$tmpfile; \
< 	if [ $$? = 0 ]; then \
< 		echo "ISOIL = 1"; \
< 		(cd util; $(MAKE) code); \
< 	else \
< 		echo "ISOIL != 1"; \
---
> 		echo "IBLTYP != 7"; \
152a138
> 	echo $(ISOIL) > $$tmpfile; \
160a147
> 	@(cd util; $(MAKE) code);
215,223c202
< 	echo $(ISOIL) > $$tmpfile; \
< 	$(GREP) "0" $$tmpfile; \
< 	if [ $$? = 0 ]; then \
< 		echo "ISOIL = 0"; \
< 		(cd util; $(MAKE) little_f); \
< 	else \
< 		echo "ISOIL != 0"; \
< 	fi; \
< 	$(GREP) "1" $$tmpfile; \
---
> 	$(GREP) "7" $$tmpfile; \
225,226c204,205
< 		echo "ISOIL = 1"; \
< 		(cd util; $(MAKE) little_f); \
---
> 		echo "IBLTYP = 7"; \
> 		(cd pxpbl; $(MAKE) little_f); \
228c207
< 		echo "ISOIL != 1"; \
---
> 		echo "IBLTYP != 7"; \
229a209
> 	echo $(ISOIL) > $$tmpfile; \
237a218
> 	@(cd util; $(MAKE) little_f);
248,249c229,231
< 	(cd util; $(MAKE) clean);
< 	(cd osusfc; $(MAKE) clean);
---
> 	(cd pxpbl; $(MAKE) clean); \
> 	(cd util; $(MAKE) clean); \
> 	(cd osusfc; $(MAKE) clean)
===================================================================
physics/pbl_sfc/btpbl/hoskeep.F
diff -r3.0 -r3.4
4c4
<       SUBROUTINE HOSKEEP(IRR,JRR)                                                HOSKEEP.4
---
>       SUBROUTINE HOSKEEP(IRR,JRR,INEST)                                          07NOV00.1669
314,319c314,315
<       IF(IFRAD.EQ.3)THEN                                                         HOSKEEP.314
<         GTOT=-(HSG+HEATL*EG-GSW(IRR,JRR)+GLW(IRR,JRR))                           HOSKEEP.315
<       ELSE                                                                       HOSKEEP.316
<         GTOT=-(HSG+HEATL*EG-GSW(IRR,JRR)+EMISS(IRR,JRR)*(RLGUP-                  HOSKEEP.317
<      +       GLW(IRR,JRR)))                                                      HOSKEEP.318
<       ENDIF                                                                      HOSKEEP.319
---
>       GTOT=-(HSG+HEATL*EG-GSW(IRR,JRR)+EMISS(IRR,JRR)*(RLGUP-                    07NOV00.1670
>      +     GLW(IRR,JRR)))                                                        07NOV00.1671
331a328,330
>       IF(IFSNOW(INEST).EQ.1.AND.SNOWC(IRR,JRR).GT.0.0)THEN                       07NOV00.1672
>         SST=AMIN1(SST,273.16)                                                    07NOV00.1673
>       ENDIF                                                                      07NOV00.1674
===================================================================
physics/pbl_sfc/btpbl/navypb.F
diff -r3.0 -r3.2
230c230
<         CALL HOSKEEP(IJ,JJ)                                                      NAVYPB.230
---
>         CALL HOSKEEP(IJ,JJ,INEST)                                                07NOV00.1675
===================================================================
physics/pbl_sfc/bulk/blkpbl.F
diff -r3.0 -r3.4
11a12
> C     USE TGB AS TEMPERATURE, THGB AS THETA                           C          07NOV00.1676
38c39
<      5          KPBLM1(MIX), QGH(MIX),  TGDSA(MIX),  TGDSB(MIX)                  BLKPBL.38
---
>      5          KPBLM1(MIX),QGH(MIX),TGDSA(MIX),TGDSB(MIX),THGB(MIX)             07NOV00.1677
91,92c92
<         TGA(I,J)=TGA(I,J)*(100./PS1)**ROVCP                                      BLKPBL.91
<         TGB(I,J)=TGB(I,J)*(100./PS1)**ROVCP                                      BLKPBL.92
---
>         THGB(I)=TGB(I,J)*(100./PS1)**ROVCP                                       07NOV00.1678
139c139
<         DUM2(I)=TGB(I,J)-THX(I,KL)                                               BLKPBL.139
---
>         DUM2(I)=THGB(I)-THX(I,KL)                                                07NOV00.1679
275c275
<       CALL SLAB(DELTSM,J,INEST,THX,QX,FLHC,FLQC,PP3D)                            BLKPBL.275
---
>       CALL SLAB(DELTSM,J,INEST,THX,QX,FLHC,FLQC,PP3D,T3D,1,ILX)                  07NOV00.1680
471,477d470
< C-----CONVERT GROUND POTENTIAL TEMPERATURE TO TEMPERATURE:                       BLKPBL.471
< C                                                                                BLKPBL.472
<       DO 550 I=2,ILX                                                             BLKPBL.473
<         PS1=PSB(I,J)+PTOP+PP3D(I,J,KL)*0.001                                     BLKPBL.474
<         TGA(I,J)=TGA(I,J)*(PS1/100.)**ROVCP                                      BLKPBL.475
<         TGB(I,J)=TGB(I,J)*(PS1/100.)**ROVCP                                      BLKPBL.476
<   550 CONTINUE                                                                   BLKPBL.477
===================================================================
physics/pbl_sfc/gspbl/gspbl.F
diff -r3.7 -r3.13
15a16,17
> C     CHANGES:                                                        C          07NOV00.1681
> C     USE TGB AS TEMPERATURE, THGB AS THETA                           C          07NOV00.1682
50,52c52
< C 10. COMPUTE THE GROUND TEMPERATURE: CALL TO SLAB                               GSPBL.49
< C                                                                                GSPBL.50
< C 11. CALCULATE GAMMAG AND HOL FOR REGIME 4                                      GSPBL.51
---
> C 10. CALCULATE GAMMAG AND HOL FOR REGIME 4                                      07NOV00.1683
53a54,55
> C 11. COMPUTE THE GROUND TEMPERATURE: CALL TO SLAB                               07NOV00.1684
> C                                                                                07NOV00.1685
186c188
<      &     THXSV(MIX),                                                           25JAN00.580
---
>      &     THXSV(MIX),  THGB(MIX),                                               07NOV00.1686
189a192,212
> C     DECLARATIONS FOR IMPLICIT NONE                                             07NOV00.1687
> C                                                                                07NOV00.1688
>       INTEGER I,J,K,L,KK,MM,IN,KB,KE                                             07NOV00.1689
>       INTEGER IYY,JXX,KZZ,NST,KF                                                 07NOV00.1690
>       INTEGER ITKESAT,IDRS1,IDRS2,IDRS3,ILAMBDA,MITERING,IKBKC,MSTEPS            07NOV00.1691
>       INTEGER KTEMP1,KTEMP2,KTEMP,ICOUNT,NOVERMIN,INDSATUP,INDSATDW              07NOV00.1692
>       INTEGER INDTRANS,KLIM,IBGN,IEND,JBGN,JEND                                  07NOV00.1693
>       REAL QCMIN,XMITPAR,PL,THCON,TVCON,PS,E1,PS1,CELL,PRESB,FRACZ               07NOV00.1694
>       REAL DTTKE,PTKEMAX,PTKEFRACT,PTKEWEAK,PTKEZMIN,TKEBMAX,TKELIM              07NOV00.1695
>       REAL FRACT,ZAMX,TGBV,DTHVDZ,DTHVM,VCONV,FRCTN,THXFL,GOVTH,THVXFL           07NOV00.1696
>       REAL DEPTH,TKELMIN,XLMIN,XFR,FRACMINLIM,TKEMAXUP,TKEMAXDW,FRACMIN          07NOV00.1697
>       REAL ZUPP,ZDW,BETAW,BETAT,EXNER,EVAP,ALFAL,ABARL,BBARL,BETAL               07NOV00.1698
>       REAL BBTFL,BBWFL,XLMIN1,XLMIN2,XLMAX,XLSTAB,CZERO,FSUBL,TOP                07NOV00.1699
>       REAL TOP2,FSUB2,BOT,FSUB1,FSUB3,FSUB0                                      07NOV00.1700
>       REAL TAU1,TAU4,TAU6,TAU8,TAU9,WVAR,WBCVAR,TERM1,TERM2,TERM3                07NOV00.1701
>       REAL DENOM,TAU3,PSIX,USTM,DTG,SIGFGT,XMAVL,WSPDX,DELTSM,TSTAR              07NOV00.1702
>       REAL WSTAR,BUOYFL,XMOL,TERM4,TERM5,TERM6,BETAK,EES,QSAT,FRT                07NOV00.1703
>       REAL XLOVCPT,XLOVRT,ALFA1,BETA1,XLAMDA1,FACTTLFL,FACTQWFL,BUOFLUX          07NOV00.1704
>       REAL CHECK,FMULT,TBOVTH,ZL,XKMAXM,XKMAXH,XKMAX,XDTM,TGC,TSLC               07NOV00.1705
>       REAL TGBTMP                                                                07NOV00.1706
> C                                                                                07NOV00.1707
221,240d243
< C     DECLARATIONS FOR IMPLICIT NONE                                             25JAN00.584
< C                                                                                25JAN00.585
<       INTEGER I,J,K,L,KK,MM,IN,KB,KE                                             25JAN00.586
<       INTEGER IYY,JXX,KZZ,NST,KF                                                 25JAN00.587
<       INTEGER ITKESAT,IDRS1,IDRS2,IDRS3,ILAMBDA,MITERING,IKBKC,MSTEPS            25JAN00.588
<       INTEGER KTEMP1,KTEMP2,KTEMP,ICOUNT,NOVERMIN,INDSATUP,INDSATDW              25JAN00.589
<       INTEGER INDTRANS,KLIM,IBGN,IEND,JBGN,JEND                                  25JAN00.590
<       REAL QCMIN,XMITPAR,PL,THCON,TVCON,PS,E1,PS1,CELL,PRESB,FRACZ               25JAN00.591
<       REAL DTTKE,PTKEMAX,PTKEFRACT,PTKEWEAK,PTKEZMIN,TKEBMAX,TKELIM              25JAN00.592
<       REAL FRACT,ZAMX,TGBV,DTHVDZ,DTHVM,VCONV,FRCTN,THXFL,GOVTH,THVXFL           25JAN00.593
<       REAL DEPTH,TKELMIN,XLMIN,XFR,FRACMINLIM,TKEMAXUP,TKEMAXDW,FRACMIN          25JAN00.594
<       REAL ZUPP,ZDW,BETAW,BETAT,EXNER,EVAP,ALFAL,ABARL,BBARL,BETAL               25JAN00.595
<       REAL BBTFL,BBWFL,XLMIN1,XLMIN2,XLMAX,XLSTAB,CZERO,FSUBL,TOP                25JAN00.596
<       REAL TOP2,FSUB2,BOT,FSUB1,FSUB3,FSUB0                                      25JAN00.597
<       REAL TAU1,TAU4,TAU6,TAU8,TAU9,WVAR,WBCVAR,TERM1,TERM2,TERM3                25JAN00.598
<       REAL DENOM,TAU3,PSIX,USTM,DTG,SIGFGT,XMAVL,WSPDX,DELTSM,TSTAR              25JAN00.599
<       REAL WSTAR,BUOYFL,XMOL,TERM4,TERM5,TERM6,BETAK,EES,QSAT,FRT                25JAN00.600
<       REAL XLOVCPT,XLOVRT,ALFA1,BETA1,XLAMDA1,FACTTLFL,FACTQWFL,BUOFLUX          25JAN00.601
<       REAL CHECK,FMULT,TBOVTH,ZL,XKMAXM,XKMAXH,XKMAX,XDTM,TGC,TSLC               25JAN00.602
< C                                                                                25JAN00.603
289c292
<           MSTEPS=2                                                               GSPBL.259
---
>           MSTEPS=20                                                              07NOV00.1708
299c302
<           MSTEPS=2                                                               25JAN00.615
---
>           MSTEPS=20                                                              07NOV00.1709
381c384
<             IF(SCR3(I,K).GT.TO)THEN                                              GSPBL.332
---
>             IF(SCR3(I,K).GT.TO. OR. IICE.EQ.1)THEN                               07NOV00.1710
445c448
<         TGB(I,J)=TGB(I,J)*(100.0/PS1)**ROVCP                                     GSPBL.396
---
>         THGB(I)=TGB(I,J)*(100.0/PS1)**ROVCP                                      07NOV00.1711
447d449
<         TGA(I,J)=TGA(I,J)*(100.0/PS1)**ROVCP                                     GSPBL.398
731c733
<             TGBV=TGB(I,J)*(1.+XMOIST(IN)*EP1*QGG(I)*MAVAIL(I,J))                 GSPBL.682
---
>             TGBV=THGB(I)*(1.+XMOIST(IN)*EP1*QGG(I)*MAVAIL(I,J))                  07NOV00.1712
1466c1468
< C                                                                                GSPBL.1411
---
> C     WARNING: MOL IS NOT MOLIN LENGTH BUT RATHER KT*                            07NOV00.1713
1470c1472
<             DTG=THX(I,KL)-TGB(I,J)                                               GSPBL.1415
---
>             DTG=THX(I,KL)-THGB(I)                                                07NOV00.1714
1541c1543
<               IF(THX(I,KL).EQ.TGB(I,J))THEN                                      GSPBL.1476
---
>               IF(THX(I,KL).EQ.THGB(I))THEN                                       07NOV00.1715
1545c1547
<      +                  TGB(I,J))                                                GSPBL.1480
---
>      +                  THGB(I))                                                 07NOV00.1716
1567c1569
<               HFX(I,J)=FLHC(I)*(TGB(I,J)-THX(I,KL))                              GSPBL.1502
---
>               HFX(I,J)=FLHC(I)*(THGB(I)-THX(I,KL))                               07NOV00.1717
1583,1597d1584
< C                                                                                GSPBL.1518
< CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC         GSPBL.1519
< C                                                                                GSPBL.1520
< C                                                                                GSPBL.1521
< C 10. COMPUTE THE GROUND TEMPERATURE: CALL TO SLAB                               GSPBL.1522
< C                                                                                GSPBL.1523
<                                                                                  25JAN00.647
<           IF(ITGFLG(IN).EQ.1)THEN                                                GSPBL.1524
<             DELTSM=DTSTEP                                                        GSPBL.1525
< #ifndef MPP1                                                                     25JAN00.648
<             CALL SLAB(DELTSM,J,IN,THX,QX,FLHC,FLQC,PP3D)                         GSPBL.1526
< #else                                                                            25JAN00.649
<             CALL SLAB_COL(DELTSM,I,J,IN,THX,QX,FLHC,FLQC,PP3D)                   25JAN00.650
< #endif                                                                           25JAN00.651
<           ENDIF                                                                  GSPBL.1527
1605c1592
< C 11. CALCULATE GAMMAG AND HOL FOR REGIME 4                                      GSPBL.1535
---
> C 10. CALCULATE GAMMAG AND HOL FOR REGIME 4                                      07NOV00.1718
1616,1617c1603
<           IF(ISOIL.LE.1)THEN                                                     GSPBL.1546
<             TSTAR=(THVX(I,KL)-TGDSB(I)*(1.+XMOIST(IN)*EP1*QGG(I)*                GSPBL.1547
---
>             TSTAR=(THVX(I,KL)-THGB(I)*(1.+XMOIST(IN)*EP1*QGG(I)*                 07NOV00.1719
1626,1634d1611
<           ELSE                                                                   GSPBL.1556
<             BUOYFL=HFX(I,J)/(RHOX(I)*CPM(I,KL))+0.61*SCR3(I,KL)*QFX(I,J)         GSPBL.1557
<      +             /RHOX(I)                                                      GSPBL.1558
<             IF(BUOYFL.GT.0.0)THEN                                                GSPBL.1559
<               WSTAR=(G*PBL(I,J)*BUOYFL/THVX(I,KL))**(1./3.)                      GSPBL.1560
<             ELSE                                                                 GSPBL.1561
<               WSTAR=0.0                                                          GSPBL.1562
<             ENDIF                                                                GSPBL.1563
<           ENDIF                                                                  GSPBL.1564
1661a1639,1655
> C                                                                                07NOV00.1720
> CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC         07NOV00.1721
> C                                                                                07NOV00.1722
> C                                                                                07NOV00.1723
> C 11. COMPUTE THE GROUND TEMPERATURE: CALL TO SLAB                               07NOV00.1724
> C                                                                                07NOV00.1725
>         IF(ISOIL.LE.1)THEN                                                       07NOV00.1726
>                                                                                  07NOV00.1727
>           IF(ITGFLG(IN).EQ.1)THEN                                                07NOV00.1728
>             DELTSM=DTSTEP                                                        07NOV00.1729
> #ifndef MPP1                                                                     07NOV00.1730
>             CALL SLAB(DELTSM,J,IN,THX,QX,FLHC,FLQC,PP3D,T3D,1,ILX)               07NOV00.1731
> #else                                                                            07NOV00.1732
>             CALL SLAB_COL(DELTSM,I,J,IN,THX,QX,FLHC,FLQC,PP3D,T3D)               07NOV00.1733
> #endif                                                                           07NOV00.1734
>           ENDIF                                                                  07NOV00.1735
>         ENDIF                                                                    07NOV00.1736
1662a1657,1668
> C       THGB AND QGG ARE UPDATED AFTER USE FOR CALCULATING TSTAR                 07NOV00.1737
> C                                                                                07NOV00.1738
>       IF(IDRY(IN).NE.1)THEN                                                      07NOV00.1739
>           DO I=1,ILX                                                             07NOV00.1740
>             PS1=PSURFB(I)                                                        07NOV00.1741
>             THGB(I)=TGB(I,J)*(100.0/PS1)**ROVCP                                  07NOV00.1742
>             IF(IDRY(IN).NE.1)THEN                                                07NOV00.1743
>               E1=SVP1*EXP(SVP2*(TGB(I,J)-SVPT0)/(TGB(I,J)-SVP3))                 07NOV00.1744
>               QGG(I)=EP2*E1/(PS1-E1)                                             07NOV00.1745
>             ENDIF                                                                07NOV00.1746
>           ENDDO                                                                  07NOV00.1747
>       ENDIF                                                                      07NOV00.1748
2377,2384d2382
< C     CONVERT TG BACK TO TEMPERATURE (FROM POTENTIAL TEMPERATURE)                GSPBL.2281
< C                                                                                GSPBL.2282
<         DO I=1,ILX                                                               GSPBL.2283
<           PS1=PSURFB(I)                                                          GSPBL.2284
<           TGB(I,J)=TGB(I,J)*(PS1/100.)**ROVCP                                    GSPBL.2285
<           PS1=PSURFA(I)                                                          GSPBL.2286
<           TGA(I,J)=TGA(I,J)*(PS1/100.)**ROVCP                                    GSPBL.2287
<         ENDDO                                                                    GSPBL.2288
===================================================================
physics/pbl_sfc/hirpbl/hirpbl.F
diff -r3.1 -r3.7
57a58,59
> C          USE TGB AS A TEMPERATURE NOT THETA IN PBL                  C          07NOV00.1749
> C                                                                     C          07NOV00.1750
86c88
<      5             QGH(MIX),  TGDSA(MIX),  TGDSB(MIX),                           HIRPBL.86
---
>      5             QGH(MIX),  TGDSA(MIX),  TGDSB(MIX),   THGB(MIX),              07NOV00.1751
108c110
<       REAL      TSLDSB(MIXS,MLX)                                                 HIRPBL.108
---
>       REAL      TSLDSB(MIXS,MLX),PISFC(MIX)                                      07NOV00.1752
127c129
<                                                                                  HIRPBL.127
---
>       REAL    MITER0,DTMITE                                                      07NOV00.1753
137a140,141
>       DTMITE=25.                                                                 07NOV00.1754
>       MITER0=DTMIN*60./DTMITE+.99                                                07NOV00.1755
153,154c157,158
<         TGB(I,J)=TGB(I,J)*(100./PS(I))**ROVCP                                    HIRPBL.153
<         TGA(I,J)=TGA(I,J)*(100./PS(I))**ROVCP                                    HIRPBL.154
---
>         PISFC(I)=(PS(I)/100.)**ROVCP                                             07NOV00.1756
>         THGB(I)=TGB(I,J)/PISFC(I)                                                07NOV00.1757
395c399
<           TGBV=TGB(I,J)*(1.+XMOIST(IN)*EP1*QGH(I)*MAVAIL(I,J))                   HIRPBL.400
---
>           TGBV=THGB(I)*(1.+XMOIST(IN)*EP1*QGH(I)*MAVAIL(I,J))                    07NOV00.1758
524c528
<           DTG=THX(I,KL)-TGB(I,J)                                                 HIRPBL.529
---
>           DTG=THX(I,KL)-THGB(I)                                                  07NOV00.1759
579c583
<           DTTHX=ABS(THX(I,KL)-TGB(I,J))                                          HIRPBL.584
---
>           DTTHX=ABS(THX(I,KL)-THGB(I))                                           07NOV00.1760
581c585
<             FLHC(I)=CPM(I)*RHOX(I)*UST(I,J)*MOL(I,J)/(THX(I,KL)-TGB(I,J)         HIRPBL.586
---
>             FLHC(I)=CPM(I)*RHOX(I)*UST(I,J)*MOL(I,J)/(THX(I,KL)-THGB(I)          07NOV00.1761
586c590
< C     FLHC(I)=CPM(I)*RHOX(I)*UST(I,J)*MOL(I,J)/(THX(I,KL)-TGB(I,J))              HIRPBL.591
---
> C     FLHC(I)=CPM(I)*RHOX(I)*UST(I,J)*MOL(I,J)/(THX(I,KL)-THGB(I))               07NOV00.1762
606c610
<             HFX(I,J)=FLHC(I)*(TGB(I,J)-THX(I,KL))                                HIRPBL.611
---
>             HFX(I,J)=FLHC(I)*(THGB(I)-THX(I,KL))                                 07NOV00.1763
609c613
<             HFX(I,J)=FLHC(I)*(TGB(I,J)-THX(I,KL))                                HIRPBL.614
---
>             HFX(I,J)=FLHC(I)*(THGB(I)-THX(I,KL))                                 07NOV00.1764
649c653
<         CALL SLAB(DELTSM,J,IN,THX,QX,FLHC,FLQC,PP3D)                             HIRPBL.654
---
>         CALL SLAB(DELTSM,J,IN,THX,QX,FLHC,FLQC,PP3D,T3D,1,ILX)                   07NOV00.1765
651c655
<         CALL SLAB_COL(DELTSM,I,J,IN,THX,QX,FLHC,FLQC,PP3D)                       HIRPBL.656
---
>         CALL SLAB_COL(DELTSM,I,J,IN,THX,QX,FLHC,FLQC,PP3D,T3D)                   07NOV00.1766
653a658,660
>         DO I=1,ILX                                                               07NOV00.1767
>           THGB(I)=TGB(I,J)/PISFC(I)                                              07NOV00.1768
>         ENDDO                                                                    07NOV00.1769
744c751
<        PRINT *,' TGB ',TGB(I,J)                                                  HIRPBL.749
---
>        PRINT *,' TGB ',THGB(I)                                                   07NOV00.1770
1151,1154d1157
<       DO 885 I=1,ILX                                                             HIRPBL.1156
<         TGB(I,J)=TGB(I,J)*(PS(I)/100.)**ROVCP                                    HIRPBL.1157
<         TGA(I,J)=TGA(I,J)*(PS(I)/100.)**ROVCP                                    HIRPBL.1158
<   885 CONTINUE                                                                   HIRPBL.1159
===================================================================
physics/pbl_sfc/mrfpbl/Makefile
diff -r3.0 -r3.1
42,43c42,43
< mrfpbl.o: ../../../include/parame.incl ../../../include/rpstar.incl
< mrfpbl.o: ../../../include/varia.incl ../../../include/dusolve1.incl
---
> mrfpbl.o: ../../../include/parame.incl
> mrfpbl.o: ../../../include/varia.incl
45,49c45,47
< mrfpbl.o: ../../../include/pmoist.incl ../../../include/point3d.incl
< mrfpbl.o: ../../../include/point2d.incl ../../../include/various.incl
< mrfpbl.o: ../../../include/nonhyd.incl ../../../include/nhcnst.incl
< mrfpbl.o: ../../../include/soil.incl ../../../include/soilcnst.incl
< mrfpbl.o: ../../../include/addrcu.incl ../../../include/pbltb.incl
---
> mrfpbl.o: ../../../include/various.incl
> mrfpbl.o: ../../../include/soilcnst.incl
> mrfpbl.o: ../../../include/pbltb.incl
50a49
> mrfpbl.o: ../../../include/defines.incl
51a51
> tridi2.o: ../../../include/defines.incl
===================================================================
physics/pbl_sfc/mrfpbl/mrfpbl.F
diff -r3.2 -r3.13
0a1
> #include <defines.incl>                                                          07NOV00.1771
2c3,15
<      1 QNC3D,U3DTEN,V3DTEN,QC3DTEN,T3DTEN,QV3DTEN,QI3DTEN,QNC3DTEN)              MRFPBL.2
---
>      +   QNC3D,U3DTEN,V3DTEN,QC3DTEN,T3DTEN,QV3DTEN,QI3DTEN,QNC3DTEN,            07NOV00.1772
>      +   TGA,TGB,PSB,RPSB,XLV,                                                   07NOV00.1773
>      +   TA2,QA2,UA10,VA10,                                                      07NOV00.1774
>      +   SVP1,SVP2,SVP3,SVPT0,EP1,EP2,ZNT,XLAND,UST,                             07NOV00.1775
>      +   MAVAIL,                                                                 07NOV00.1776
>      +   REGIME,HOL,PBL,ZOL,MOL,QFX,HFX,RV,TSLA,TSLB,T0,PPB,                     07NOV00.1777
>      +   EMISS,GLW,GSW,TMN,CAPG,SNOWC,XLAT,XLONG,                                07NOV00.1778
>      +   RAINP,RAINC,RAINNC,                                                     07NOV00.1779
>      +   PRW,ALB,SHC,THC,SATBRT,                                                 07NOV00.1780
>      +   XMOIST,                                                                 07NOV00.1781
>      +   INTERIOR_MASK ,                                                         07NOV00.1782
>      +   IST,IEN)                                                                07NOV00.1783
>       IMPLICIT NONE                                                              07NOV00.1784
40a54,55
> C          USE TGB AS A TEMPERATURE NOT THETA IN PBL                  C          07NOV00.1785
> C                                                                     C          07NOV00.1786
42a58
> #ifndef VECTOR                                                                   07NOV00.1787
44c60,79
< #     include <defines.incl>                                                     MRFPBL.44
---
> #endif                                                                           07NOV00.1788
> C                                                                                07NOV00.1789
> C Defines for IMPLICIT NONE                                                      07NOV00.1790
>       INTEGER I,J,K,KK,L                                                         07NOV00.1791
>       INTEGER IYY,JXX                                                            07NOV00.1792
>       INTEGER KLPBL,IPP,ICUT,IN                                                  07NOV00.1793
>       INTEGER NZOL,NZOL10,NZOL2                                                  07NOV00.1794
>       INTEGER JBGN,JEND                                                          07NOV00.1795
>       REAL RLAM,PRMIN,PRMAX,XKZMIN,XKZMAX,RIMIN                                  07NOV00.1796
>       REAL BRCR,CFAC,PFAC,SFCFRAC,CKZ,ZFMIN,APHI5                                07NOV00.1797
>       REAL APHI16,GAMCRT,GAMCRQ,XKA,PRT,CONT,CONQ,CONW                           07NOV00.1798
>       REAL PL,THCON,TVCON,E1,CELL,DTSTEP,ZL,TGBV,DTHVDZ                          07NOV00.1799
>       REAL DTHVM,VCONV,ZOL10,ZOL2,RZOL,RZOL10,RZOL2                              07NOV00.1800
>       REAL DTG,PSIX,PSIX10,PSIT,PSIQ,PSIT2,PSIQ2,USTM                            07NOV00.1801
>       REAL DTTHX,DELTSM,DT4,RDT,SPDK2,BRINT,FM,FH,HOL1                           07NOV00.1802
>       REAL GAMFAC,VPERT,PRNUM,ZFAC,XKZO,SS,RI,QMEAN,TMEAN                        07NOV00.1803
>       REAL ALPH,CHI,ZK,RL2,DK,SRI,DTODSD,DTODSU,DSIG                             07NOV00.1804
>       REAL RDZ,DSDZT,DSDZQ,DSDZ2                                                 07NOV00.1805
>       REAL TTEND,QTEND,UTEND,VTEND,QCTEND,QITEND                                 07NOV00.1806
>       REAL TGC,TSLC,XXT                                                          07NOV00.1807
55d89
< #     include <rpstar.incl>                                                      MRFPBL.55
57c91
<       DIMENSION U3D(MIX,MJX,MKX),V3D(MIX,MJX,MKX),T3D(MIX,MJX,MKX),              MRFPBL.57
---
>       REAL      U3D(MIX,MJX,MKX),V3D(MIX,MJX,MKX),T3D(MIX,MJX,MKX),              07NOV00.1808
62a97
>       REAL      INTERIOR_MASK(MIX,MJX)                                           07NOV00.1809
64c99
<       DIMENSION    UX(MIX,MKX),    VX(MIX,MKX),    QX(MIX,MKX),                  MRFPBL.64
---
>       REAL         UX(MIX,MKX),    VX(MIX,MKX),    QX(MIX,MKX),                  07NOV00.1810
71c106
<       DIMENSION QIX(MIXM,MKXM),QITNP(MIXM,MKXM),                                 MRFPBL.71
---
>       REAL      QIX(MIXM,MKXM),QITNP(MIXM,MKXM),                                 07NOV00.1811
73c108
<       DIMENSION QNCX(MIXM,MKXM),QNCNP(MIXM,MKXM),FQNC(MIXM,MKXM),                MRFPBL.73
---
>       REAL      QNCX(MIXM,MKXM),QNCNP(MIXM,MKXM),FQNC(MIXM,MKXM),                07NOV00.1812
75c110
<       DIMENSION    ZQ(MIX,KXP1), UTNP(MIX,MKX), VTNP(MIX,MKX)                    MRFPBL.75
---
>       REAL         ZQ(MIX,KXP1), UTNP(MIX,MKX), VTNP(MIX,MKX)                    07NOV00.1813
77c112
<       DIMENSION   RHOX(MIX), GOVRTH(MIX), GZ1OZ0(MIX),                           MRFPBL.77
---
>       REAL        RHOX(MIX), GOVRTH(MIX), GZ1OZ0(MIX),                           07NOV00.1814
80c115
<      4            VXSV(MIX),   QXSV(MIX),  QCXSV(MIX),   KPBL(MIX),              MRFPBL.80
---
>      4            VXSV(MIX),   QXSV(MIX),  QCXSV(MIX),   THGB(MIX),              07NOV00.1815
82c117,118
<       DIMENSION XKZMKL(MIX)                                                      MRFPBL.82
---
>       REAL      XKZMKL(MIX)                                                      07NOV00.1816
>       INTEGER     KPBL(MIX)                                                      07NOV00.1817
85d120
< #     include <dusolve1.incl>                                                    MRFPBL.85
88,89d122
< #     include <pmoist.incl>                                                      MRFPBL.88
< #     include <point2d.incl>                                                     MRFPBL.89
91,92d123
< #     include <nhcnst.incl>                                                      MRFPBL.91
< #     include <soil.incl>                                                        MRFPBL.92
94d124
< #     include <addrcu.incl>                                                      MRFPBL.94
95a126,147
>       REAL XMOIST(*)                                                             07NOV00.1818
>       REAL XLV,SVP1,SVP2,SVP3,SVPT0,RV,EP1,EP2                                   07NOV00.1819
>       REAL TGA(MIX,MJX),TGB(MIX,MJX),HOL(MIX,MJX),ZOL(MIX,MJX)                   07NOV00.1820
>       REAL TA2(MIX,MJX),QA2(MIX,MJX),UA10(MIX,MJX),VA10(MIX,MJX)                 07NOV00.1821
>       REAL ZNT(MIX,MJX),XLAND(MIX,MJX),UST(MIX,MJX),MAVAIL(MIX,MJX)              07NOV00.1822
>       REAL PBL(MIX,MJX),QFX(MIX,MJX),HFX(MIX,MJX),MOL(MIX,MJX)                   07NOV00.1823
>       REAL PSB(MIX,MJX),RPSB(MIX,MJX),REGIME(MIX,MJX)                            07NOV00.1824
>       REAL TSLA(MIX,MJX,MLX),TSLB(MIX,MJX,MLX)                                   07NOV00.1825
>                                                                                  07NOV00.1826
>       REAL EMISS(MIX,MJX)                                                        07NOV00.1827
>       REAL GLW(MIX,MJX),GSW(MIX,MJX),TMN(MIX,MJX)                                07NOV00.1828
>       REAL CAPG(MIX,MJX),SNOWC(MIX,MJX)                                          07NOV00.1829
>       REAL XLAT(MIX,MJX),XLONG(MIX,MJX)                                          07NOV00.1830
>       REAL RAINP(MIX,MJX), RAINC(MIX,MJX), RAINNC(MIX,MJX)                       07NOV00.1831
>       REAL PRW(MIX,MJX),ALB(MIX,MJX)                                             07NOV00.1832
>       REAL SHC(MIX,MJX),THC(MIX,MJX)                                             07NOV00.1833
>       REAL SATBRT(MIX,MJX)                                                       07NOV00.1834
>                                                                                  07NOV00.1835
>       REAL T0(MIX,MJX,MKX),PPB(MIX,MJX,MKX)                                      07NOV00.1836
> C Local                                                                          07NOV00.1837
>       REAL SCR3(MIX,MKX),SCR4(MIX,MKX),DUM1(MIX)                                 07NOV00.1838
>       INTEGER IST,IEN                                                            07NOV00.1839
99c151
<       DIMENSION ZL1(MIX),XKZM(MIX,MKX),XKZH(MIX,MKX),                            MRFPBL.99
---
>       REAL      ZL1(MIX),XKZM(MIX,MKX),XKZH(MIX,MKX),                            07NOV00.1840
103c155
<      4  DUSFC(MIX),DVSFC(MIX),DTSFC(MIX),DQSFC(MIX)                              MRFPBL.103
---
>      4  DUSFC(MIX),DVSFC(MIX),DTSFC(MIX),DQSFC(MIX),PISFC(MIX)                   07NOV00.1841
105,106c157,158
<       DIMENSION CHS(MIX),CHFF(MIX),PREC(MIX),chs2(mix)                           MRFPBL.105
<       dimension gz10oz0(mix),gz2oz0(mix),psih10(mix),psih2(mix),                 MRFPBL.106
---
>       REAL      CHS(MIX),CHFF(MIX),PREC(MIX),chs2(mix)                           07NOV00.1842
>       REAL      gz10oz0(mix),gz2oz0(mix),psih10(mix),psih2(mix),                 07NOV00.1843
113,114c165,166
<       DIMENSION CPM(MIX)                                                         MRFPBL.113
<       DIMENSION TSLDSB(MIXS,MLX)                                                 MRFPBL.114
---
>       REAL      CPM(MIX)                                                         07NOV00.1844
>       REAL      TSLDSB(MIXS,MLX)                                                 07NOV00.1845
127c179
<       DO I=1,ILX                                                                 MRFPBL.127
---
>       DO I=IST,IEN                                                               07NOV00.1846
136c188
<       DO 5 I=1,ILX                                                               MRFPBL.136
---
>       DO 5 I=IST,IEN                                                             07NOV00.1847
139,140c191,192
<         TGB(I,J)=TGB(I,J)*(100./PS(I))**ROVCP                                    MRFPBL.139
<         TGA(I,J)=TGA(I,J)*(100./PS(I))**ROVCP                                    MRFPBL.140
---
>         PISFC(I)=(PS(I)/100.)**ROVCP                                             07NOV00.1848
>         THGB(I)=TGB(I,J)/PISFC(I)                                                07NOV00.1849
155c207,208
<         DO 24 I=1,ILX                                                            MRFPBL.155
---
>         DO 24 I=IST,IEN                                                          07NOV00.1850
> #ifndef VECTOR                                                                   07NOV00.1851
159a213,217
> #else                                                                            07NOV00.1852
> C UX and VX are averaged in caller for vector version                            07NOV00.1853
>           UX(I,K)=U3D(I,J,K)                                                     07NOV00.1854
>           VX(I,K)=V3D(I,J,K)                                                     07NOV00.1855
> #endif                                                                           07NOV00.1856
168c226
<         DO 30 I=1,ILX                                                            MRFPBL.168
---
>         DO 30 I=IST,IEN                                                          07NOV00.1857
180c238
<       DO 40 I=1,ILX                                                              MRFPBL.180
---
>       DO 40 I=IST,IEN                                                            07NOV00.1858
189c247
<         DO 50 I=1,ILX                                                            MRFPBL.189
---
>         DO 50 I=IST,IEN                                                          07NOV00.1859
197c255
<       DO 60 I=1,ILX                                                              MRFPBL.197
---
>       DO 60 I=IST,IEN                                                            07NOV00.1860
205c263
<         DO 70 I=1,ILX                                                            MRFPBL.205
---
>         DO 70 I=IST,IEN                                                          07NOV00.1861
219c277
<       DO 90 I=1,ILX                                                              MRFPBL.219
---
>       DO 90 I=IST,IEN                                                            07NOV00.1862
227c285
<         DO 100 I=1,ILX                                                           MRFPBL.227
---
>         DO 100 I=IST,IEN                                                         07NOV00.1863
231c289
<         DO 110 I=1,ILX                                                           MRFPBL.231
---
>         DO 110 I=IST,IEN                                                         07NOV00.1864
239c297
<         DO 120 I=1,ILX                                                           MRFPBL.239
---
>         DO 120 I=IST,IEN                                                         07NOV00.1865
246c304
<         DO 130 I=1,ILX                                                           MRFPBL.246
---
>         DO 130 I=IST,IEN                                                         07NOV00.1866
252c310
<       DO 160 I=1,ILX                                                             MRFPBL.252
---
>       DO 160 I=IST,IEN                                                           07NOV00.1867
256c314
<       DO 170 I=1,ILX                                                             MRFPBL.256
---
>       DO 170 I=IST,IEN                                                           07NOV00.1868
269c327
<         DO 220 I=1,ILX                                                           MRFPBL.269
---
>         DO 220 I=IST,IEN                                                         07NOV00.1869
278c336
<         DO 230 I=1,ILX                                                           MRFPBL.278
---
>         DO 230 I=IST,IEN                                                         07NOV00.1870
285c343
<         DO 240 I=1,ILX                                                           MRFPBL.285
---
>         DO 240 I=IST,IEN                                                         07NOV00.1871
298c356
<       DO 260 I=1,ILX                                                             MRFPBL.298
---
>       DO 260 I=IST,IEN                                                           07NOV00.1872
309c367
<         TGBV=TGB(I,J)*(1.+XMOIST(IN)*EP1*QGH(I)*MAVAIL(I,J))                     MRFPBL.309
---
>         TGBV=THGB(I)*(1.+XMOIST(IN)*EP1*QGH(I)*MAVAIL(I,J))                      07NOV00.1873
344c402
<       DO 320 I=1,ILX                                                             MRFPBL.344
---
>       DO 320 I=IST,IEN                                                           07NOV00.1874
454,455c512,513
<       DO 330 I=1,ILX                                                             MRFPBL.454
<         DTG=THX(I,KL)-TGB(I,J)                                                   MRFPBL.455
---
>       DO 330 I=IST,IEN                                                           07NOV00.1875
>         DTG=THX(I,KL)-THGB(I)                                                    07NOV00.1876
470c528
<         TH2(I)=TGB(I,J)+DTG*PSIT2/PSIT                                           MRFPBL.470
---
>         TH2(I)=THGB(I)+DTG*PSIT2/PSIT                                            07NOV00.1877
471a530,534
> C       LATER Q2 WILL BE OVERWRITTEN FOR LAND POINTS IN SURFCE                   07NOV00.1878
>         TA2(I,J) = TH2(I)*(PS(I)/100.)**ROVCP                                    07NOV00.1879
>         QA2(I,J) = Q2(I)                                                         07NOV00.1880
>         UA10(I,J) = U10(I)                                                       07NOV00.1881
>         VA10(I,J) = V10(I)                                                       07NOV00.1882
486a550,555
> #ifdef VECTOR                                                                    07NOV00.1883
>      +        ,SVP1,SVP2,SVP3,SVPT0,EP2,                                         07NOV00.1884
>      +         PSB,GLW,GSW,CAPG,MAVAIL,XLAT,XLONG,                               07NOV00.1885
>      +         PRW,ALB,SHC,THC,                                                  07NOV00.1886
>      +         IST,IEN                                                           07NOV00.1887
> #endif                                                                           07NOV00.1888
491c560
<       DO 350 I=1,ILX                                                             MRFPBL.491
---
>       DO 350 I=IST,IEN                                                           07NOV00.1889
501c570
<       DO 360 I=1,ILX                                                             MRFPBL.501
---
>       DO 360 I=IST,IEN                                                           07NOV00.1890
512c581
<         DTTHX=ABS(THX(I,KL)-TGB(I,J))                                            MRFPBL.512
---
>         DTTHX=ABS(THX(I,KL)-THGB(I))                                             07NOV00.1891
514c583
<           FLHC(I)=CPM(I)*RHOX(I)*UST(I,J)*MOL(I,J)/(THX(I,KL)-TGB(I,J))          MRFPBL.514
---
>           FLHC(I)=CPM(I)*RHOX(I)*UST(I,J)*MOL(I,J)/(THX(I,KL)-THGB(I))           07NOV00.1892
518c587
< C     FLHC(I)=CPM(I)*RHOX(I)*UST(I,J)*MOL(I,J)/(THX(I,KL)-TGB(I,J))              MRFPBL.518
---
> C     FLHC(I)=CPM(I)*RHOX(I)*UST(I,J)*MOL(I,J)/(THX(I,KL)-THGB(I))               07NOV00.1893
527c596
<         DO 370 I=1,ILX                                                           MRFPBL.527
---
>         DO 370 I=IST,IEN                                                         07NOV00.1894
529a599
> #ifndef VECTOR                                                                   07NOV00.1895
531a602
> #endif                                                                           07NOV00.1896
538c609
<         DO 400 I=1,ILX                                                           MRFPBL.538
---
>         DO 400 I=IST,IEN                                                         07NOV00.1897
540c611
<             HFX(I,J)=FLHC(I)*(TGB(I,J)-THX(I,KL))                                MRFPBL.540
---
>             HFX(I,J)=FLHC(I)*(THGB(I)-THX(I,KL))                                 07NOV00.1898
542c613
<             HFX(I,J)=FLHC(I)*(TGB(I,J)-THX(I,KL))                                MRFPBL.542
---
>             HFX(I,J)=FLHC(I)*(THGB(I)-THX(I,KL))                                 07NOV00.1899
551c622,630
<         CALL SLAB(DELTSM,J,IN,THX,QX,FLHC,FLQC,PP3D)                             MRFPBL.551
---
> #ifndef VECTOR                                                                   07NOV00.1900
>         CALL SLAB(DELTSM,J,IN,THX,QX,FLHC,FLQC,PP3D,T3D,IST,IEN)                 07NOV00.1901
> #else                                                                            07NOV00.1902
>         CALL SLAB(DELTSM,J,IN,THX,QX,FLHC,FLQC,PP3D,T3D,                         07NOV00.1903
>      +            XLV,PPB,RPSB,TSLB,SVP1,SVP2,SVP3,SVPT0,EP2,                    07NOV00.1904
>      +            XLAND,PSB,TGB,EMISS,GLW,GSW,TMN,HFX,QFX,CAPG,SNOWC,            07NOV00.1905
>      +            SATBRT,RAINP,THC,MAVAIL,ALB,                                   07NOV00.1906
>      +            XMOIST,IST,IEN )                                               07NOV00.1907
> #endif                                                                           07NOV00.1908
555,556c634,636
< #ifdef SOIL2                                                                     MRFPBL.555
<         DO 405 I=1,ILX                                                           MRFPBL.556
---
> #ifdef SOIL2                                                                     07NOV00.1909
> #  ifndef VECTOR                                                                 07NOV00.1910
>         DO 405 I=IST,IEN                                                         07NOV00.1911
580c660,661
<         CALL SURFCE(J,ZA,QX,THX,TGB,TGDSA,CHS,CHFF,CPM,PREC,HFX,QFX,QGH,         MRFPBL.580
---
>         CALL SURFCE(J,ZA,QX,THX,TGB,THGB,TGDSA,CHS,CHFF,CPM,PREC,                07NOV00.1912
>      +       HFX,QFX,QGH,                                                        07NOV00.1913
582a664,670
>         DO 406 I=IST,IEN                                                         07NOV00.1914
>           QA2(I,J) = Q2(I)                                                       07NOV00.1915
>   406   CONTINUE                                                                 07NOV00.1916
> #  else                                                                          07NOV00.1917
>   --- VECTOR OPTIMIZATION OF MRF NOT IMPLEMENTED FOR ISOIL=2 ---                 07NOV00.1918
>   --- COMPILER ERROR GENERATED ---                                               07NOV00.1919
> #  endif                                                                         07NOV00.1920
589c677
<       DO 420 I=1,ILX                                                             MRFPBL.589
---
>       DO 420 I=IST,IEN                                                           07NOV00.1921
603c691
<       DO I=1,ILX                                                                 MRFPBL.603
---
>       DO I=IST,IEN                                                               07NOV00.1922
620c708
<       DO I=1,ILX                                                                 MRFPBL.620
---
>       DO I=IST,IEN                                                               07NOV00.1923
625c713
<         DO I=1,ILX                                                               MRFPBL.625
---
>         DO I=IST,IEN                                                             07NOV00.1924
636c724
<       DO I=1,ILX                                                                 MRFPBL.636
---
>       DO I=IST,IEN                                                               07NOV00.1925
649c737
<       DO I=1,ILX                                                                 MRFPBL.649
---
>       DO I=IST,IEN                                                               07NOV00.1926
676c764
<       DO I=1,ILX                                                                 MRFPBL.676
---
>       DO I=IST,IEN                                                               07NOV00.1927
692c780
<       DO I=1,ILX                                                                 MRFPBL.692
---
>       DO I=IST,IEN                                                               07NOV00.1928
701c789
<       DO I=1,ILX                                                                 MRFPBL.701
---
>       DO I=IST,IEN                                                               07NOV00.1929
708c796
<         DO I=1,ILX                                                               MRFPBL.708
---
>         DO I=IST,IEN                                                             07NOV00.1930
719c807
<       DO I=1,ILX                                                                 MRFPBL.719
---
>       DO I=IST,IEN                                                               07NOV00.1931
738c826
<         DO I=1,ILX                                                               MRFPBL.738
---
>         DO I=IST,IEN                                                             07NOV00.1932
758c846
<         DO I=1,ILX                                                               MRFPBL.758
---
>         DO I=IST,IEN                                                             07NOV00.1933
804c892
<       DO I=1,ILX                                                                 MRFPBL.804
---
>       DO I=IST,IEN                                                               07NOV00.1934
815c903
<         DO I=1,ILX                                                               MRFPBL.815
---
>         DO I=IST,IEN                                                             07NOV00.1935
838c926
<       CALL TRIDI2(ILX,KL,AL,AD,AU,A1,A2,AU,A1,A2)                                MRFPBL.838
---
>       CALL TRIDI2(IST,IEN,KL,AL,AD,AU,A1,A2,AU,A1,A2)                            07NOV00.1936
844c932
<         DO I=1,ILX                                                               MRFPBL.844
---
>         DO I=IST,IEN                                                             07NOV00.1937
856c944
<       DO I=1,ILX                                                                 MRFPBL.856
---
>       DO I=IST,IEN                                                               07NOV00.1938
867c955
<         DO I=1,ILX                                                               MRFPBL.867
---
>         DO I=IST,IEN                                                             07NOV00.1939
881c969
<       CALL TRIDI2(ILX,KL,AL,AD,AU,A1,A2,AU,A1,A2)                                MRFPBL.881
---
>       CALL TRIDI2(IST,IEN,KL,AL,AD,AU,A1,A2,AU,A1,A2)                            07NOV00.1940
887c975
<         DO I=1,ILX                                                               MRFPBL.887
---
>         DO I=IST,IEN                                                             07NOV00.1941
900c988
<       DO I=1,ILX                                                                 MRFPBL.900
---
>       DO I=IST,IEN                                                               07NOV00.1942
911c999
<         DO I=1,ILX                                                               MRFPBL.911
---
>         DO I=IST,IEN                                                             07NOV00.1943
925c1013
<       CALL TRIDI2(ILX,KL,AL,AD,AU,A1,A2,AU,A1,A2)                                MRFPBL.925
---
>       CALL TRIDI2(IST,IEN,KL,AL,AD,AU,A1,A2,AU,A1,A2)                            07NOV00.1944
931c1019
<         DO I=1,ILX                                                               MRFPBL.931
---
>         DO I=IST,IEN                                                             07NOV00.1945
946c1034
<         DO 780 I=1,ILX                                                           MRFPBL.946
---
>         DO 780 I=IST,IEN                                                         07NOV00.1946
955c1043
<         DO 790 I=1,ILX                                                           MRFPBL.955
---
>         DO 790 I=IST,IEN                                                         07NOV00.1947
962c1050
<         DO 800 I=1,ILX                                                           MRFPBL.962
---
>         DO 800 I=IST,IEN                                                         07NOV00.1948
978c1066
<         DO 820 I=1,ILX                                                           MRFPBL.978
---
>         DO 820 I=IST,IEN                                                         07NOV00.1949
984d1071
< C 825 IF(J.EQ.1.AND.IN.GT.1)GOTO 860                                             MRFPBL.984
986,998d1072
<       JBGN=3                                                                     MRFPBL.986
<       JEND=JLXM-1                                                                MRFPBL.987
<       IF(IN.EQ.1)THEN                                                            MRFPBL.988
<         JBGN=2                                                                   MRFPBL.989
<         JEND=JLXM                                                                MRFPBL.990
<       ENDIF                                                                      MRFPBL.991
<       IF(J.LT.JBGN.OR.J.GT.JEND)GOTO 860                                         MRFPBL.992
<       IBGN=3                                                                     MRFPBL.993
<       IEND=ILXM-1                                                                MRFPBL.994
<       IF(IN.EQ.1)THEN                                                            MRFPBL.995
<         IBGN=2                                                                   MRFPBL.996
<         IEND=ILXM                                                                MRFPBL.997
<       ENDIF                                                                      MRFPBL.998
1000,1001c1074,1077
<         DO 830 I=IBGN,IEND                                                       MRFPBL.1000
<           T3DTEN(I,J,K)=T3DTEN(I,J,K)+TTNP(I,K)                                  MRFPBL.1001
---
>         DO 830 I=IST,IEN                                                         07NOV00.1950
>           IF ( INTERIOR_MASK(I,J) .EQ. 1. ) THEN                                 07NOV00.1951
>             T3DTEN(I,J,K)=T3DTEN(I,J,K)+TTNP(I,K)                                07NOV00.1952
>           ENDIF                                                                  07NOV00.1953
1007,1008c1083,1086
<         DO 840 I=IBGN,IEND                                                       MRFPBL.1007
<           QV3DTEN(I,J,K)=QV3DTEN(I,J,K)+QTNP(I,K)                                MRFPBL.1008
---
>         DO 840 I=IST,IEN                                                         07NOV00.1954
>           IF ( INTERIOR_MASK(I,J) .EQ. 1. ) THEN                                 07NOV00.1955
>             QV3DTEN(I,J,K)=QV3DTEN(I,J,K)+QTNP(I,K)                              07NOV00.1956
>           ENDIF                                                                  07NOV00.1957
1014,1017c1092,1097
<         DO 850 I=IBGN,IEND                                                       MRFPBL.1014
<           QC3DTEN(I,J,K)=QC3DTEN(I,J,K)+QCTNP(I,K)                               MRFPBL.1015
<           IF(IICE.EQ.1)QI3DTEN(I,J,K)=QI3DTEN(I,J,K)+QITNP(I,K)                  MRFPBL.1016
<           IF(IICEG.EQ.1)QNC3DTEN(I,J,K)=QNC3DTEN(I,J,K)+QNCNP(I,K)               MRFPBL.1017
---
>         DO 850 I=IST,IEN                                                         07NOV00.1958
>           IF ( INTERIOR_MASK(I,J) .EQ. 1. ) THEN                                 07NOV00.1959
>             QC3DTEN(I,J,K)=QC3DTEN(I,J,K)+QCTNP(I,K)                             07NOV00.1960
>             IF(IICE.EQ.1)QI3DTEN(I,J,K)=QI3DTEN(I,J,K)+QITNP(I,K)                07NOV00.1961
>             IF(IICEG.EQ.1)QNC3DTEN(I,J,K)=QNC3DTEN(I,J,K)+QNCNP(I,K)             07NOV00.1962
>           ENDIF                                                                  07NOV00.1963
1025c1105
<       DO 870 I=1,ILX                                                             MRFPBL.1025
---
>       DO 870 I=IST,IEN                                                           07NOV00.1964
1038,1041d1117
<       DO 885 I=1,ILX                                                             MRFPBL.1038
<         TGB(I,J)=TGB(I,J)*(PS(I)/100.)**ROVCP                                    MRFPBL.1039
<         TGA(I,J)=TGA(I,J)*(PS(I)/100.)**ROVCP                                    MRFPBL.1040
<   885 CONTINUE                                                                   MRFPBL.1041
1055c1131
<       DO 950 I=1,ILX                                                             MRFPBL.1055
---
>       DO 950 I=IST,IEN                                                           07NOV00.1965
===================================================================
physics/pbl_sfc/mrfpbl/tridi2.F
diff -r3.0 -r3.2
1c1,3
<       SUBROUTINE TRIDI2(L,N,CL,CM,CU,R1,R2,AU,A1,A2)                             TRIDI2.1
---
> #include <defines.incl>                                                          07NOV00.1966
>       SUBROUTINE TRIDI2(LS,L,N,CL,CM,CU,R1,R2,AU,A1,A2)                          07NOV00.1967
>       IMPLICIT NONE                                                              07NOV00.1968
3c5,6
<       DIMENSION CL(MIX,2:MKX),CM(MIX,MKX),CU(MIX,MKX-1),R1(MIX,MKX),             TRIDI2.3
---
>       INTEGER LS,L,N,I,K                                                         07NOV00.1969
>       REAL      CL(MIX,2:MKX),CM(MIX,MKX),CU(MIX,MKX-1),R1(MIX,MKX),             07NOV00.1970
4a8,14
>       REAL FK                                                                    07NOV00.1971
> #ifdef VECTOR                                                                    07NOV00.1972
> C These are used for the vector version, even though you cannot see them         07NOV00.1973
>       INTEGER IST,IEN                                                            07NOV00.1974
>       IST=LS                                                                     07NOV00.1975
>       IEN=L                                                                      07NOV00.1976
> #endif                                                                           07NOV00.1977
6c16
<       DO I=1,L                                                                   TRIDI2.6
---
>       DO I=LS,L                                                                  07NOV00.1978
13c23
<         DO I=1,L                                                                 TRIDI2.13
---
>         DO I=LS,L                                                                07NOV00.1979
20c30
<       DO I=1,L                                                                   TRIDI2.20
---
>       DO I=LS,L                                                                  07NOV00.1980
26c36
<         DO I=1,L                                                                 TRIDI2.26
---
>         DO I=LS,L                                                                07NOV00.1981
===================================================================
physics/pbl_sfc/myepbl/myepbl.F
diff -r3.0 -r3.4
49c49,50
<      -     FLHC(MIX),FLQC(MIX),QGH(MIX),UZ0HI(MIX),VZ0HI(MIX)                    MYEPBL.49
---
>      -     APES(MIX),                                                            07NOV00.1982
>      -     FLHC(MIX),FLQC(MIX),QGH(MIX),UZ0HI(MIX),VZ0HI(MIX),THGB(MIX)          07NOV00.1983
103c104
<         APES=(100./PSURF)**ROVCP                                                 MYEPBL.103
---
>         APES(I)=(100./PSURF)**ROVCP                                              07NOV00.1984
107,109c108,109
<         TGB(I,J)=TGB(I,J)*APES                                                   MYEPBL.107
<         TGA(I,J)=TGA(I,J)*APES                                                   MYEPBL.108
<         THS=TGB(I,J)                                                             MYEPBL.109
---
>         THGB(I)=TGB(I,J)*APES(I)                                                 07NOV00.1985
>         THS=THGB(I)                                                              07NOV00.1986
165,166c165,166
<       CALL SFCRAD(IYY,JXX,J,IN,T3D,QV3D,PP3D)                                    MYEPBL.165
<       CALL SLAB(DELTSM,J,IN,THX,QX,FLHC,FLQC,PP3D)                               MYEPBL.166
---
>       CALL SFCRAD(IYY,JXX,J,IN,T3D,QV3D,PP3D)                                    07NOV00.1987
>       CALL SLAB(DELTSM,J,IN,THX,QX,FLHC,FLQC,PP3D,T3D,1,ILX)                     07NOV00.1988
171c171,172
<         THS=TGB(I,J)                                                             MYEPBL.171
---
>         THGB(I)=TGB(I,J)*APES(I)                                                 07NOV00.1989
>         THS=THGB(I)                                                              07NOV00.1990
247,251d247
<       DO I=1,ILX                                                                 MYEPBL.247
<         PS1=PSB(I,J)+PTOP+PP3D(I,J,KL)*0.001                                     MYEPBL.248
<         TGB(I,J)=TGB(I,J)*(PS1/100.)**ROVCP                                      MYEPBL.249
<         TGA(I,J)=TGA(I,J)*(PS1/100.)**ROVCP                                      MYEPBL.250
<       ENDDO                                                                      MYEPBL.251
===================================================================
physics/pbl_sfc/osusfc/srt.F
diff -r3.4 -r3.6
28a29
>       REAL KDT                                                                   07NOV00.1991
===================================================================
physics/pbl_sfc/osusfc/surfce.F
diff -r3.5 -r3.9
1,2c1,2
<       SUBROUTINE SURFCE(J,ZA,QX,THX,TGB,TGDSA,CHS,CHFF,CPM,PREC,HFX,QFX          SURFCE.1
<      &,QGH,GSW,GLW,TX,UX,VX,ALB,PP3D,PSB,RHOX,TMN,XLAND,qcx                      SURFCE.2
---
>       SUBROUTINE SURFCE(J,ZA,QX,THX,TGB,THGB,TGDSA,CHS,CHFF,CPM,PREC,            07NOV00.1992
>      &HFX,QFX,QGH,GSW,GLW,TX,UX,VX,ALB,PP3D,PSB,RHOX,TMN,XLAND,qcx               07NOV00.1993
15a16
> C   00-05-09  USE THGB FOR THETA TGB FOR T (DUDHIA)                              07NOV00.1994
64c65
<      &,TGB(MIX,MJX),TGDSA(MIX),PREC(MIX),QGH(MIX),CHS2(MIX)                      SURFCE.55
---
>      &,TGB(MIX,MJX),THGB(MIX),TGDSA(MIX),PREC(MIX),QGH(MIX),CHS2(MIX)            07NOV00.1995
139c140
<           HFX(I,J)=CHFF(I)*(TGB(I,J)-THX(I,KL))                                  SURFCE.119
---
>           HFX(I,J)=CHFF(I)*(THGB(I)-THX(I,KL))                                   07NOV00.1996
151c152
<           SFCPRS=(A(KL)*PSB(I,J)+PTOP+PP3D(I,J,KL)*0.001)*1.E3                   SURFCE.131
---
>           SFCPRS=(PSB(I,J)+PTOP+PP3D(I,J,KL)*0.001)*1.E3                         07NOV00.1997
239c240
<           TGB(I,J)=T1K*(1.E5/SFCPRS)**ROVCP                                      SURFCE.219
---
>           TGB(I,J)=T1K                                                           07NOV00.1998
241a243
>           Q2(I)=Q2M                                                              07NOV00.1999
===================================================================
physics/pbl_sfc/util/Makefile
diff -r3.0 -r3.1
44a45,46
> slab.o: ../../../include/landuse.incl ../../../include/bucket.incl
> slab.o: ../../../include/defines.incl
===================================================================
physics/pbl_sfc/util/slab.F
diff -r3.3 -r3.15
0a1
> #include <defines.incl>                                                          07NOV00.2000
2c3,11
<       SUBROUTINE SLAB(DELTSM,J,INEST,THX,QX,FLHC,FLQC,PP3D)                      SLAB.2
---
> #  ifndef VECTOR                                                                 07NOV00.2001
>       SUBROUTINE SLAB(DELTSM,J,INEST,THX,QX,FLHC,FLQC,PP3D,T3D,IST,IEN)          07NOV00.2002
> #  else                                                                          07NOV00.2003
>       SUBROUTINE SLAB(DELTSM,J,INEST,THX,QX,FLHC,FLQC,PP3D,T3D,                  07NOV00.2004
>      +         XLV,PPB,RPSB,TSLB,SVP1,SVP2,SVP3,SVPT0,EP2,                       07NOV00.2005
>      +         XLAND,PSB,TGB,EMISS,GLW,GSW,TMN,HFX,QFX,CAPG,SNOWC,               07NOV00.2006
>      +         SATBRT,RAINP,THC,MAVAIL,ALB,                                      07NOV00.2007
>      +         XMOIST,IST,IEN )                                                  07NOV00.2008
> #  endif                                                                         07NOV00.2009
4c13
<       SUBROUTINE SLAB_COL(DELTSM,I,J,INEST,THX,QX,FLHC,FLQC,PP3D)                SLAB.4
---
>       SUBROUTINE SLAB_COL(DELTSM,I,J,INEST,THX,QX,FLHC,FLQC,PP3D,T3D)            07NOV00.2010
5a15
>       IMPLICIT NONE                                                              07NOV00.2011
21a32,36
> C          USE TGB AS A TEMPERATURE NOT THETA IN PBL                  C          07NOV00.2012
> C                                                                     C          07NOV00.2013
> C          V3.4: BUCKET MODEL                                         C          07NOV00.2014
> C                                                                     C          07NOV00.2015
> C                                                                     C          07NOV00.2016
26a42
> #ifndef VECTOR                                                                   07NOV00.2017
29a46,60
> #     include <point2d.incl>                                                     07NOV00.2018
> #     include <soil.incl>                                                        07NOV00.2019
> #else                                                                            07NOV00.2020
>       REAL      PPB(MIX,MJX,MKX),TSLB(MIX,MJX,MLX)                               07NOV00.2021
>       REAL      XMOIST(*),SVP1,SVP2,SVP3,SVPT0,EP2,XLV                           07NOV00.2022
>       REAL      RPSB(MIX,MJX)                                                    07NOV00.2023
>       REAL XLAND(MIX,MJX),PSB(MIX,MJX),TGB(MIX,MJX),EMISS(MIX,MJX)               07NOV00.2024
>       REAL GLW(MIX,MJX),GSW(MIX,MJX),TMN(MIX,MJX),HFX(MIX,MJX)                   07NOV00.2025
>       REAL QFX(MIX,MJX),CAPG(MIX,MJX),SNOWC(MIX,MJX)                             07NOV00.2026
> C new with 3.4                                                                   07NOV00.2027
>       REAL SATBRT(MIX,MJX),RAINP(MIX,MJX)    ! IN                                07NOV00.2028
>       REAL THC(MIX,MJX),MAVAIL(MIX,MJX)      ! OUT                               07NOV00.2029
>       REAL ALB(MIX,MJX)                      ! INOUT                             07NOV00.2030
> #endif                                                                           07NOV00.2031
>       INTEGER   IST,IEN                                                          07NOV00.2032
31,32c62,63
<       DIMENSION DTHGDT(MIX),TG0(MIX),THTMN(MIX),XLD1(MIX)                        SLAB.31
<       DIMENSION TSCVN(MIX)                                                       SLAB.32
---
>       REAL      DTHGDT(MIX),TG0(MIX),THTMN(MIX),XLD1(MIX)                        07NOV00.2033
>       REAL      TSCVN(MIX),PISFC(MIX)                                            07NOV00.2034
34c65
<       DIMENSION OLTG(MIX), UPFLUX(MIX), HM(MIX), RNET(MIX), XINET(MIX),          SLAB.34
---
>       REAL      UPFLUX(MIX), HM(MIX), RNET(MIX), XINET(MIX),                     07NOV00.2035
36,38c67,69
<       DIMENSION THX(MIX,MKX), QX(MIX,MKX), FLHC(MIX), FLQC(MIX)                  SLAB.36
<       DIMENSION PP3D(MIX,MJX,MKX)                                                SLAB.37
< #     include <point2d.incl>                                                     SLAB.38
---
>       REAL      THX(MIX,MKX), QX(MIX,MKX), FLHC(MIX), FLQC(MIX)                  07NOV00.2036
>       REAL      PP3D(MIX,MJX,MKX), T3D(MIX,MJX,MKX)                              07NOV00.2037
>       REAL      FLUX(MIX,MLX),DTSDT(MIX)                                         07NOV00.2038
40d70
< #     include <soil.incl>                                                        SLAB.40
42c72
<       DIMENSION FLUX(MIX,MLX),DTSDT(MIX)                                         SLAB.42
---
> #ifndef VECTOR                                                                   07NOV00.2039
43a74,80
> #endif                                                                           07NOV00.2040
>       LOGICAL PRINTWARN                                                          07NOV00.2041
> C                                                                                07NOV00.2042
> C IMPLICIT NONE DECLARATIONS                                                     07NOV00.2043
>       REAL XLDCOL,RNSOIL,THG,ESG,QSG,HFXT,QFXT,TGBX,XXT,PS,DELTSM                07NOV00.2044
>       INTEGER I,J,K,L,INEST                                                      07NOV00.2045
>       INTEGER NSOIL,NSOILI,ITSOIL,IPW                                            07NOV00.2046
44a82,86
> C DATA USED IN BUCKET MODEL                                                      07NOV00.2047
> #     include <landuse.incl>                                                     07NOV00.2048
> #     include <bucket.incl>                                                      07NOV00.2049
>       INTEGER LLUS                                                               07NOV00.2050
>       REAL    PRECIP, TSFC, RUNOFF, XMM, EVAP, AVAIL, TIMFAC                     07NOV00.2051
53c95
<       DO 10 I=1,ILX                                                              SLAB.53
---
>       DO 10 I=IST,IEN                                                            07NOV00.2052
64c106
<       DO 20 I=1,ILX                                                              SLAB.64
---
>       DO 20 I=IST,IEN                                                            07NOV00.2053
72,74c114,115
< C-----CONVERT 'TGB(THETAG)' TO 'TG' FOR 'IUP' CALCULATION ....                   SLAB.72
< C       IF WE ARE USING THE BLACKADAR MULTI-LEVEL (HIGH-RESOLUTION)              SLAB.73
< C       PBL MODEL                                                                SLAB.74
---
> C     TGB IS NOW ASSUMED TO CONTAIN TEMPERATURE ON INPUT AND                     07NOV00.2054
> C     OUTPUT FOR SLAB                                                            07NOV00.2055
76c117
<       DO 50 I=1,ILX                                                              SLAB.76
---
>       DO 50 I=IST,IEN                                                            07NOV00.2056
79c120,121
<         TG0(I)=TGB(I,J)*(PS*0.01)**ROVCP                                         SLAB.79
---
>         PISFC(I)=(PS*0.01)**ROVCP                                                07NOV00.2057
>         TG0(I)=TGB(I,J)                                                          07NOV00.2058
84,85c126
<       IF(ISOIL.EQ.1)NSOIL=1                                                      SLAB.84
<       DO 70 I=1,ILX                                                              SLAB.85
---
>       DO 70 I=IST,IEN                                                            07NOV00.2059
87d127
<         OLTG(I)=TGB(I,J)                                                         SLAB.87
96,98d135
< C     DETERMINE SOIL TIMESTEPS PER DELTSM FOR I-SLICE, NSOIL                     SLAB.100
<           NSOILI=1+IFIX(4*DIFSL/DZS(1)*DELTSM/DZS(1))                            25JAN00.682
<           NSOIL=MAX0(NSOIL,NSOILI)                                               SLAB.102
102a140
>         NSOIL=1+IFIX(SOILFAC*4*DIFSL/DZS(1)*DELTSM/DZS(1))                       07NOV00.2060
109c147,148
<             DO I=1,ILX                                                           SLAB.113
---
>             PRINTWARN=.FALSE.                                                    07NOV00.2061
>             DO I=IST,IEN                                                         07NOV00.2062
112,113d150
<                 PS1=((PSB(I,J)+PTOP+PP3D(I,J,KL)*0.001)*0.01)                    SLAB.116
<      -              **ROVCP                                                      SLAB.117
115c152
<                 THG=TSLB(I,J,1)/PS1                                              SLAB.119
---
>                 THG=TSLB(I,J,1)/PISFC(I)                                         07NOV00.2063
131a169,172
>               IF(TSLB(I,J,L).GT.400..OR.TSLB(I,J,L).LT.100.)THEN                 07NOV00.2064
>                 PRINTWARN=.TRUE.                                                 07NOV00.2065
>                 IPW=I                                                            07NOV00.2066
>               ENDIF                                                              07NOV00.2067
144a186,189
>             IF(PRINTWARN)THEN                                                    07NOV00.2068
>               PRINT *,'WARNING IN SLAB: SOIL TEMP AT ',IPW,J,L,'=',              07NOV00.2069
>      -                 TSLB(IPW,J,L)                                             07NOV00.2070
>             ENDIF                                                                07NOV00.2071
149c194
<       DO 80 I=1,ILX                                                              SLAB.153
---
>       DO 80 I=IST,IEN                                                            07NOV00.2072
151,153c196
<         TGBX=TG0(I)+DELTSM*DTHGDT(I)                                             SLAB.155
<         PS1=PSB(I,J)+PTOP+PP3D(I,J,KL)*0.001                                     SLAB.156
<         TGB(I,J)=TGBX*(100./PS1)**ROVCP                                          SLAB.157
---
>         TGB(I,J)=TG0(I)+DELTSM*DTHGDT(I)                                         07NOV00.2073
160c203
<       DO 85 I=1,ILX                                                              SLAB.164
---
>       DO 85 I=IST,IEN                                                            07NOV00.2074
162,163c205
<         PS1=((PSB(I,J)+PTOP+PP3D(I,J,KL)*0.001)*0.01)**ROVCP                     SLAB.166
<         TSCVN(I)=TGB(I,J)*PS1                                                    SLAB.167
---
>         TSCVN(I)=TGB(I,J)                                                        07NOV00.2075
169c211
<         TGB(I,J)=TSCVN(I)/PS1                                                    SLAB.173
---
>         TGB(I,J)=TSCVN(I)                                                        07NOV00.2076
180a223,314
> C                                                                                07NOV00.2077
> C UPDATE MOISTURE AVAILABILITY                                                   07NOV00.2078
> C                                                                                07NOV00.2079
>       IF (IMOIAV(INEST).GE.1) THEN                                               07NOV00.2080
>         TIMFAC = 1.                                                              07NOV00.2081
>         IF (IBLTYP(INEST).EQ.2) TIMFAC = DELTSM/DT                               07NOV00.2082
> C                                                                                07NOV00.2083
>         DO 200 I=IST,IEN                                                         07NOV00.2084
> C                                                                                07NOV00.2085
> C ONLY COMPUTE MAVAIL OVER LAND AND WHERE THERE IS NO SNOW COVER                 07NOV00.2086
> C                                                                                07NOV00.2087
>           IF (XLAND(I,J)-1.5 .LT. 0. .AND. SNOWC(I,J) .LE. 0.) THEN              07NOV00.2088
>             LLUS = SATBRT(I,J)                                                   07NOV00.2089
> C                                                                                07NOV00.2090
> C IF IT'S PERMANENT ICE, DON'T CHANGE IT                                         07NOV00.2091
> C                                                                                07NOV00.2092
>             IF (LLUS .NE. ISICE) THEN                                            07NOV00.2093
> C                                                                                07NOV00.2094
> C RAIN TENDENCY IN CM IS IN ARRAY RAINP FROM SOLVE, ADJUSTED FOR                 07NOV00.2095
> C      MITER LOOP FOR BLACKADAR SCHEME                                           07NOV00.2096
> C                                                                                07NOV00.2097
>             PRECIP = RAINP(I,J) * TIMFAC                                         07NOV00.2098
> C                                                                                07NOV00.2099
> C IF WE'VE ACCUMULATED A MM OF PRECIP (1 CM OF SNOW) AND IT'S                    07NOV00.2100
> C    COLD, PUT DOWN A SNOW COVER...                                              07NOV00.2101
> C                                                                                07NOV00.2102
>             TSFC = (T3D(I,J,KL)-273.16)*9./5. + 32.                              07NOV00.2103
>             IF (TSFC .LE. 28. .AND. RAINP(I,J) .GT. 0.1) THEN                    07NOV00.2104
> C                                                                                07NOV00.2105
> C    CHANGE THE ALBEDO, ETC. TO ACCOUNT FOR SNOW                                 07NOV00.2106
> C                                                                                07NOV00.2107
>               SNOWC(I,J) = 1.                                                    07NOV00.2108
>               THC(I,J)=.05                                                       07NOV00.2109
>               EMISS(I,J)=.95                                                     07NOV00.2110
>               MAVAIL(I,J)=.95                                                    07NOV00.2111
>               ALB(I,J)=ALB(I,J)+SCFX(LLUS)*ALB(I,J)                              07NOV00.2112
> C             WRITE(6,*) 'SET SNOW COVER AT I = ',I,' J = ',J                    07NOV00.2113
>               GO TO 210                                                          07NOV00.2114
>             ENDIF                                                                07NOV00.2115
> C                                                                                07NOV00.2116
> C RUNOFF CODE:                                                                   07NOV00.2117
> C FOR URBAN AND DESERT AREAS, THE FRACTION SHOULD BE HIGHER. FOR MARSHES,        07NOV00.2118
> C    IT COULD BE LOWER. FOR LOW RAIN RATES, NOTHING RUNS OFF. FOR HIGH           07NOV00.2119
> C    RAIN RATES, MUCH OF IT RUNS OFF. FOR DRY GROUND NOT MUCH RUNS OFF,          07NOV00.2120
> C    FOR SOAKED GROUND, ALL OF IT RUNS OFF.                                      07NOV00.2121
> C    BUT CURRENTLY, THE RUNOFF FACTOR IS SET TO 0.5 FOR ALL LANDUSE TYPES.       07NOV00.2122
> C                                                                                07NOV00.2123
>             RUNOFF = 0.5 * PRECIP                                                07NOV00.2124
> C                                                                                07NOV00.2125
> C EVAPORATION ( CM PER CM**2 PER TIMESTEP)                                       07NOV00.2126
> C                                                                                07NOV00.2127
>             EVAP = (QFX(I,J)*1000./10000.*0.5*DT) * ERATE(LLUS)                  07NOV00.2128
> C                                                                                07NOV00.2129
> C THE MODEL IS EVAPORATING TOO MUCH. CUT THE EVAP IN HALF. JFB 5/30/99           07NOV00.2130
> C                                                                                07NOV00.2131
> C           EVAP = EVAP * .5                                                     07NOV00.2132
> C                                                                                07NOV00.2133
> C CALCULATE THE MOISTURE AVAILABILITY INCREMENT                                  07NOV00.2134
> C                                                                                07NOV00.2135
>             XMM = .25 * (PRECIP - EVAP - RUNOFF)                                 07NOV00.2136
> C                                                                                07NOV00.2137
> C         IF (I .EQ. 15 .AND. J .EQ. 22) THEN                                    07NOV00.2138
> C         IF (XTIME .GT. 180. .AND. XTIME .LT. 720 .AND.                         07NOV00.2139
> C    &        XMM .GT. 1.E-3 .AND. J.GE.15 .AND. I.LE.25) THEN                   07NOV00.2140
> C           WRITE(6,*) 'I = ',I,' J = ',J,' P = ', PRECIP                        07NOV00.2141
> C           WRITE(6,*) 'R = ',RUNOFF,' E = ',EVAP,' QFX = ',QFX(I,J)             07NOV00.2142
> C           WRITE(6,*) 'OLD MAVAIL = ',MAVAIL(I,J)                               07NOV00.2143
> C         ENDIF                                                                  07NOV00.2144
> C         ENDIF                                                                  07NOV00.2145
> C                                                                                07NOV00.2146
>             AVAIL = MAVAIL(I,J) + XMM                                            07NOV00.2147
> C                                                                                07NOV00.2148
> C RESTRICT THE MAVAIL TO LIMITS THAT DEPEND ON THE LAND USE CATEGORY.            07NOV00.2149
> C                                                                                07NOV00.2150
>             MAVAIL(I,J) = AMIN1(AVAIL,MAMAX(LLUS))                               07NOV00.2151
>             MAVAIL(I,J) = AMAX1(MAVAIL(I,J),MAMIN(LLUS))                         07NOV00.2152
> C                                                                                07NOV00.2153
> C         IF (I .EQ. 15 .AND. J .EQ. 22) THEN                                    07NOV00.2154
> C         IF (XTIME .GT. 180. .AND. XTIME .LT. 720 .AND.                         07NOV00.2155
> C    &        XMM .GT. 1.E-3 .AND. J.GE.15 .AND. I.LE.25) THEN                   07NOV00.2156
> C           WRITE(6,*) 'NEW MAVAIL = ',MAVAIL(I,J)                               07NOV00.2157
> C           WRITE(6,*) 'LLUS = ',LLUS,' MIN = ',MAMIN(LLUS),                     07NOV00.2158
> C    & ' MAX = ',MAMAX(LLUS)                                                     07NOV00.2159
> C         ENDIF                                                                  07NOV00.2160
> C         ENDIF                                                                  07NOV00.2161
> C                                                                                07NOV00.2162
>             END IF                                                               07NOV00.2163
>           END IF                                                                 07NOV00.2164
>   210   CONTINUE                                                                 07NOV00.2165
>   200   CONTINUE                                                                 07NOV00.2166
>                                                                                  07NOV00.2167
>       END IF                                                                     07NOV00.2168
183d316
<                                                                                  SLAB.187
===================================================================
physics/radiation/ccm2/colmod.F
diff -r3.0 -r3.2
5c5
<      -                  T3D,QV3D,PP3D)                                           COLMOD.5
---
>      -                  FIRTP,SABTP,T3D,QV3D,PP3D)                               07NOV00.2169
68c68
<      $     SABTP(IPLOND),      ! TOTAL COLUMN ABSORBED SOLAR FLUX                COLMOD.68
---
>      $     SABTP(IPLOND),      ! TOP OUTWARD SOLAR FLUX                          07NOV00.2170
76c76
<       REAL FIRTP(IPLOND),      ! NET OUTGOING LW FLX AT MODEL TOP                COLMOD.76
---
>       REAL FIRTP(IPLOND),      ! UPWARD LW FLX AT MODEL TOP                      07NOV00.2171
===================================================================
physics/radiation/ccm2/radclw.F
diff -r3.2 -r3.4
56c56
<      $     FIRTP(IPLOND),           ! NET OUTGOING FLUX                          RADCLW.56
---
>      $     FIRTP(IPLOND),           ! UPWARD LW FLX AT MODEL TOP                 07NOV00.2172
476c476
<         FIRTP(I)=FUL(I,1)-FDL(I,1)                                               RADCLW.474
---
>         FIRTP(I)=FUL(I,1)                                                        07NOV00.2173
===================================================================
physics/radiation/ccm2/radcsw.F
diff -r3.0 -r3.3
65c65
<      $     SABTP(IPLOND),     ! TOTAL COLUMN ABSORBED SOLAR FLUX                 RADCSW.65
---
>      $     SABTP(IPLOND),     ! TOP OUTWARD SOLAR FLUX                           07NOV00.2174
431c431,433
<           SOLIN(I)=SCON*ECCF*COSZRS(I)                                           RADCSW.431
---
> C***          SOLIN(I)=SCON*ECCF*COSZRS(I)                                       07NOV00.2175
> C***    USE SOLAR CONSTANT FROM SOLAR1 ROUTINE                                   07NOV00.2176
>           SOLIN(I)=SOLCON*1.E3*COSZRS(I)                                         07NOV00.2177
704c706
<             SABTP(I)=SABTP(I)+SOLFLX(I)*(FLUXDN(I,0)-FLUXUP(I,0))                RADCSW.704
---
>             SABTP(I)=SABTP(I)+SOLFLX(I)*FLUXUP(I,0)                              07NOV00.2178
===================================================================
physics/radiation/ccm2/radctl.F
diff -r3.0 -r3.2
86c86
<      $     SABTP(IPLOND),      ! TOTAL COLUMN ABSORBED SOLAR FLUX                RADCTL.86
---
>      $     SABTP(IPLOND),      ! TOP OUTWARD SOLAR FLUX                          07NOV00.2179
94c94
<       REAL FIRTP(IPLOND),      ! NET OUTGOING LW FLX AT MODEL TOP                RADCTL.94
---
>       REAL FIRTP(IPLOND),      ! UPWARD LW FLX AT MODEL TOP                      07NOV00.2180
===================================================================
physics/radiation/ccm2/radout.F
diff -r3.0 -r3.2
33c33
<      $     SABTP(IPLOND),     ! TOTAL COLUMN ABSORBED SOLAR FLUX                 RADOUT.33
---
>      $     SABTP(IPLOND),     ! TOP OUTWARD SOLAR FLUX                           07NOV00.2181
38c38
<      $     FIRTP(IPLOND),     ! NET UP FLUX TOP OF MODEL (UP-DWN FLX)            RADOUT.38
---
>      $     FIRTP(IPLOND),     ! UPWARD LW FLX AT MODEL TOP                       07NOV00.2182
===================================================================
physics/radiation/cloud/lwrad.F
diff -r3.2 -r3.5
1c1
<       SUBROUTINE LWRAD(J,RTTEN,PSA,GLW,XLAT,XLONG,TGA,EMISS,                     LWRAD.1
---
>       SUBROUTINE LWRAD(J,RTTEN,PSA,GLW,OLW,XLAT,XLONG,TGA,EMISS,                 07NOV00.2183
17c17
<       DIMENSION PSA(MIX,MJX),GLW(MIX,MJX),TGA(MIX,MJX),                          LWRAD.17
---
>       DIMENSION PSA(MIX,MJX),GLW(MIX,MJX),OLW(MIX,MJX),TGA(MIX,MJX),             07NOV00.2184
122c122
<           QV(I,J,K)=AMAX1(QV(I,J,K),1.0E-6)                                      LWRAD.121
---
>           QVTMP=AMAX1(QV(I,J,K),1.0E-6)                                          07NOV00.2185
124,125c124,125
<           XWVP(I,K)=RO(I,K)*QV(I,J,K)*DZ(I,K)*PPREF**0.86                        LWRAD.123
<           XWVEP(I,K)=RO(I,K)*QV(I,J,K)*QV(I,J,K)*DZ(I,K)*PPREF/0.622             LWRAD.124
---
>           XWVP(I,K)=RO(I,K)*QVTMP*DZ(I,K)*PPREF**0.86                            07NOV00.2186
>           XWVEP(I,K)=RO(I,K)*QVTMP*QVTMP*DZ(I,K)*PPREF/0.622                     07NOV00.2187
344a345
>         OLW(I,J)=FUP(I,1)                                                        07NOV00.2188
===================================================================
physics/radiation/cloud/swrad.F
diff -r3.0 -r3.2
1c1
<       SUBROUTINE SWRAD(J,RTTEN,PSA,GSW,XLAT,XLONG,ALB,                           SWRAD.1
---
>       SUBROUTINE SWRAD(J,RTTEN,PSA,GSW,OSW,XLAT,XLONG,ALB,                       07NOV00.2189
21c21
<       DIMENSION PSA(MIX,MJX),GSW(MIX,MJX),                                       SWRAD.21
---
>       DIMENSION PSA(MIX,MJX),GSW(MIX,MJX),OSW(MIX,MJX),                          07NOV00.2190
47a48
>         OSW(I,J)=0.0                                                             07NOV00.2191
179a181
>           OSW(I,J)=OSW(I,J)+SDOWN(K)*(XALB+XSCA)*0.01                            07NOV00.2192
184a187
>         OSW(I,J)=OSW(I,J)+ALB(I,J)*SDOWN(KXP1)                                   07NOV00.2193
===================================================================
physics/radiation/rrtm/mm5atm.F
diff -r3.3 -r3.4
86,87d85
< C CRAY                                                                           MM5ATM.86
< CDIR$ TASKCOMMON SURFACE,PROFILE,SPECIES,XSEC,CLOUDDAT                           MM5ATM.87
===================================================================
physics/radiation/rrtm/rrtm.F
diff -r3.2 -r3.5
37,38c37,38
<       SUBROUTINE RRTM(J,ILX,CLDFRA,INEST,GLW,RTTEN,T3D,QV3D,QC3D,QR3D            RRTM.37
<      +           ,QI3D,QNI3D,QG3D,PP3D,PSA,TGA,EMISS)                            RRTM.38
---
>       SUBROUTINE RRTM(J,ILX,CLDFRA,INEST,GLW,OLW,RTTEN,T3D,QV3D,QC3D             07NOV00.2194
>      +           ,QR3D,QI3D,QNI3D,QG3D,PP3D,PSA,TGA,EMISS)                       07NOV00.2195
52c52,53
<       DIMENSION CLDFRA(MIX-1,MKX), GLW(MIX,MJX), RTTEN(MIX,MJX,MKX)              RRTM.52
---
>       DIMENSION CLDFRA(MIX-1,MKX), GLW(MIX,MJX), OLW(MIX,MJX),                   07NOV00.2196
>      &           RTTEN(MIX,MJX,MKX)                                              07NOV00.2197
61c62,63
<       DIMENSION CLDFRA(MIX,MKX), GLW(MIX,MJX), RTTEN(MIX,MJX,MKX)                RRTM.61
---
>       DIMENSION CLDFRA(MIX,MKX), GLW(MIX,MJX), OLW(MIX,MJX),                     07NOV00.2198
>      &           RTTEN(MIX,MJX,MKX)                                              07NOV00.2199
133,135d134
< C CRAY                                                                           RRTM.133
< CDIR$ TASKCOMMON PROFILE,OUTRRTM,CLOUDDAT,TBLINDX,SP,CLRFLX,CLDFLG               RRTM.134
< CDIR$ TASKCOMMON OUTCLR,SURFACE                                                  RRTM.135
243a243
>            OLW(I,J) = TOTUFLUX(NLAYERS)                                          07NOV00.2200
===================================================================
physics/radiation/rrtm/rrtm_gasabs.F
diff -r3.1 -r3.2
48,49d47
< C CRAY                                                                           RRTM_GASABS.48
< CDIR$ TASKCOMMON TAUS,PROFILE,TBLINDX                                            RRTM_GASABS.49
===================================================================
physics/radiation/rrtm/rrtm_init.F
diff -r3.2 -r3.5
43a44,48
> C                                                                                07NOV00.2201
>       EXTERNAL DM_IONODE                                                         07NOV00.2202
>       LOGICAL DM_IONODE                                                          07NOV00.2203
>       INTEGER INUNIT                                                             07NOV00.2204
> C                                                                                07NOV00.2205
46a52,58
> C                                                                                07NOV00.2206
>       INUNIT = 20                                                                07NOV00.2207
>       IF (DM_IONODE()) THEN                                                      07NOV00.2208
>         OPEN(INUNIT,FILE='RRTM_DATA',                                            07NOV00.2209
>      &       FORM='UNFORMATTED',STATUS='OLD',ERR=9010)                           07NOV00.2210
>         PRINT *, 'OPEN RRTM DATA FILE FOR INITIALIZATION'                        07NOV00.2211
>       ENDIF                                                                      07NOV00.2212
162a175,176
>                                                                                  07NOV00.2213
>       CLOSE (INUNIT)                                                             07NOV00.2214
164a179,180
> 9010  PRINT *,'ERROR OPENING RRTM DATA FILE FROM UNIT ', INUNIT                  07NOV00.2215
>       STOP 'STOP 9010 IN RRTMINIT'                                               07NOV00.2216
===================================================================
physics/radiation/rrtm/rrtm_rtrn.F
diff -r3.1 -r3.2
110,112d109
< C CRAY                                                                           RRTM_RTRN.110
< CDIR$ TASKCOMMON PROFILE,SURFACE,CLOUDDAT,CLDFLG,SP,TBLINDX,OUTRRTM              RRTM_RTRN.111
< CDIR$ TASKCOMMON OUTCLR,CLRFLX                                                   RRTM_RTRN.112
===================================================================
physics/radiation/rrtm/rrtm_k_g.F
diff -r3.1 -r3.5
(Note: about 46000 lines are removed and replaced by binary data file)
===================================================================
physics/radiation/rrtm/rrtm_setcoef.F
diff -r3.1 -r3.4
2c2
<       SUBROUTINE SETCOEF(ii,jj)                                                  RRTM_SETCOEF.2
---
>       SUBROUTINE SETCOEF                                                         07NOV00.2467
36,37d35
< C CRAY                                                                           RRTM_SETCOEF.36
< CDIR$ TASKCOMMON PROFILE,SPECIES,PROFDATA,INTFAC,INTIND,SELF,FOREIGN             RRTM_SETCOEF.37
===================================================================
physics/radiation/rrtm/rrtm_taumol.F
diff -r3.2 -r3.5
157,158d156
< C CRAY                                                                           RRTM_TAUMOL.157
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,FOREIGN,SP             RRTM_TAUMOL.158
244,246d241
< C CRAY                                                                           RRTM_TAUMOL.244
< CDIR$ TASKCOMMON TAUS,PROFILE,SPECIES,PROFDATA,INTFAC,INTIND,SELF                RRTM_TAUMOL.245
< CDIR$ TASKCOMMON FOREIGN,SP                                                      RRTM_TAUMOL.246
372,373d366
< C CRAY                                                                           RRTM_TAUMOL.372
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,FOREIGN,SP             RRTM_TAUMOL.373
572,573d564
< C CRAY                                                                           RRTM_TAUMOL.572
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,SP                     RRTM_TAUMOL.573
711,712d701
< C CRAY                                                                           RRTM_TAUMOL.711
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,XSEC,INTFAC,INTIND,SELF,SP                RRTM_TAUMOL.712
841,842d829
< C CRAY                                                                           RRTM_TAUMOL.841
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,XSEC,INTFAC,INTIND,SELF,SP                RRTM_TAUMOL.842
924,925d910
< C CRAY                                                                           RRTM_TAUMOL.924
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,SP                     RRTM_TAUMOL.925
997c982
< *******************************************************************************  RRTM_TAUMOL.997
---
> C******************************************************************************  07NOV00.2468
1035,1036d1019
< C CRAY                                                                           RRTM_TAUMOL.1035
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,XSEC,INTFAC,INTIND,SELF,SP                RRTM_TAUMOL.1036
1182,1183d1164
< C CRAY                                                                           RRTM_TAUMOL.1182
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,SP                     RRTM_TAUMOL.1183
1305c1286
< *******************************************************************************  RRTM_TAUMOL.1305
---
> C******************************************************************************  07NOV00.2469
1337,1338d1317
< C CRAY                                                                           RRTM_TAUMOL.1337
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SP                          RRTM_TAUMOL.1338
1380c1359
< *******************************************************************************  RRTM_TAUMOL.1380
---
> C******************************************************************************  07NOV00.2470
1414,1415d1392
< C CRAY                                                                           RRTM_TAUMOL.1414
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,SP                     RRTM_TAUMOL.1415
1496,1497d1472
< C CRAY                                                                           RRTM_TAUMOL.1496
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,SP                     RRTM_TAUMOL.1497
1596,1597d1570
< C CRAY                                                                           RRTM_TAUMOL.1596
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,SP                     RRTM_TAUMOL.1597
1659c1632
< *******************************************************************************  RRTM_TAUMOL.1659
---
> C******************************************************************************  07NOV00.2471
1693,1694d1665
< C CRAY                                                                           RRTM_TAUMOL.1693
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,SP                     RRTM_TAUMOL.1694
1775,1776d1745
< C CRAY                                                                           RRTM_TAUMOL.1775
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,SP                     RRTM_TAUMOL.1776
1872,1873d1840
< C CRAY                                                                           RRTM_TAUMOL.1872
< CDIR$ TASKCOMMON TAUS,PROFILE,PROFDATA,INTFAC,INTIND,SELF,SP                     RRTM_TAUMOL.1873
===================================================================
physics/radiation/sfc/Makefile
diff -r3.0 -r3.1
47c47
< sfcrad.o: ../../../include/parame.incl ../../../include/rpstar.incl
---
> sfcrad.o: ../../../include/parame.incl
50d49
< sfcrad.o: ../../../include/nonhyd.incl ../../../include/point3d.incl
52a52
> sfcrad.o: ../../../include/defines.incl
===================================================================
physics/radiation/sfc/sfcrad.F
diff -r3.0 -r3.4
0a1
> #include <defines.incl>                                                          07NOV00.2472
1a3
> #  ifndef VECTOR                                                                 07NOV00.2473
2a5,11
> #  else                                                                          07NOV00.2474
>       SUBROUTINE SFCRAD (IYY,JXX,J,INEST,T3D,QV3D,PP3D,                          07NOV00.2475
>      +   SVP1,SVP2,SVP3,SVPT0,EP2,                                               07NOV00.2476
>      +   PSB,GLW,GSW,CAPG,MAVAIL,XLAT,XLONG,                                     07NOV00.2477
>      +   PRW,ALB,SHC,THC,                                                        07NOV00.2478
>      +   IST,IEN)                                                                07NOV00.2479
> #  endif                                                                         07NOV00.2480
19d27
< #     include <rpstar.incl>                                                      SFCRAD.19
42a51
> #ifndef VECTOR                                                                   07NOV00.2481
44d52
< #     include <nonhyd.incl>                                                      SFCRAD.44
45a54,61
> #     include <addrcu.incl>                                                      07NOV00.2482
> #else                                                                            07NOV00.2483
>       REAL SVP1,SVP2,SVP3,SVPT0,EP2                                              07NOV00.2484
>       REAL PSB(MIX,MJX),GLW(MIX,MJX),GSW(MIX,MJX),CAPG(MIX,MJX)                  07NOV00.2485
>       REAL MAVAIL(MIX,MJX),XLAT(MIX,MJX),XLONG(MIX,MJX)                          07NOV00.2486
>       REAL PRW(MIX,MJX),ALB(MIX,MJX),SHC(MIX,MJX),THC(MIX,MJX)                   07NOV00.2487
>       INTEGER IST,IEN                                                            07NOV00.2488
> #endif                                                                           07NOV00.2489
48d63
< #     include <addrcu.incl>                                                      SFCRAD.48
275,347d289
< C                                                                                SFCRAD.275
< C-----COMPUTE THE SLAB THERMAL CAPACITY PER UINT AREA, CAPG (J/M**2/DEG)         SFCRAD.276
< C                                                                                SFCRAD.277
< C     *** NOTE ***                                                               SFCRAD.278
< C         THE FORMULA FOR CAPG IS FROM AKB(1976), EQ(1) AND IS DONE              SFCRAD.279
< C         ONCE EVERY NTRAD TIMES (SEE COMMENTS BELOW).                           SFCRAD.280
< C                                                                                SFCRAD.281
< C         MAVAIL SHOULD BE A FUNCTION OF RAINFALL, SO CAPG WILL VARY             SFCRAD.282
< C         IN TIME AS A DEPENDENT VARIABLE OF LAMDAG. ALSO NOTICE                 SFCRAD.283
< C         THAT HEAT CAPACITY OF DRY SOIL, SHC IS EASILY SPECIFIED                SFCRAD.284
< C         IN THE 3-D PROGRAM, AND THAT SOIL MOISTURE PROVIDES A                  SFCRAD.285
< C         SIGNIFICANT COMPONENT (ABOUT A FACTOR OF 2-4) TO THE FINAL             SFCRAD.286
< C         VALUE OF CAPG. BECAUSE ZHANG`S M.S. THESIS SHOWED THAT                 SFCRAD.287
< C         FAIRLY LARGE CHANGES OF CAPG ARE REQUIRED TO SIGNIFICANTLY             SFCRAD.288
< C         CHANGE RESULTANT TGB AND PBL STRUCTURE, CAPG SHOULD NEVER              SFCRAD.289
< C         REQUIRE RECALCULATION AFTER EACH TIME STEP. ONCE EVERY                 SFCRAD.290
< C         NTRAD TIME STEPS (ABOUT HALH AN HOUR OR ONE HOUR) SHOULD               SFCRAD.291
< C         BE SUFFICIENT.                                                         SFCRAD.292
< C                                                                                SFCRAD.293
< C         MAVAIL`S DEPENDENCY ON RAINFALL COULD BE BASED ON A SLAB               SFCRAD.294
< C         'THICKNESS' OF SAY, 10 CM. THUS 2.5 CM OF RAINFALL WOULD               SFCRAD.295
< C         COMPLETELY SATURATE AN INITIALLY DRY (MAVAIL=0.) SLAB.                 SFCRAD.296
< C         MAVAIL SHOULD BE ALLOWED TO DECREASE, ALSO, BASED ON A                 SFCRAD.297
< C         SOIL DRAINAGE RATE THAT WOULD CAUSE EXPONENTIAL DECAY                  SFCRAD.298
< C         (SUCH AS A DROUGHT INDEX). THE DECAY RATE COULD BE A                   SFCRAD.299
< C         FUNCTION OF SOIL TYPE.                                                 SFCRAD.300
< C                                                                                SFCRAD.301
< C         CS     - HEAT CAPACITY OF SOIL, INCLUDING SOIL MOISTURE ,PER           SFCRAD.302
< C                  UNIT VOLUME (J/M**3/DEG). SOIL IS ASSUMED TO BE               SFCRAD.303
< C                  SATURATED (MAVAIL=1.) AT 250 KG/M**3, WHICH IS                SFCRAD.304
< C                  0.25 OF PURE WATER DENSITY, 1000 KG/M**3.                     SFCRAD.305
< C         CSW    - HEAT CAPACITY OF WATER PER UNIT VOLUME                        SFCRAD.306
< C                  (J/M**3/DEG).                                                 SFCRAD.307
< C         LAMDAG - SOIL THERMAL CONDUCTIVITY (AKB`S FORM), WILL BE               SFCRAD.308
< C                  STORED IN ARRAY THC, AND IS DEPENDENT ON SOIL                 SFCRAD.309
< C                  MOISTURE.                                                     SFCRAD.310
< C                                                                                SFCRAD.311
< C     IF (IMOIAV(INEST) .EQ. 0 .AND. KTAU .GT. 1) GO TO 260                      SFCRAD.312
< C                                                                                SFCRAD.313
<       IF(IMOIAV(INEST).EQ.0)GOTO 240                                             SFCRAD.314
< C                                                                                SFCRAD.315
< C-----THE SLAB THERMAL CAPACITY, CAPG(I,J) ARE DEPENDENT ON:                     SFCRAD.316
< C     SHC(I,J) - SOIL HEAT CAPACITY PER UNIT VOLUME,                             SFCRAD.317
< C     THC(I,J) - SOIL CONDUCTIVITY, AND                                          SFCRAD.318
< C     MAVAIL(I,J) - MOISTURE AVAILABILITY.                                       SFCRAD.319
< C                                                                                SFCRAD.320
<       DO 230 I=1,ILX                                                             SFCRAD.321
<         CS=SHC(I,J)+CSW*MAVAIL(I,J)*0.25                                         SFCRAD.322
<         RHOG1=MAVAIL(I,J)*250.                                                   SFCRAD.323
<         RHOG2=RHOG1*RHOG1                                                        SFCRAD.324
<         RHOG3=RHOG1*RHOG2                                                        SFCRAD.325
<         LAMDAG=LAMG(1)*RHOG3+LAMG(2)*RHOG2+LAMG(3)*RHOG1+LAMG(4)                 SFCRAD.326
<         THC(I,J)=LAMDAG                                                          SFCRAD.327
<         CAPG(I,J)=0.95*SQRT(CS*THC(I,J)/(2.*EOMEG))                              SFCRAD.328
<   230 CONTINUE                                                                   SFCRAD.329
<       GOTO 260                                                                   SFCRAD.330
< C                                                                                SFCRAD.331
< C-----THE SLAB THERMAL CAPACITY CAPG(I,J) ARE DEPENDENT ON:                      SFCRAD.332
< C     THC(I,J) - SOIL THERMAL INERTIAL, ONLY.                                    SFCRAD.333
< C                                                                                SFCRAD.334
<   240 CONTINUE                                                                   SFCRAD.335
<       DO 250 I=1,ILX                                                             SFCRAD.336
<         CAPG(I,J)=3.298E6*THC(I,J)                                               SFCRAD.337
<         IF(ISOIL.EQ.1)THEN                                                       SFCRAD.338
< C CAPG REPRESENTS SOIL HEAT CAPACITY (J/K/M^3) WHEN DIFSL=5.E-7 (M^2/S)          SFCRAD.339
< C   TO GIVE A CORRECT THERMAL INERTIA (=CAPG*DIFSL^0.5)                          SFCRAD.340
<           CAPG(I,J)=5.9114E7*THC(I,J)                                            SFCRAD.341
<         ENDIF                                                                    SFCRAD.342
<   250 CONTINUE                                                                   SFCRAD.343
< C                                                                                SFCRAD.344
<   260 CONTINUE                                                                   SFCRAD.345
< C                                                                                SFCRAD.346
< C----------------------------------------------------------------------          SFCRAD.347
349d290
<   290 CONTINUE                                                                   SFCRAD.349
352d292
<                                                                                  SFCRAD.352
