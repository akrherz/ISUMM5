===================================================================
CHANGES
diff -r3.22 -r3.38
11c11,345
< The current release is 3.5 (release-3-5, December 5, 2001).
---
> The current release is 3.6 (release-3-6, December 27, 2002).
> 
> ============================================================
> 
> 1. Bug fixes:
> 
> - Correct an error with XTIME update for the nest if the nest
>   starts later during a simulation. This is an error caused by
>   our update in V3.5. No error in previous versions of MM5.
>   (Thanks to Jennifer Cram for reporting the problem. 
>   This bug fix has been in the tar file since Feb 25, 2002.)
> 
>   Affected files:
>   domain/initial/param.F
>   dynamics/nonhydro/solve.F
> 
> - Correct an error in defining CKH for the nest. Also CKH should
>   be declared as REAL, not integer - only affect
>   results if one sets CKH differently from 1 in mm5.deck.
>   (These fixes have been in the tar file since Aug 27, 2002.)
> 
>   Affected files:
>   include/param2.incl
>   domain/initial/param.F
>   domain/nest/initnest.F
> 
> - A correction to array indices to avoid possible memory overwrite.
>   Only a problem if KF or FC scheme is not compiled.
>   (Thanks to Bill Hall of NCAR.
>   This bug fix has been in the tar file since Feb 25, 2002.)
> 
>   Affected file:
>   domain/io/output.F
> 
> - A correction in estimating cloud base height in BM cumulus scheme.
>   Small effect on results. (Thanks to Charlie Cohen of NASA.
>   This bug fix has been in the tar file since Feb 25, 2002.)
> 
>   Affected file:
>   physics/cumulus/bm/bmpara.F
> 
> - Consider smaller PBL time step too when estimating change in moisture 
>   availability if Gayno-Seaman PBL scheme is used
>   with bucket soil moisture option (IBLTYP = 6 and IMOIAV > 0).
>   (Thanks to Guenther Zaengl of University of Munich.
>   This bug fix has been in the tar file since Feb 25, 2002.)
> 
>   Affected file:
>   physics/pbl_sfc/util/slab.F
> 
> - Minor correction to background vertical diffusion.
>   (This bug fix has been in the tar file since Oct 31, 2002.)
> 
>   Affected files:
>   physics/pbl_sfc/hirpbl/hirpbl.F
>   physics/pbl_sfc/bulk/blkpbl.F
>   physics/pbl_sfc/mrfpbl/mrfpbl.F
> 
> - Correction to Blackadar PBL for diagnosing T2/Q2/U10/V10 in
>   regimes 1, 2 and 3.
> 
>   Affected files:
>   physics/pbl_sfc/hirpbl/hirpbl.F
> 
> - PSIM and PSIH definitions for stable regime corrected in GSPBL.
>   (Thanks to D Stauffer and G Bryan from Penn State University)
>   (This bug fix has been in the tar file since Aug 27, 2002.)
> 
>   Affected files:
>   physics/pbl_sfc/gspbl/gspbl.F
> 
> - A correction to output file names if using file split option.
>   It will not write a new file if it is not a restart run.
>   (This bug fix has been in the tar file since March, 2002.)
> 
>   Affected file:
>   domain/io/outtap.F
> 
> - Allow for cloud field in the initial conditions while there is no cloud/rain
>   in the boundary conditions (e.g. forecast cycling of cloud water).
>   This would affect results only if cloud/rain field is present in the MMINPUT 
>   file and not present in the BDYOUT file.
>   (This bug fix has been in the tar file since Oct 31, 2002.)
> 
>   Affected files:
>   Run/mm5.F
>   domain/boundary/bdyin.F 
>   domain/initial/init.F
> 
> - Add a fix to correct the major problems associated with running 
>   the Reisner1 scheme on a vector machine
>   This only effect runs done on vector machines. However, please note
>   that we are still working on some problem related to vector option.
>   (This bug fix has been in the tar file since Aug 27, 2002.)
>   
>   Affected files:
>   physics/explicit/reisner1/exmoisr.F
>   MPP/RSL/call_vector_exmoisr.incl, vec_exmoisr_80.incl, vector_solve_temps.incl
> 
> 2. Changes and improvements:
> 
> - The Reisner graupel scheme has had substantial changes since
>   3.5. These include bug fixes for number conc units, and use
>   of RON2, change of snow to graupel conversion, Sc number used
>   in PREI, PRE and PMLTEV. More can be found in documentation at
>   beginning of exmoisg.F file. There is also undef'd code that
>   would allow for calling this scheme less frequently for 
>   efficiency in solve and exmoisg (not used by default).
>   (Thanks to Greg Thompson of RAP/NCAR, Bill Hall of MMM/NCAR,
>    and George Bryan of PSU.)
> 
>   Affected files:
>   domain/initial/paramr.F
>   dynamics/nonhydro/solve.F 
>   include/jrg.incl
>   physics/explicit/reisner2/exmoisg.F
> 
> - Add new updates to PXPBL scheme from Jon Pleim
> 
>   Affected files:
>   domain/io/outtap.F
>   include/comicl.incl
>   physics/pbl_sfc/pxpbl/acm.F, pxpbl.F sfcmm4.F, surfpx.F, vdiff.F
> 
> - Fix to MRF PBL to make the soil temperatures more robust in some
>   rare conditions.
> 
>   Affected files:
>   physics/pbl_sfc/mrfpbl/mrfpbl.F
> 
> - Allow feedback of TKE from the nest for the Gayno-Seaman PBL.
> 
>   Affected file:
>   domain/nest/feedbk.F
> 
> - Add a fix to correct rare blow-ups in the old KF scheme. Only affect
>   running the model using vector option.
> 
>   Affected files:
>   physics/cumulus/kf/kfpara.F
> 
> - Account for the melting of snow when IFSNOW=2. This completes
>   the simple snow model modification added to MM5 in V3.5.
> 
>   Affected files:
>   physics/pbl_sfc/util/slab.F
> 
> - Winds in time series output are now rotated to earch winds.
> 
>   Affected file:
>   domain/io/outts.F
> 
> - Add a test, so that snow cover is only read and used from the LOWBDY file
>   if IFSNOW=2.
>   Small values of SNOWC are set to zero after they are read in.
>   Initialize SNOWNCT array to zero each timestep to avoid poor boundary
>   values of 1.0 in parallel model.
>   (Thanks to Jennifer Cram of ATMET).
> 
>   Affected files:
>   domain/boundary/lbdyin.F
>   domain/io/rdinit.F
>   dynamics/nonhydro/solve.F
> 
> - KLPBL=1 to allow MRF PBL to work when greater than half the layers
>   are in the PBL (Thanks to S.-Y. Hong of University of Yonsei, Korea).
>   Only affect results in above case.
> 
>   Affected files:
>   physics/pbl_sfc/mrfpbl/mrfpbl.F
> 
> - Add a stop if ISOIL=2 and IFSNOW=2, these two options cannot
>   be used together. No effect on results.
> 
>   Affected files:
>   domain/initial/param.F
> 
> - Add a stop if options IOVERW=2 and IMOIAV = 2 are used. This is
>   because IMOIAV = 2 requires soil moisture input, and if IOVERW = 2
>   is used, soil moisture will not be interpolated correctly along
>   land-water boundaries.
> 
>   Affected file:
>   domain/initial/param.F
> 
> - Change I=2 to I=IBGN in diffu.F (Thanks to McHenry of MCNC).
>   No effect on results.
> 
>   Affected files:
>   physics/hzdiffu/simple/diffu.F
> 
> - Minor memory improvement. This change does not affect results.
>   (Thanks to Xingang Fan of University of Alaska Fairbanks)
> 
>   Affected files:
>   include/fddagd.incl 
> 
> - Change in batch IBM job deck. Remove rcp from IBM batch deck run on NCAR's IBM.
> 
>   Affected file:
>   Templates/mm5.deck.ibm-mpp
> 
> 3. New in 3.6:
> 
> - Replace OSU LSM with unified LSM (or NOAH LSM) (ISOIL=2 replaced). 
>   This unifies code between AFWA AGRMET, NCEP Eta/LDAS, NCAR MM5, and 
>   future WRF.
>   New features include frozen-soil physics, snow height prediction,
>   and ability to use read-in albedo data, among others.
> 
>   Affected files:
>   domain/initial/Makefile
>   domain/initial/init.F
>   domain/initial/param.F
>   domain/io/Makefile
>   domain/io/outtap.F
>   domain/io/rdinit.F
>   domain/nest/Makefile
>   domain/nest/feedbk.F
>   domain/nest/initnest.F
>   domain/nest/nestlsm.F
>   dynamics/nonhydro/solve.F
>   include/parame
>   include/soilp.incl
>   include/soilpn.incl
>   memory/address/addall.F
>   memory/address/addrx1c.F
>   memory/address/addrx1n.F
>   physics/pbl_sfc/mrfpbl/mrfpbl.F
>   physics/pbl_sfc/myepbl/myepbl.F
>   physics/pbl_sfc/util/Makefile
>   physics/pbl_sfc/util/setvegfr.F
>   MPP/mpp_objects_all
>   MPP/namelist.data
>   MPP/RSL/mpp_nestlsm_00.incl
>   MPP/RSL/mpp_nestlsm_10.incl
>   MPP/RSL/parallel_src/mp_feedbk.F
> 
>   New files:
>   include/paramgen_LSM.incl
>   include/paramsoil_STAS.incl
>   include/paramveg_USGS.incl
>   Run/GENPARM.TBL
>   Run/SOILPARM.TBL
>   Run/VEGPARM.TBL
>   physics/pbl_sfc/noahlsm/Makefile
>   physics/pbl_sfc/noahlsm/sflx.F
>   physics/pbl_sfc/noahlsm/surfce.F
> 
> - Add polar physics modification from Ohio State U. These will allow for effects
>   of sea-ice fraction, fluxes within sea-ice and snow/ice in slab, surface 
>   fluxes over ice in the Eta PBL, Meyers ice nuclei conc in the simple
>   and Reisner1 microphysics schemes, and modified permanent ice
>   properties in LANDUSE.TBL. It is activated by IPOLAR=1 in
>   configure.user. Sea-ice is diagnosed from SST (namelist variable IEXSI=1), 
>   or fraction is read in (IEXSI=2) from LOWBDY file.
>  
>   Affected files:
>   configure.user
>   Run/LANDUSE.TBL
>   Run/Makefile
>   Run/mm5.F
>   Templates/lparam
>   Util/parseconfig.c
>   domain/boundary/lbdyin.F
>   domain/initial/init.F
>   domain/initial/param.F
>   domain/io/outtap.F
>   domain/nest/feedbk.F
>   domain/nest/initnest.F
>   dynamics/nonhydro/solve.F
>   include/Makefile
>   include/param2.incl
>   include/parame
>   include/point2d.incl
>   include/point2dn.incl
>   memory/address/addall.F
>   physics/explicit/reisner1/exmoisr.F
>   physics/explicit/reisner1/lexmoisr.F
>   physics/explicit/simple/exmoiss.F
>   physics/explicit/simple/lexmoiss.F
>   physics/pbl_sfc/myepbl/Makefile
>   physics/pbl_sfc/myepbl/myepbl.F
>   physics/pbl_sfc/myepbl/sfcdif.F
>   physics/pbl_sfc/util/slab.F
>   MPP/namelist.data
>   MPP/RSL/mpp_lbdyin_10.incl
>   MPP/RSL/parallel_src/mp_feedbk.F
> 
> 4. MPP updates:
> 
> - Change to allow the creation of restrts directory in a MPI run if this 
>   directory does not exist when the run starts. (Thanks to the suggestion
>   by Bart Brashers of MFG Inc.) This change affects MPI run only.
> 
>   Affected files:
>   configure.user 
>   domain/io/output.F
> 
> - A correction to restart time calculation in MPI MM5 so that it
>   is consistent with XTIME and hence MPI restart will be done correctly. 
>   This change makes MPI code the same as the non-MPI code. 
>   This affects MPI runs only.
> 
>   Affected files:
>   MPP/RSL/mpp_output_10.incl
> 
> - Correct short-time step calculation when running MPI MM5 with the 
>   MPI_IO_NODE=1 option. This change only affects when MPI_IO_NODE is used.
>   (Thanks to Al Bourgeois from RAP/NCAR)
> 
>   Affected files:
>   dynamics/nonhydro/sound.F 
> 
> - Correct the way record are created then the MPI_IO_NODE=1 option is used.
> 
>   Affected files:
>   domain/io/write_fieldrec.F 
> 
> - Add MPP directives to allow for outputting number concentration in new unit
>   in Reisner II scheme. 
> 
>   Affected files:
>   domain/io/outtap.F, rho_mlt.F
> 
> - A update in MPP compile option for Linux machines.
> 
>   Affected file:
>   configure.user
> 
> - Fortran and c compiler options will be passed down to RSL
>   for Linux.
> 
>   Affected file:
>   Makefile
===================================================================
Makefile
diff -r3.7 -r3.9
67a68,70
> mmlif:
> 	(cd Run; $(MAKE) mmlif);
> 	
94c97
< 	(cd MPP/RSL/RSL ; if [ "$(RUNTIME_SYSTEM)" = "alpha" -o "$(RUNTIME_SYSTEM)" = "alphavector" ]  ; then $(MAKE) CC="$(MCC)" FC="$(MFC)" UNDERSCORE=$(UNDERSCORE) $(MPP_TARGET) ; else if [ "$(RUNTIME_SYSTEM)" = "linux" ] ; then $(MAKE) LINUX_MPIHOME=$(LINUX_MPIHOME) $(MPP_TARGET) ; else $(MAKE) $(MPP_TARGET) ; fi ; fi  )
---
> 	(cd MPP/RSL/RSL ; if [ "$(RUNTIME_SYSTEM)" = "alpha" -o "$(RUNTIME_SYSTEM)" = "alphavector" ]  ; then $(MAKE) CC="$(MCC)" FC="$(MFC)" UNDERSCORE=$(UNDERSCORE) $(MPP_TARGET) ; else if [ "$(RUNTIME_SYSTEM)" = "linux" ] ; then $(MAKE) CC="$(MCC)" FC="$(MFC)" LINUX_MPIHOME=$(LINUX_MPIHOME) $(MPP_TARGET) ; else $(MAKE) $(MPP_TARGET) ; fi ; fi  )
===================================================================
README
diff -r3.6 -r3.8
2c2
< VERSION 3 MM5 PROGRAM (release 3-4)
---
> VERSION 3 MM5 PROGRAM (release 3-6)
===================================================================
README.MPP
diff -r3.6 -r3.7
21a22,36
> Notes on Version 3-6 release of MPP-MM5
> ---------------------------------------
> 
> I.  Fixes, enhancements for 3-6:
> 
>   A. Includes all bug fixes between the release of 3-5 (Dec. 2001) and the
>      release of 3-6 (December 2002).  See
>               http://www.mmm.ucar.edu/mm5/mpp/helpdesk.
> 
>   B. New NOAH LSM (ISOIL=2) is included in MPP version.
> 
>   C. New polar physics option (activated by settting IPOLAR = 1 in configure.user)
>      is included in MPP version.
> 
> ---------------------------------------
===================================================================
configure.user
diff -r3.43 -r3.50
98c98
< ### OSU LSM (ISOIL=2) option mp directives
---
> ### Noah LSM (ISOIL=2) option mp directives
114c114
< #          Gayno-Seaman PBL, or OSU land-surface module
---
> #          Gayno-Seaman PBL, or Noah land-surface module
130c130
< ###OSU LSM (ISOIL=2) option mp directives
---
> ###Noah LSM (ISOIL=2) option mp directives
316d315
< #                                     0=none,1=simple,2=cloud,3=ccm2,4=rrtm
318a318,322
> # IPOLAR - (integer) for polar model used only if ISOIL=1
> #                                     0=not polar (5-layer soil model)
> #                                     1=polar (7-layer snow/soil model)
> IPOLAR = 0
> #                                     0=none,1=simple,2=cloud,3=ccm2,4=rrtm
321c325
< #                                     2=OSU land-surface scheme (IBLTYP=5 only)
---
> #                                     2=Noah land-surface scheme (IBLTYP=4,5 only)
370,376c374,380
< #MFC = xlf
< #MCC = mpcc
< #MLD = mpxlf
< #FCFLAGS = -O3 -qstrict -qarch=auto -qhsflt
< #LDOPTIONS =
< ##LOCAL_LIBRARIES = -lmass
< #LOCAL_LIBRARIES = -lessl
---
> #MFC = xlf_r
> #MCC = mpcc_r
> #MLD = mpxlf_r
> #FCFLAGS = -O2 -qmaxmem=-1 -qarch=auto -qfloat=hsflt
> #LDOPTIONS = -bmaxdata:0x70000000
> #LOCAL_LIBRARIES = -lmass
> ##LOCAL_LIBRARIES = -lessl
385c389
< #CPPFLAGS = -DMPI -Drs6000
---
> #CPPFLAGS = -DMPI -Drs6000 -DSYSTEM_CALL_OK
428c432
< #CPPFLAGS = -DMPI -Drs6000
---
> #CPPFLAGS = -DMPI -Drs6000 -DSYSTEM_CALL_OK
491c495
< #CPPFLAGS = -DMPI -DO2K -DDEC_ALPHA
---
> #CPPFLAGS = -DMPI -DO2K -DDEC_ALPHA -DSYSTEM_CALL_OK
517c521
< #CPPFLAGS = -DMPI
---
> #CPPFLAGS = -DMPI -DSYSTEM_CALL_OK
561c565
< #CPPFLAGS = -DMPI -DDEC_ALPHA
---
> #CPPFLAGS = -DMPI -DDEC_ALPHA -DSYSTEM_CALL_OK
592c596
< #CPPFLAGS = -DMPI -DDEC_ALPHA $(UNDERSCORE)
---
> #CPPFLAGS = -DMPI -DDEC_ALPHA $(UNDERSCORE) -DSYSTEM_CALL_OK
653c657
< ### CPPFLAGS = -DMPI -Dvpp -I$(MPIINCDIR) -DKMA -DSTUBS
---
> ### CPPFLAGS = -DMPI -Dvpp -I$(MPIINCDIR) -DKMA -DSTUBS  -DSYSTEM_CALL_OK
656c660
< #CPPFLAGS = -DMPI -Dvpp -I$(MPIINCDIR) -DKMA
---
> #CPPFLAGS = -DMPI -Dvpp -I$(MPIINCDIR) -DKMA -DSYSTEM_CALL_OK
711,713c715,717
< #CPP = /lib/cpp -C -P
< #CPPFLAGS = -DMPI -Dlinux
< #CFLAGS = -DMPI -I/usr/local/mpi/include
---
> #CPP = /lib/cpp -C -P -traditional
> #CPPFLAGS = -DMPI -Dlinux -DSYSTEM_CALL_OK
> #CFLAGS = -DMPI -I$(LINUX_MPIHOME)/include
742c746
< #CPPFLAGS = -DMPI -Dvpp -I$(LIBINCLUDE) -C -P -DDEC_ALPHA
---
> #CPPFLAGS = -DMPI -Dvpp -I$(LIBINCLUDE) -C -P -DDEC_ALPHA -DSYSTEM_CALL_OK
773c777
< #CPPFLAGS = -DMPI
---
> #CPPFLAGS = -DMPI -DSYSTEM_CALL_OK
===================================================================
configure.user.linux
diff -r3.9 -r3.12
123c123
< #                                     2=OSU land-surface scheme (IBLTYP=5 only)
---
> #                                     2=Noah land-surface scheme (IBLTYP=4,5 only)
===================================================================
Diff/diff.05DEC01
diff -r3.5 -r3.6
334,338d333
< diff -r3.5 -r3.7
< 68,70d67
< < mmlif:
< < 	(cd Run; $(MAKE) mmlif);
< < 	
===================================================================
Run/LANDUSE.TBL
diff -r3.2 -r3.4
14c14
< 11,     55.,   .95,   .95,    5.,    5.,    0., 9.0e25,'Permanent ice'
---
> 11,     80.,   .95,   .95,  0.01,    5.,    0., 9.0e25,'Permanent ice'
28c28
< 11,     70.,   .95,   .95,    5.,    5.,    0., 9.0e25,'Permanent ice'
---
> 11,     82.,   .95,   .95,  0.01,    5.,    0., 9.0e25,'Permanent ice'
57c57
< 24,     55.,   .95,   .95,    5.,    5.,    0., 9.0e25,'Snow or Ice'
---
> 24,     80.,   .95,   .95,  0.01,    5.,    0., 9.0e25,'Snow or Ice'
82c82
< 24,     70.,   .95,   .95,    5.,    5.,    0., 9.0e25,'Snow or Ice'
---
> 24,     82.,   .95,   .95,  0.01,    5.,    0., 9.0e25,'Snow or Ice'
101c101
< 16,     55.,   .95,   .95,    5.,    5.,    0., 9.0e25,'Ice Cap and Glacier'
---
> 16,     80.,   .95,   .95,    5.,    5.,    0., 9.0e25,'Ice Cap and Glacier'
118c118
< 16,     70.,   .95,   .95,    5.,    5.,    0., 9.0e25,'Ice Cap and Glacier'
---
> 16,     82.,   .95,   .95,    5.,    5.,    0., 9.0e25,'Ice Cap and Glacier'
===================================================================
Run/Makefile
diff -r3.0 -r3.1
46a47
> 	echo " IPOLAR = $(IPOLAR),">>$(MMLIF)
===================================================================
Run/mm5.F
diff -r3.9 -r3.12
197c197
<      -     IFSNOW,IL,JL)                                                         05DEC01.2
---
>      -     IFSNOW,IEXSI,IL,JL)                                                   19DEC02.1
204c204
<      -          IFSNOW,IL,JL)                                                    05DEC01.4
---
>      -          IFSNOW,IEXSI,IL,JL)                                              19DEC02.2
211c211,212
<         IF(XTIME.GE.BDYTIM)CALL BDYIN(9,TBDYBE,BDYTIM,BDYFRQ,IL,JL)              07NOV00.16
---
>         IF(XTIME.GE.BDYTIM)CALL BDYIN(9,TBDYBE,BDYTIM,BDYFRQ,IL,JL,              19DEC02.3
>      -     IBMOIST)                                                              19DEC02.4
===================================================================
Templates/lparam
diff -r3.5 -r3.8
10a11
>  IEXSI     = 0,    ;initial sea-ice - 0, 1(base on SST), 2(read in) (ISOIL=1 only)
28,29c29,30
<  IFSNOW = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ;SNOW COVER EFFECTS - 0, 1
<  ;        (only if snow data are generated in DATAGRID)
---
>  IFSNOW = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ;SNOW COVER EFFECTS - 0, 1, 2
>  ;                                      ;0 - no effect, 1 - with effect, 2 - simple snow model
39a41,43
>  ; Next two switches for new version of NOAH LSM (ISOIL=2)
>  RDMAXALB=.FALSE.                       ;use climo maximum snow albedo (not landuse table)
>  RDBRDALB=.FALSE.                       ;use monthly climo background albedo (not landuse table)
===================================================================
Templates/mm5.deck.ibm-mpp
diff -r3.2 -r3.3
61,62c61,62
< # set STARTsw   = NoReStart   # start model run at hour 0
<   set STARTsw   = ReStart     # restart model run
---
>   set STARTsw   = NoReStart   # start model run at hour 0
> # set STARTsw   = ReStart     # restart model run
68,69c68,69
< # set UseMySource = no        # Use "standard" version of MM5
<   set UseMySource = yes       # Use my version of MM5
---
>   set UseMySource = no        # Use "standard" version of MM5
> # set UseMySource = yes       # Use my version of MM5
===================================================================
Util/parseconfig.c
diff -r3.5 -r3.6
42a43
>     int ipolar = 0;
313a315,321
> 	/* IPOLAR */
> 	ch = strstr(&(line[0]), "IPOLAR");
> 	if (ch != NULL && (line[0] != '#')) {
> 
> 	    sscanf(ch, "IPOLAR = %d", &ipolar);
> 	} /* IPOLAR */
> 
325c333
< 	    } else if (isoil == 1) {
---
> 	    } else if (isoil == 1 && ipolar == 0) {
328a337,341
> 		fprintf(fd, "#define SOIL1 1\n");
> 	    } else if (isoil == 1 && ipolar == 1) {
> 		isldim = 1;
> 		ilddim = 0;
> 		lx = 8;
===================================================================
domain/boundary/bdyin.F
diff -r3.13 -r3.15
1c1
<       SUBROUTINE BDYIN(IUNIT,TBDYBE,BDYTIM,BDYFRQ,IX,JX)                         BDYIN.1
---
>       SUBROUTINE BDYIN(IUNIT,TBDYBE,BDYTIM,BDYFRQ,IX,JX,IBMOIST)                 19DEC02.5
16a17,18
> C                                                                     C          19DEC02.6
> C        IBMOIST: WILL BE SET TO 1 IF CLOUD EXISTS IN BDYOUT          C          19DEC02.7
33c35
<       INTEGER IUNIT,IX,JX                                                        BDYIN.33
---
>       INTEGER IUNIT,IX,JX,IBMOIST                                                19DEC02.8
57a60,62
>       LOGICAL IFOUNDCLD                                                          19DEC02.9
>                                                                                  19DEC02.10
>       IFOUNDCLD = .FALSE.                                                        19DEC02.11
276a282
>           IFOUNDCLD = .TRUE.                                                     19DEC02.12
401a408,420
>         IF(IBMOIST.EQ.1.AND.(.NOT.IFOUNDCLD))THEN                                19DEC02.13
> C       THIS MAY OCCUR IN FORECASTS WITH CYCLED INITIAL CONDITIONS               19DEC02.14
>           PRINT *,'CLOUD NOT IN BOUNDARY FILE BUT IN INPUT FILE'                 19DEC02.15
>           PRINT *,'RESETTING IBMOIST TO ZERO'                                    19DEC02.16
>           IBMOIST = 0                                                            19DEC02.17
>         ENDIF                                                                    19DEC02.18
>         IF(IBMOIST.EQ.0.AND.(IFOUNDCLD))THEN                                     19DEC02.19
> C       THIS SHOULD BE AN UNUSUAL OCCURRENCE                                     19DEC02.20
> C       ASSUME THAT IF CLOUD IS IN BDY FILE IT SHOULD BE USED                    19DEC02.21
>           PRINT *,'CLOUD IN BOUNDARY FILE BUT NOT IN INPUT FILE (?)'             19DEC02.22
>           PRINT *,'RESETTING IBMOIST TO ONE'                                     19DEC02.23
>           IBMOIST = 1                                                            19DEC02.24
>         ENDIF                                                                    19DEC02.25
===================================================================
domain/boundary/lbdyin.F
diff -r3.24 -r3.28
2c2
<      -     ,IFSNOW,IX,JX)                                                        05DEC01.5
---
>      -     ,IFSNOW,IEXSI,IX,JX)                                                  19DEC02.26
40c40
<       INTEGER INEST,IUNIT,IX,JX,ISOIL                                            LBDYIN.39
---
>       INTEGER INEST,IUNIT,IX,JX,ISOIL,IEXSI                                      19DEC02.27
44c44
<       INTEGER IFOUNDTMN, IFOUNDTSS, IFOUNDSNC, IFOUNDSIC                         LBDYIN.43
---
>       INTEGER IFOUNDTMN, IFOUNDTSS, IFOUNDSNC, IFOUNDSIC, IFOUNDSIF              19DEC02.28
73a74
>       IFOUNDSIF=0                                                                19DEC02.29
182c183
<      +            .AND.ISOIL.NE.2)THEN                                           05DEC01.12
---
>      +            .AND.ISOIL.NE.2.AND.IFSNOW(INEST).NE.2)THEN                    19DEC02.30
216a218,236
>           ELSE IF(NDIM.EQ.2.AND.NAME(1:8).EQ.'SEAICEFR'.AND.IEXSI.EQ.2)          19DEC02.31
>      +           THEN                                                            19DEC02.32
> #ifndef MPP1                                                                     19DEC02.33
>             READ (IUNIT)                                                         19DEC02.34
>      -        ((SEAICE(I,J),I=1,END_INDEX(1)),J=1,END_INDEX(2))                  19DEC02.35
> #else                                                                            19DEC02.36
>             DO J = 1, MJXL                                                       19DEC02.37
>               DO I = 1, MIXL                                                     19DEC02.38
>                 SEAICE(I,J) = 0.                                                 19DEC02.39
>               ENDDO                                                              19DEC02.40
>             ENDDO                                                                19DEC02.41
>             LENDIM1=(END_INDEX(1)-START_INDEX(1)+1)                              19DEC02.42
>             LENDIM2=(END_INDEX(2)-START_INDEX(2)+1)                              19DEC02.43
>             LENDIM3=(END_INDEX(3)-START_INDEX(3)+1)                              19DEC02.44
>             CALL DM_DIST_READ(IUNIT,INEST,SEAICE,NDIM,LENDIM1,LENDIM2,1,         19DEC02.45
>      +           MIX,MJX,1)                                                      19DEC02.46
> #endif                                                                           19DEC02.47
>             PRINT *, 'FOUND INPUT FIELD ', NAME, ' FOR ', CURRENT_DATE           19DEC02.48
>             IFOUNDSIF=1                                                          19DEC02.49
244a265
>                 IFOUNDSIF=0                                                      19DEC02.50
289a311,313
>           IF(IFOUNDSIF.NE.1.AND.IEXSI.EQ.2)THEN                                  19DEC02.51
>             PRINT *, 'SEA ICE FRACTION NOT FOUND: NOT UPDATED'                   19DEC02.52
>           ENDIF                                                                  19DEC02.53
399a424,428
>           ENDIF                                                                  19DEC02.54
>           IF(IEXSI.EQ.2.AND.IFOUNDSIF.EQ.1)THEN                                  19DEC02.55
>             CALL FILL(SEAICE,HELP1,MIX,MJX,ILX,JLX,ILXM,JLXM)                    19DEC02.56
>             CALL EXAINT(HELP1,ILX,JLX,HSCR1N,INLX,JNLX,ISOUTH,JWEST,1)           19DEC02.57
>             CALL FILL(HSCR1N,SEAICN,INLX,JNLX,MIX,MJX,INLXM,JNLXM)               19DEC02.58
===================================================================
domain/initial/Makefile
diff -r3.4 -r3.5
58c58
< init.o: ../../include/soilp.incl
---
> init.o: ../../include/soilp.incl ../../include/paramveg_USGS.incl
75c75,76
< param.o: ../../include/parpx.incl
---
> param.o: ../../include/parpx.incl ../../include/paramveg_USGS.incl
> param.o: ../../include/paramsoil_STAS.incl ../../include/paramgen_LSM.incl
===================================================================
domain/initial/init.F
diff -r3.32 -r3.36
46a47
> #     include <paramveg_USGS.incl>                                               19DEC02.59
165a167,174
> C                                                                                19DEC02.60
> C-----READ IN LOWBDY INFORMATION                                                 19DEC02.61
> C MOVED FROM AFTER CALCULATION OF SLAB THERMAL CAPACITY                          19DEC02.62
> C FOR CONSISTENCY WITH OPTIONAL SURFACE DATA FILES                               19DEC02.63
> C                                                                                19DEC02.64
>       CALL LBDYIN(1,TBDYLBE,BDYLTIM,BDYLFRQ,ISOIL,IACTIV,                        19DEC02.65
>      -     IFSNOW,IEXSI,IX,JX)                                                   19DEC02.66
> C                                                                                19DEC02.67
498a508,578
> C                                                                                19DEC02.68
> C SPECIFY SEA ICE BASED ON SST IF IEXSI.EQ.1                                     19DEC02.69
> C READ SEA ICE FRACTION FROM LOWBDY FILE IF IEXSI.EQ.2                           19DEC02.70
> C                                                                                19DEC02.71
>       IF(IEXSI.GE.1)THEN                                                         19DEC02.72
>         IF(IEXSI.EQ.1)THEN                                                       19DEC02.73
>           print *,'specifying sea ice in subroutine init'                        19DEC02.74
>           DO I=1,ILX                                                             19DEC02.75
>             DO J=1,JLX                                                           19DEC02.76
>               IF((TGA(I,J).LE.271.4).AND.                                        19DEC02.77
>      -            NINT(SATBRT(I,J)).EQ.ISWATER)THEN                              19DEC02.78
>                 SEAICE(I,J)=0.8                                                  19DEC02.79
> 	      else                                                               19DEC02.80
>                 SEAICE(I,J)=0.0                                                  19DEC02.81
>               ENDIF                                                              19DEC02.82
>             ENDDO                                                                19DEC02.83
>           ENDDO                                                                  19DEC02.84
>           PRINT *,'FINISHED SPECIFYING SEAICE BASED ON TG'                       19DEC02.85
>         ENDIF                                                                    19DEC02.86
> C                                                                                19DEC02.87
> C SET DUMMY END VALUES FOR SEAICE AND CHECK FOR ERRORS IN SEAICE INPUT DATA      19DEC02.88
> C                                                                                19DEC02.89
>         DO I=1,ILX                                                               19DEC02.90
>           SEAICE(I,JL)=SEAICE(I,JLX)                                             19DEC02.91
>         ENDDO                                                                    19DEC02.92
>         DO J=1,JLX                                                               19DEC02.93
>           SEAICE(IL,J)=SEAICE(ILX,J)                                             19DEC02.94
>         ENDDO                                                                    19DEC02.95
>         SEAICE(IL,JL)=SEAICE(ILX,JLX)                                            19DEC02.96
> C                                                                                19DEC02.97
> C CHECK FOR ERRORS IN SEAICE INPUT DATA                                          19DEC02.98
> C ALLOW SEAICE SURFACE TYPE AT WATER GRID POINTS ONLY, WITH SEAICE               19DEC02.99
> C FRACTION > 0.02                                                                19DEC02.100
> C                                                                                19DEC02.101
>         DO I=1,IL                                                                19DEC02.102
>           DO J=1,JL                                                              19DEC02.103
>             IF((SEAICE(I,J).GT.1.001).OR.                                        19DEC02.104
>      +       (SEAICE(I,J).LT.-0.001))THEN                                        19DEC02.105
>               WRITE(6,*) 'SEA ICE INITIAL ERROR AT I, J',I,', ',J                19DEC02.106
>               STOP 9753                                                          19DEC02.107
>             ENDIF                                                                19DEC02.108
>             IF(NINT(SATBRT(I,J)).NE.ISWATER.OR.                                  19DEC02.109
>      -           (SEAICE(I,J).LE.0.02))THEN                                      19DEC02.110
>               SEAICE(I,J)=0.0                                                    19DEC02.111
>             ENDIF                                                                19DEC02.112
> C                                                                                19DEC02.113
> C INITIALIZE SEAICE GROUND TEMPERATURE (TGSI)                                    19DEC02.114
> C                                                                                19DEC02.115
>             IF((SEAICE(I,J).GT.0.02))THEN                                        19DEC02.116
> C ASSUME INITIAL GROUND TEMPERATURE (TGA) REPRESENTS TEMPERATURE OVER SEAICE     19DEC02.117
>               TGSI(I,J)=TGA(I,J)                                                 19DEC02.118
> C MODIFY TGA (AND TGB) TO REPRESENT AREA AVERAGE OF SEAICE GROUND TEMPERATURE    19DEC02.119
> C AND OCEAN WATER TEMPERATURE AT FREEZING POINT (271.4 K)                        19DEC02.120
>               TGA(I,J)=SEAICE(I,J)*TGA(I,J)+(1.-SEAICE(I,J))*271.4               19DEC02.121
>               TGB(I,J)=TGA(I,J)                                                  19DEC02.122
>             ELSE                                                                 19DEC02.123
>               TGSI(I,J)=-1.*TGA(I,J)                                             19DEC02.124
>             ENDIF                                                                19DEC02.125
>           ENDDO                                                                  19DEC02.126
>         ENDDO                                                                    19DEC02.127
>       ELSE                                                                       19DEC02.128
> C                                                                                19DEC02.129
> C IEXSI.LT.1                                                                     19DEC02.130
> C                                                                                19DEC02.131
>         DO I=1,IL                                                                19DEC02.132
>           DO J=1,JL                                                              19DEC02.133
>             SEAICE(I,J)=0.0                                                      19DEC02.134
>             TGSI(I,J)=0.0                                                        19DEC02.135
>           ENDDO                                                                  19DEC02.136
>         ENDDO                                                                    19DEC02.137
>       ENDIF                                                                      19DEC02.138
561a642,658
>           IF(SEAICE(I,J).GT.0.02)THEN                                            19DEC02.139
> C                                                                                19DEC02.140
> C CALCULATE AVERAGE SURFACE PROPERTIES FOR SEAICE GRID POINTS AS SIMPLE AVERAGE  19DEC02.141
> C OF SEAICE SURFACE PROPERTIES AND WATER SURFACE PROPERTIES                      19DEC02.142
> C                                                                                19DEC02.143
>             ALB(I,J)=ALBD(ISICE,ISN)/100.*SEAICE(I,J)+                           19DEC02.144
>      +        ALBD(ISWATER,ISN)/100.*(1.-SEAICE(I,J))                            19DEC02.145
>             THC(I,J)=THERIN(ISICE,ISN)/100.                                      19DEC02.146
> c sea-ice roughness=0.1 cm                                                       19DEC02.147
>             ZNT(I,J)=0.1/100.                                                    19DEC02.148
>             EMISS(I,J)=SFEM(ISICE,ISN)*SEAICE(I,J)+                              19DEC02.149
>      +        SFEM(ISWATER,ISN)*(1.-SEAICE(I,J))                                 19DEC02.150
>             MAVAIL(I,J)=SLMO(ISICE,ISN)*SEAICE(I,J)+                             19DEC02.151
>      +        SLMO(ISWATER,ISN)*(1.-SEAICE(I,J))                                 19DEC02.152
> C TREAT SEAICE GRID POINTS AS LAND GRID POINTS                                   19DEC02.153
>             XLAND(I,J)=1.0                                                       19DEC02.154
>           ENDIF                                                                  19DEC02.155
592a690,712
> C  NEW NOAH ALBEDO CALCULATION                                                   19DEC02.156
>           IF(ISOIL.EQ.2)THEN                                                     19DEC02.157
> C                                                                                19DEC02.158
>             IF(RDMAXALB) THEN                                                    19DEC02.159
>               SNOALB=ALBMAX(I,J)*0.01                                            19DEC02.160
>             ELSE                                                                 19DEC02.161
>               SNOALB=MAXALB(IS)*0.01                                             19DEC02.162
>             ENDIF                                                                19DEC02.163
> C                                                                                19DEC02.164
>             IF(RDBRDALB) THEN                                                    19DEC02.165
>               ALBBRD=ALBEDO(I,J)*0.01                                            19DEC02.166
>             ELSE                                                                 19DEC02.167
>               ALBBRD=ALBD(IS,ISN)*0.01                                           19DEC02.168
>             ENDIF                                                                19DEC02.169
> C                                                                                19DEC02.170
>             SHDFAC = VEGFRC(I,J)/100.                                            19DEC02.171
>             SHDMIN = XVEGMN(I,J)/100.                                            19DEC02.172
>             SNCOVR = SNOWC(I,J)                                                  19DEC02.173
> C                                                                                19DEC02.174
>             ALB(I,J) = ALBBRD + (1.0- (SHDFAC - SHDMIN))* SNCOVR *               19DEC02.175
>      -                 (SNOALB - ALBBRD)                                         19DEC02.176
>                                                                                  19DEC02.177
>           ENDIF                                                                  19DEC02.178
605a726,733
>           IF(NINT(SATBRT(I,J)).EQ.ISICE)THEN                                     19DEC02.179
> C              BASED UPON YEN (1981)                                             19DEC02.180
> C              DENSITY * SPECIFIC HEAT / MOL / K / MOLECULAR WEIGHT              19DEC02.181
>             CAPG(I,J)=917.*34000./18.                                            19DEC02.182
>           ELSEIF(SEAICE(I,J).GT.0.02)THEN                                        19DEC02.183
> C              DENSITY * SPECIFIC HEAT / KG / K                                  19DEC02.184
>             CAPG(I,J)=900.*3400.                                                 19DEC02.185
>           ELSE                                                                   19DEC02.186
606a735
>           ENDIF                                                                  19DEC02.187
609,614c738,753
< C                                                                                INIT.639
< C-----READ IN LOWBDY INFORMATION                                                 07NOV00.85
< C                                                                                INIT.641
<       CALL LBDYIN(1,TBDYLBE,BDYLTIM,BDYLFRQ,ISOIL,IACTIV,                        05DEC01.59
<      -     IFSNOW,IX,JX)                                                         05DEC01.60
< C                                                                                07NOV00.87
---
> cJJC - moved call to LBDYIN after call to RDINIT                                 19DEC02.188
> C                                                                                19DEC02.189
> C SET TMN TO FREEZING POINT OF SEA WATER (271.4 K) FOR SEAICE GRID POINTS        19DEC02.190
> C SET SNOWC TO 1 FOR SEAICE AND PERMANENT ICE GRID POINTS                        19DEC02.191
> C                                                                                19DEC02.192
>       DO I=1,IL                                                                  19DEC02.193
>         DO J=1,JL                                                                19DEC02.194
>           IF(SEAICE(I,J).GT.0.02.AND.(IEXSI.GE.1))THEN                           19DEC02.195
>             TMN(I,J)=271.4                                                       19DEC02.196
>             SNOWC(I,J)=1.0                                                       19DEC02.197
>           ENDIF                                                                  19DEC02.198
>           IF(NINT(SATBRT(I,J)).EQ.ISICE)THEN                                     19DEC02.199
>             SNOWC(I,J)=1.0                                                       19DEC02.200
>           ENDIF                                                                  19DEC02.201
>         ENDDO                                                                    19DEC02.202
>       ENDDO                                                                      19DEC02.203
742c881
<       CALL BDYIN(9,TBDYBE,BDYTIM,BDYFRQ,IL,JL)                                   INIT.821
---
>       CALL BDYIN(9,TBDYBE,BDYTIM,BDYFRQ,IL,JL,IBMOIST)                           19DEC02.204
===================================================================
domain/initial/param.F
diff -r3.55 -r3.66
37a38,40
> #     include <paramveg_USGS.incl>                                               19DEC02.205
> #     include <paramsoil_STAS.incl>                                              19DEC02.206
> #     include <paramgen_LSM.incl>                                                19DEC02.207
39c42
<       CHARACTER*4 LUTYPE                                                         PARAM.35
---
>       CHARACTER*4 MMINSL                                                         19DEC02.208
52c55
<       INTEGER I,J,K,L,L2                                                         PARAM.48
---
>       INTEGER I,J,K,L,L2,IINDEX, NUM_SLOPE                                       19DEC02.209
56c59
<       INTEGER NDIM,LUMATCH,LUCATS,LUSEAS                                         PARAM.52
---
>       INTEGER NDIM,LUMATCH,LUSEAS                                                19DEC02.210
63c66
<       REAL BB,CC,SSUM,XX,XTOP,XBOT,VQMAX,YY,WK,QK,WKP1,QKP1                      PARAM.59
---
>       REAL AA,CC,SSUM,XX,XTOP,XBOT,VQMAX,YY,WK,QK,WKP1,QKP1                      19DEC02.211
74d76
<       REAL CKH                                                                   05DEC01.111
114c116
<      &        IFRAD,ICUPA,IMPHYS,IBLTYP,ISHALLO,ISOIL,                           PARAM.106
---
>      &        IFRAD,ICUPA,IMPHYS,IBLTYP,ISHALLO,ISOIL,IPOLAR,                    19DEC02.212
116c118
<      &        ,ISMRD,NUDGE,IFGROW,IZ0TOPT                                        05DEC01.112
---
>      &        ,ISMRD,NUDGE,IFGROW,IZ0TOPT,IEXSI,RDMAXALB,RDBRDALB                19DEC02.213
245a248,253
> C     RDMAXALB: READ MAX SNOW ALBEDO FROM INPUT CLIMATOLOGY FILE                 19DEC02.214
> C              = .T. ; READ IN (SUPPLIED BY REGRID)                              19DEC02.215
> C              = .F. ; USE TABLE (VEGPARM.TBL) VALUE AND LAND-USE                19DEC02.216
> C     RDBRDALB: READ BACKGROUND ALBEDO FROM MONTHLY INPUT FILE                   19DEC02.217
> C              = .T. ; READ IN (SUPPLIED BY REGRID)                              19DEC02.218
> C              = .F. ; USE TABLE (LANDUSE.TBL) VALUE AND LAND-USE                19DEC02.219
674a683
>       CLOSE (19)                                                                 19DEC02.220
693a703,938
>                                                                                  19DEC02.221
> C                                                                                19DEC02.222
> C-----FOLLOWING 3 TABLES ARE REQUIRED ONLY FOR NOAH LSM                          19DEC02.223
> C                                                                                19DEC02.224
> #ifdef SOIL2                                                                     19DEC02.225
> C                                                                                19DEC02.226
> C-----SPECIFY VEGETATION RELATED CHARACTERISTICS :                               19DEC02.227
> C             ALBEDO: SFC albedo (in percentage)                                 19DEC02.228
> C                 Z0: Roughness length (m)                                       19DEC02.229
> C             SHDFAC: Green vegetation fraction (in percentage)                  19DEC02.230
> C  Note: The ALBEDO, Z0, and SHDFAC values read from the following table         19DEC02.231
> C          ALBEDO, amd Z0 are specified in LAND-USE TABLE; and SHDFAC is         19DEC02.232
> C          the monthly green vegetation data                                     19DEC02.233
> C             CMXTBL: MAX CNPY Capacity (m)                                      19DEC02.234
> C              NROOT: Rooting depth (M)                                          19DEC02.235
> C              RSMIN: Mimimum stomatal resistance (s m-1)                        19DEC02.236
> C              RSMAX: Max. stomatal resistance (s m-1)                           19DEC02.237
> C                RGL: Parameters used in radiation stress function               19DEC02.238
> C                 HS: Parameter used in vapor pressure deficit functio           19DEC02.239
> C               TOPT: Optimum transpiration air temperature. (K)                 19DEC02.240
> C             CMCMAX: Maximum canopy water capacity                              19DEC02.241
> C             CFACTR: Parameter used in the canopy inteception calculati         19DEC02.242
> C               SNUP: Threshold snow depth (in water equivalent m) that          19DEC02.243
> C                     implies 100% snow cover                                    19DEC02.244
> C                LAI: Leaf area index (dimensionless)                            19DEC02.245
> C             MAXALB: Upper bound on maximum albedo over deep snow               19DEC02.246
> C                                                                                19DEC02.247
> C-----READ IN VEGETAION PROPERTIES FROM VEGPARM.TBL                              19DEC02.248
> C                                                                                19DEC02.249
>          IF (DM_IONODE()) THEN                                                   19DEC02.250
>            OPEN(19, FILE='VEGPARM.TBL',FORM='FORMATTED',STATUS='OLD',            19DEC02.251
>      -              ERR=9006)                                                    19DEC02.252
>          ENDIF                                                                   19DEC02.253
>          PRINT *, 'INPUT LANDUSE = ',MMINLU                                      19DEC02.254
>          IF (DM_IONODE()) THEN                                                   19DEC02.255
>            LUMATCH=0                                                             19DEC02.256
> C1999   CONTINUE                                                                 19DEC02.257
>            READ (19,*)                                                           19DEC02.258
>            READ (19,2000,END=2002)LUTYPE                                         19DEC02.259
>            READ (19,*)LUCATS,IINDEX                                              19DEC02.260
>            IF(LUTYPE.EQ.MMINLU)THEN                                              19DEC02.261
>              LUN=LUCATS                                                          19DEC02.262
>                PRINT *, 'LANDUSE TYPE = ',LUTYPE,' FOUND',                       19DEC02.263
>      -                LUCATS,' CATEGORIES'                                       19DEC02.264
>              LUMATCH=1                                                           19DEC02.265
>            ENDIF                                                                 19DEC02.266
>                IF(LUTYPE.EQ.MMINLU)THEN                                          19DEC02.267
>              DO LC=1,LUCATS                                                      19DEC02.268
>                  READ (19,*)IINDEX,DUMMY,DUMMY,DUMMY,                            19DEC02.269
>      -                      NROTBL(LC),RSTBL(LC),RGLTBL(LC),HSTBL(LC),           19DEC02.270
>      -                      SNUPTBL(LC),LAITBL(LC),MAXALB(LC)                    19DEC02.271
>              ENDDO                                                               19DEC02.272
>              READ (19,*)                                                         19DEC02.273
>              READ (19,*)TOPT_DATA                                                19DEC02.274
>              READ (19,*)                                                         19DEC02.275
>              READ (19,*)CMCMAX_DATA                                              19DEC02.276
>              READ (19,*)                                                         19DEC02.277
>              READ (19,*)CFACTR_DATA                                              19DEC02.278
>              READ (19,*)                                                         19DEC02.279
>              READ (19,*)RSMAX_DATA                                               19DEC02.280
>              READ (19,*)                                                         19DEC02.281
>              READ (19,*)BARE                                                     19DEC02.282
>               ENDIF                                                              19DEC02.283
> C       GOTO 1999                                                                19DEC02.284
>  2002   CONTINUE                                                                 19DEC02.285
>          CLOSE (19)                                                              19DEC02.286
>            IF(LUMATCH.EQ.0)THEN                                                  19DEC02.287
>              PRINT *,'LANDUSE IN INPUT FILE DOES NOT MATCH ',                    19DEC02.288
>      -               'VEGPARM TABLE'                                             19DEC02.289
>              STOP 'INCONSISTENT OR MISSING VEGPARM FILE'                         19DEC02.290
>            ENDIF                                                                 19DEC02.291
>          ENDIF                                                                   19DEC02.292
>          CALL DM_BCAST_STRING( LUTYPE , 4 )                                      19DEC02.293
>          CALL DM_BCAST_INTEGERS ( LUCATS,  1 )                                   19DEC02.294
>          CALL DM_BCAST_INTEGERS ( BARE,  1 )                                     19DEC02.295
>          CALL DM_BCAST_REALS    (TOPT_DATA, 1)                                   19DEC02.296
>          CALL DM_BCAST_REALS    (CMCMAX_DATA, 1)                                 19DEC02.297
>          CALL DM_BCAST_REALS    (CFACTR_DATA, 1)                                 19DEC02.298
>          CALL DM_BCAST_REALS    (RSMAX_DATA, 1)                                  19DEC02.299
>          CALL DM_BCAST_REALS    ( ALBTBL,    NLU )                               19DEC02.300
>          CALL DM_BCAST_REALS    ( Z0TBL,    NLU )                                19DEC02.301
>          CALL DM_BCAST_REALS    ( SHDTBL,    NLU )                               19DEC02.302
>          CALL DM_BCAST_INTEGERS    ( NROTBL,    NLU )                            19DEC02.303
>          CALL DM_BCAST_REALS    ( RSTBL,    NLU )                                19DEC02.304
>          CALL DM_BCAST_REALS    ( RGLTBL,    NLU )                               19DEC02.305
>          CALL DM_BCAST_REALS    ( HSTBL,    NLU )                                19DEC02.306
>          CALL DM_BCAST_REALS    ( SNUPTBL,    NLU )                              19DEC02.307
>          CALL DM_BCAST_REALS    ( LAITBL,    NLU )                               19DEC02.308
>          CALL DM_BCAST_REALS    ( MAXALB,    NLU )                               19DEC02.309
> C                                                                                19DEC02.310
> C                                                                                19DEC02.311
> C-----SPECIFY SOIL TEXTURE RELATED CHARACTERISTICS :                             19DEC02.312
> C        SMCMAX: MAX soil moisture content (porosity)                            19DEC02.313
> C        SMCREF: Reference soil moisture  (field capacity)                       19DEC02.314
> C        SMCWLT: Wilting point soil moisture                                     19DEC02.315
> C        SMCDRY: Air dry soil moist content limits                               19DEC02.316
> C        SATPSI: SAT (saturation) soil potential                                 19DEC02.317
> C         DKSAT: SAT soil conductivity                                           19DEC02.318
> C          BEXP: B parameter                                                     19DEC02.319
> C        SSATDW: SAT soil diffusivity                                            19DEC02.320
> C           F1: Soil thermal diffusivity/conductivity coef.                      19DEC02.321
> C        QUARTZ: Soil quartz content                                             19DEC02.322
> C                                                                                19DEC02.323
> C-----READ IN SOIL PROPERTIES FROM SOILPARM.TBL                                  19DEC02.324
> C                                                                                19DEC02.325
>          IF (DM_IONODE()) THEN                                                   19DEC02.326
>            OPEN(19, FILE='SOILPARM.TBL',FORM='FORMATTED',STATUS='OLD',           19DEC02.327
>      -              ERR=9006)                                                    19DEC02.328
>          ENDIF                                                                   19DEC02.329
>          MMINSL='STAS'                                                           19DEC02.330
>          PRINT *, 'INPUT SOIL TEXTURE CLASSIFICAION = ',MMINSL                   19DEC02.331
>          IF (DM_IONODE()) THEN                                                   19DEC02.332
>            LUMATCH=0                                                             19DEC02.333
> C1999   CONTINUE                                                                 19DEC02.334
>            READ (19,*)                                                           19DEC02.335
>            READ (19,2000,END=2003)SLTYPE                                         19DEC02.336
>            READ (19,*)SLCATS,IINDEX                                              19DEC02.337
>            IF(SLTYPE.EQ.MMINSL)THEN                                              19DEC02.338
>                PRINT *, 'SOIL TEXTURE CLASSIFICATION = ',SLTYPE,                 19DEC02.339
>      -                  ' FOUND',SLCATS,' CATEGORIES'                            19DEC02.340
>              LUMATCH=1                                                           19DEC02.341
>            ENDIF                                                                 19DEC02.342
>                IF(SLTYPE.EQ.MMINSL)THEN                                          19DEC02.343
>              DO LC=1,SLCATS                                                      19DEC02.344
>                  READ (19,*)IINDEX,BB(LC),DRYSMC(LC),F11(LC),MAXSMC(LC),         19DEC02.345
>      -                      REFSMC(LC),SATPSI(LC),SATDK(LC), SATDW(LC),          19DEC02.346
>      -                      WLTSMC(LC), QTZ(LC)                                  19DEC02.347
>              ENDDO                                                               19DEC02.348
>               ENDIF                                                              19DEC02.349
> C       GOTO 1999                                                                19DEC02.350
>  2003   CONTINUE                                                                 19DEC02.351
>          CLOSE (19)                                                              19DEC02.352
>            IF(LUMATCH.EQ.0)THEN                                                  19DEC02.353
>          PRINT *,'SOIL TEXTURE IN INPUT FILE DOES NOT MATCH SOILPARM ',          19DEC02.354
>      -           'TABLE'                                                         19DEC02.355
>          STOP 'INCONSISTENT OR MISSING SOILPARM FILE'                            19DEC02.356
>            ENDIF                                                                 19DEC02.357
>          ENDIF                                                                   19DEC02.358
>          CALL DM_BCAST_STRING( SLTYPE , 4 )                                      19DEC02.359
>          CALL DM_BCAST_INTEGERS ( SLCATS, 1 )                                    19DEC02.360
>          CALL DM_BCAST_REALS    ( BB,     NSLTYPE )                              19DEC02.361
>          CALL DM_BCAST_REALS    ( DRYSMC, NSLTYPE )                              19DEC02.362
>          CALL DM_BCAST_REALS    ( F11,    NSLTYPE )                              19DEC02.363
>          CALL DM_BCAST_REALS    ( MAXSMC, NSLTYPE )                              19DEC02.364
>          CALL DM_BCAST_REALS    ( REFSMC, NSLTYPE )                              19DEC02.365
>          CALL DM_BCAST_REALS    ( SATPSI, NSLTYPE )                              19DEC02.366
>          CALL DM_BCAST_REALS    ( SATDK,  NSLTYPE )                              19DEC02.367
>          CALL DM_BCAST_REALS    ( SATDW,  NSLTYPE )                              19DEC02.368
>          CALL DM_BCAST_REALS    ( WLTSMC, NSLTYPE )                              19DEC02.369
>          CALL DM_BCAST_REALS    ( QTZ,    NSLTYPE )                              19DEC02.370
> C                                                                                19DEC02.371
> C                                                                                19DEC02.372
> C-----SPECIFY GENERAL PARAMETERS OF LSM                                          19DEC02.373
> C ----------------------------------------------------------------------         19DEC02.374
> C Class parameter 'SLOPETYP' was included to estimate linear reservoir           19DEC02.375
> C coefficient 'SLOPE' to the baseflow runoff out of the bottom layer.            19DEC02.376
> C lowest class (slopetyp=0) means highest slope parameter = 1.                   19DEC02.377
> C definition of slopetyp from 'zobler' slope type:                               19DEC02.378
> C slope class  percent slope                                                     19DEC02.379
> C 1            0-8                                                               19DEC02.380
> C 2            8-30                                                              19DEC02.381
> C 3            > 30                                                              19DEC02.382
> C 4            0-30                                                              19DEC02.383
> C 5            0-8 & > 30                                                        19DEC02.384
> C 6            8-30 & > 30                                                       19DEC02.385
> C 7            0-8, 8-30, > 30                                                   19DEC02.386
> C 9            GLACIAL ICE                                                       19DEC02.387
> C BLANK        OCEAN/SEA                                                         19DEC02.388
> C ----------------------------------------------------------------------         19DEC02.389
> C NOTE:                                                                          19DEC02.390
> C CLASS 9 FROM 'ZOBLER' FILE SHOULD BE REPLACED BY 8 AND 'BLANK' 9               19DEC02.391
> C ----------------------------------------------------------------------         19DEC02.392
> C       SLOPE_DATA: linear reservoir coefficient                                 19DEC02.393
> C       SBETA_DATA: parameter used to caluculate vegetation effect on soil heat  19DEC02.394
> C       FXEXP_DAT:  soil evaporation exponent used in DEVAP                      19DEC02.395
> C       CSOIL_DATA: soil heat capacity [J M-3 K-1]                               19DEC02.396
> C       SALP_DATA: shape parameter of  distribution function of snow cover       19DEC02.397
> C       REFDK_DATA and REFKDT_DATA: parameters in the surface runoff parameteri  19DEC02.398
> C       FRZK_DATA: frozen ground parameter                                       19DEC02.399
> C       ZBOT_DATA: depth[M] of lower boundary soil temperature                   19DEC02.400
> C       CZIL_DATA: calculate roughness length of heat                            19DEC02.401
> C       SMLOW_DATA and MHIGH_DATA: two soil moisture wilt, soil moisture refere  19DEC02.402
> C                                                                                19DEC02.403
> C-----READ IN GENERAL PARAMETERS FROM GENPARM.TBL                                19DEC02.404
> C                                                                                19DEC02.405
>          IF (DM_IONODE()) THEN                                                   19DEC02.406
>            OPEN(19, FILE='GENPARM.TBL',FORM='FORMATTED',STATUS='OLD',            19DEC02.407
>      -              ERR=9006)                                                    19DEC02.408
>          ENDIF                                                                   19DEC02.409
>          IF (DM_IONODE()) THEN                                                   19DEC02.410
>            READ (19,*)                                                           19DEC02.411
>            READ (19,*)                                                           19DEC02.412
>            READ (19,*) NUM_SLOPE                                                 19DEC02.413
>              SLPCATS=NUM_SLOPE                                                   19DEC02.414
>              DO LC=1,SLPCATS                                                     19DEC02.415
>                  READ (19,*)SLOPE_DATA(LC)                                       19DEC02.416
>              ENDDO                                                               19DEC02.417
>              READ (19,*)                                                         19DEC02.418
>              READ (19,*)SBETA_DATA                                               19DEC02.419
>              READ (19,*)                                                         19DEC02.420
>              READ (19,*)FXEXP_DATA                                               19DEC02.421
>              READ (19,*)                                                         19DEC02.422
>              READ (19,*)CSOIL_DATA                                               19DEC02.423
>              READ (19,*)                                                         19DEC02.424
>              READ (19,*)SALP_DATA                                                19DEC02.425
>              READ (19,*)                                                         19DEC02.426
>              READ (19,*)REFDK_DATA                                               19DEC02.427
>              READ (19,*)                                                         19DEC02.428
>              READ (19,*)REFKDT_DATA                                              19DEC02.429
>              READ (19,*)                                                         19DEC02.430
>              READ (19,*)FRZK_DATA                                                19DEC02.431
>              READ (19,*)                                                         19DEC02.432
>              READ (19,*)ZBOT_DATA                                                19DEC02.433
>              READ (19,*)                                                         19DEC02.434
>              READ (19,*)CZIL_DATA                                                19DEC02.435
>              READ (19,*)                                                         19DEC02.436
>              READ (19,*)SMLOW_DATA                                               19DEC02.437
>              READ (19,*)                                                         19DEC02.438
>              READ (19,*)SMHIGH_DATA                                              19DEC02.439
>           ENDIF                                                                  19DEC02.440
>          CLOSE (19)                                                              19DEC02.441
>                                                                                  19DEC02.442
>          CALL DM_BCAST_INTEGERS ( SLPCATS,  1 )                                  19DEC02.443
>          CALL DM_BCAST_REALS    ( SLOPE_DATA,   NSLOPE)                          19DEC02.444
>          CALL DM_BCAST_REALS    (SBETA_DATA, 1)                                  19DEC02.445
>          CALL DM_BCAST_REALS    (FXEXP_DATA, 1)                                  19DEC02.446
>          CALL DM_BCAST_REALS    (CSOIL_DATA, 1)                                  19DEC02.447
>          CALL DM_BCAST_REALS    (SALP_DATA, 1)                                   19DEC02.448
>          CALL DM_BCAST_REALS    (REFDK_DATA, 1)                                  19DEC02.449
>          CALL DM_BCAST_REALS    (REFKDT_DATA, 1)                                 19DEC02.450
>          CALL DM_BCAST_REALS    (FRZK_DATA, 1)                                   19DEC02.451
>          CALL DM_BCAST_REALS    (ZBOT_DATA, 1)                                   19DEC02.452
>          CALL DM_BCAST_REALS    (CZIL_DATA, 1)                                   19DEC02.453
>          CALL DM_BCAST_REALS    (SMLOW_DATA, 1)                                  19DEC02.454
>          CALL DM_BCAST_REALS    (SMHIGH_DATA, 1)                                 19DEC02.455
> #endif                                                                           19DEC02.456
758a1004,1005
>       RDMAXALB=.FALSE.                                                           19DEC02.457
>       RDBRDALB=.FALSE.                                                           19DEC02.458
812a1060,1061
> C SET DEFAULTS FOR SEA ICE FLAG IEXSI                                            19DEC02.459
>       IEXSI=0                                                                    19DEC02.460
1190a1440
>       XSTNES(1)=0.                                                               19DEC02.461
1743a1994,2001
>       IF(ISOIL.NE.1.AND.IEXSI.GE.1)THEN                                          19DEC02.462
>         PRINT *,'ERROR: IEXSI.GE.1 REQUIRES ISOIL=1'                             19DEC02.463
>         IWARN=IWARN+1                                                            19DEC02.464
>       ENDIF                                                                      19DEC02.465
>       IF(IBLTYP(1).NE.4.AND.IEXSI.GE.1)THEN                                      19DEC02.466
>         PRINT *,'ERROR: IEXSI.GE.1 REQUIRES IBLTYP=4'                            19DEC02.467
>         IWARN=IWARN+1                                                            19DEC02.468
>       ENDIF                                                                      19DEC02.469
1748a2007,2011
>       IF(IFSNOW(1).EQ.2.AND.ISOIL.EQ.2)THEN                                      19DEC02.470
>         PRINT *,'ERROR: IFSNOW=2 CANNOT BE USED WHEN ISOIL=2'                    19DEC02.471
>         PRINT *,'       CHANGE THE VALUE OF EITHER IFSNOW or ISOIL'              19DEC02.472
>         IWARN=IWARN+1                                                            19DEC02.473
>       ENDIF                                                                      19DEC02.474
1826a2090,2093
>           IF(IBLTYP(N).NE.4.AND.IEXSI.GE.1)THEN                                  19DEC02.475
>             PRINT *,'ERROR: IEXSI.GE.1 REQUIRES IBLTYP=4'                        19DEC02.476
>             IWARN=IWARN+1                                                        19DEC02.477
>           ENDIF                                                                  19DEC02.478
1855a2123,2133
>           IF(IFSNOW(N).EQ.2.AND.ISOIL.EQ.2)THEN                                  19DEC02.479
>             PRINT *,'ERROR: IFSNOW=2 CANNOT BE USED WHEN ISOIL=2'                19DEC02.480
>             PRINT *,'       CHANGE THE VALUE OF EITHER IFSNOW or ISOIL'          19DEC02.481
>             IWARN=IWARN+1                                                        19DEC02.482
>           ENDIF                                                                  19DEC02.483
>           IF(IOVERW(N).EQ.2.AND.IMOIAV(N).EQ.2) THEN                             19DEC02.484
>             PRINT *,'ERROR: IMOIAV=2 REQUIRES IOVERW=1'                          19DEC02.485
>             PRINT *,'       IMOIAV=2 DOES NOT WORK WELL WITH'                    19DEC02.486
>             PRINT *,'       INTERPOLATED SOIL MOISTURE'                          19DEC02.487
>             IWARN=IWARN+1                                                        19DEC02.488
>           ENDIF                                                                  19DEC02.489
1984c2262
<           BB=ALOG(A(KTOP))+ALOG(A(KBASE))                                        PARAM.1755
---
>           AA=ALOG(A(KTOP))+ALOG(A(KBASE))                                        19DEC02.490
1989c2267
<             TWGHT(K,KBASE,KTOP)=(XX*XX)-(BB*XX)+CC                               PARAM.1760
---
>             TWGHT(K,KBASE,KTOP)=(XX*XX)-(AA*XX)+CC                               19DEC02.491
2001c2279
<           BB=XTOP+XBOT                                                           PARAM.1772
---
>           AA=XTOP+XBOT                                                           19DEC02.492
2008,2009c2286,2287
<           WK=(XX*XX)-(BB*XX)+CC                                                  PARAM.1779
<           QK=-((YY*YY)-(BB*YY)+CC)                                               PARAM.1780
---
>           WK=(XX*XX)-(AA*XX)+CC                                                  19DEC02.493
>           QK=-((YY*YY)-(AA*YY)+CC)                                               19DEC02.494
2015,2016c2293,2294
<             WKP1=(XX*XX)-(BB*XX)+CC                                              PARAM.1786
<             QKP1=-((YY*YY)-(BB*YY)+CC)                                           PARAM.1787
---
>             WKP1=(XX*XX)-(AA*XX)+CC                                              19DEC02.495
>             QKP1=-((YY*YY)-(AA*YY)+CC)                                           19DEC02.496
2320,2321c2598,2600
< 1306  FORMAT(' !XXX! ATTEMPTING CGM OBS NUDGING WITH NIOBF STILL SET',           PARAM.2062
<      1' TO ONE...')                                                              PARAM.2063
---
> 1306  FORMAT(' !!!!! ATTEMPTING OBS NUDGING WITHOUT COMPILING OBS',              19DEC02.497
>      1' NUDGING CODE.',/,'       SET FDDAOBS=1 IN configure.user',               19DEC02.498
>      2' FILE AND RECOMPILE.')                                                    19DEC02.499
2466a2746,2747
>       IF(IEXSI.EQ.1)PRINT3101,IEXSI                                              19DEC02.500
>       IF(IEXSI.EQ.2)PRINT3102,IEXSI                                              19DEC02.501
2586c2867
<  1072 FORMAT(' ISOIL  = ',I3, '  OSU LAND-SURFACE MODEL.')                       PARAM.2311
---
>  1072 FORMAT(' ISOIL  = ',I3, '  NOAH LAND-SURFACE MODEL.')                      19DEC02.502
2657a2939,2940
>  3101 FORMAT(' IEXSI  = ',I3,' SEA ICE BASED ON TG')                             19DEC02.503
>  3102 FORMAT(' IEXSI  = ',I3,' SEA ICE FROM INPUT FILE')                         19DEC02.504
2688a2972
>                                                                                  19DEC02.505
===================================================================
domain/initial/paramr.F
diff -r3.2 -r3.5
31a32
>       RHO_NOT = 101325.0/(287.05*298.0)                                          19DEC02.506
34,37c35
< C RON2 IS USED IN REISNER GRAUPEL SCHEME INSTEAD OF RON                          05DEC01.202
<       RON2=1.E10                                                                 05DEC01.203
< C USE RON=1.E9 FOR DRIZZLE                                                       PARAMR.34
< C     RON=1.E9                                                                   PARAMR.35
---
>       RON2=1.E10                                                                 19DEC02.507
39a38,42
>       ron_min = 8.e6                                                             19DEC02.508
>       ron_qr0 = 0.00010                                                          19DEC02.509
>       ron_delqr0 = 0.25*ron_qr0                                                  19DEC02.510
>       ron_const1r = (ron2-ron_min)*0.5                                           19DEC02.511
>       ron_const2r = (ron2+ron_min)*0.5                                           19DEC02.512
59a63
>       DIACE_min = 2.0 * (3.0*XM01/(4.0*PI*DICE))**0.3333                         19DEC02.513
81c85,88
<       CNP=1.E8                                                                   PARAMR.79
---
> C Number of cloud droplets. Walko autoconv is Kessler-like with min diameter     19DEC02.514
> C of cloud drops exceed 17 microns before conversion to rain.  Using             19DEC02.515
> C 132 drops per cc, implies qc>0.35 g/kg before rain is produced.                19DEC02.516
>       CNP=132.E6                                                                 19DEC02.517
142c149
<       BACRCG=3.+BG                                                               PARAMR.139
---
>       BACRCG=4.+BG                                                               19DEC02.518
144,145c151,152
< C     GI=3.+BG                                                                   05DEC01.206
<       GI=4.+BG                                                                   05DEC01.207
---
>       GI=3.+BG                                                                   19DEC02.519
> C     GI=4.+BG                                                                   19DEC02.520
===================================================================
domain/io/Makefile
diff -r3.3 -r3.5
20a21
> 	rho_mlt.o \
41a43
> 	rho_mlt.i \
63a66
> 	rho_mlt.f \
128c131
< outtap.o: ../../include/fogstuf.incl 
---
> outtap.o: ../../include/fogstuf.incl  ../../include/paramveg_USGS.incl
143c146,148
< rdinit.o: ../../include/soil.incl
---
> rdinit.o: ../../include/soil.incl ../../include/paramsoil_STAS.incl
> rdinit.o: ../../include/paramveg_USGS.incl ../../include/paramgen_LSM.incl
> rdinit.o: ../../include/pmoist.incl
===================================================================
domain/io/output.F
diff -r3.10 -r3.13
13a14
>       LOGICAL RESTRTS_EXISTS                                                     19DEC02.521
103,104c104,105
<         DO 774 J = 1,MJX                                                         05DEC01.213
<         DO 774 I = 1,MIX                                                         05DEC01.214
---
>         DO 774 J = 1,MJXC                                                        19DEC02.522
>         DO 774 I = 1,MIXC                                                        19DEC02.523
===================================================================
domain/io/outtap.F
diff -r3.52 -r3.66
2c2
< C      IMPLICIT NONE                                                             25JAN00.110
---
>        IMPLICIT NONE                                                             19DEC02.524
39a40
> #     include <paramveg_USGS.incl>                                               19DEC02.525
47a49
>       INTEGER ITMP                                                               19DEC02.526
78a81
>       REAL  HDOTH2(MIX*MJX*(MKX+1))                                              19DEC02.527
90a94,96
>       REAL SCR2(IOSCRSZ), HDOTH2(IOSCRSZ)                                        19DEC02.528
>       COMMON /OUTSCRATCH/ SCR2                                                   19DEC02.529
>       EQUIVALENCE (SCR2,HDOTH2)                                                  19DEC02.530
95a102,105
>       CHARACTER*8 MONALBNAMECHAR                                                 19DEC02.531
>       INTEGER MONTHLOOP                                                          19DEC02.532
>       CHARACTER *9 MONTHNAME(12)                                                 19DEC02.533
>                                                                                  19DEC02.534
99a110,125
> C                                                                                19DEC02.535
> C---- NAMES OF THE MONTHS FOR CHAR STRING BUILDS FOR MONTHLY ALBEDO              19DEC02.536
> C                                                                                19DEC02.537
>       MONTHNAME( 1)(1:9) = 'JANUARY  '                                           19DEC02.538
>       MONTHNAME( 2)(1:9) = 'FEBRUARY '                                           19DEC02.539
>       MONTHNAME( 3)(1:9) = 'MARCH    '                                           19DEC02.540
>       MONTHNAME( 4)(1:9) = 'APRIL    '                                           19DEC02.541
>       MONTHNAME( 5)(1:9) = 'MAY      '                                           19DEC02.542
>       MONTHNAME( 6)(1:9) = 'JUNE     '                                           19DEC02.543
>       MONTHNAME( 7)(1:9) = 'JULY     '                                           19DEC02.544
>       MONTHNAME( 8)(1:9) = 'AUGUST   '                                           19DEC02.545
>       MONTHNAME( 9)(1:9) = 'SEPTEMBER'                                           19DEC02.546
>       MONTHNAME(10)(1:9) = 'OCTOBER  '                                           19DEC02.547
>       MONTHNAME(11)(1:9) = 'NOVEMBER '                                           19DEC02.548
>       MONTHNAME(12)(1:9) = 'DECEMBER '                                           19DEC02.549
>                                                                                  19DEC02.550
134c160,161
<             IF (LEXIST) ITAPCNT = ITAPCNT+1                                      05DEC01.238
---
>             IF (LEXIST .AND. IFREST) ITAPCNT = ITAPCNT+1                         19DEC02.551
>             IF(ITAPCNT.LE.99) THEN                                               19DEC02.552
135a163,165
>             ELSE                                                                 19DEC02.553
>             WRITE (FILENM,91) FILENM2,ITAPCNT                                    19DEC02.554
>             ENDIF                                                                19DEC02.555
286c316
<       JBHI (3,11)=5                                                              05DEC01.240
---
>       JBHI (3,11)=6                                                              19DEC02.556
811a842
>           IF(IMPHYS(NESCOU).EQ.7)THEN                                            19DEC02.557
813c844,845
<             CALL DECOUPLE(QNCA,MIX,MJX,MKX,PSA,HDOTH,IL,JL,KL)                   OUTTAP.755
---
>             CALL DECOUPLE(QNCA,MIX,MJX,MKX,PSA,HDOTH2,IL,JL,KL)                  19DEC02.558
>             CALL RHO_MLT(HDOTH2,IL,JL,KL,PSB,HDOTH,IL,JL,KL)                     19DEC02.559
820a853
>           ENDIF                                                                  19DEC02.560
999a1033
> C        10) SEA ICE FRACTION                                                    19DEC02.561
1072,1073c1106,1107
< C                                                                                OUTTAP.984
<       IF(IFSNOW(NESCOU).EQ.1)THEN                                                05DEC01.275
---
> C                                                                                19DEC02.562
>       IF(IFSNOW(NESCOU).EQ.1.AND.ISOIL.NE.2)THEN                                 19DEC02.563
1079a1114
> C                                                                                19DEC02.564
1083c1118
<      +                     'SNODPTH ',CURRENT_DATE,                              05DEC01.281
---
>      +                     'WEASD   ',CURRENT_DATE,                              19DEC02.565
1087a1123,1130
>       IF(IPOLAR.EQ.1)THEN                                                        19DEC02.566
>         CALL EQUATO(SEAICE,MIX,MJX,1,HDOTH,IL,JL,1)                              19DEC02.567
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         19DEC02.568
>      +                     'SEAICEFR',CURRENT_DATE,                              19DEC02.569
>      +                     'C','YX','(DIMENSIONLESS)',                           19DEC02.570
>      +                     'SEA ICE FRACTION',                                   19DEC02.571
>      +                     IX,JX,1,MIX,MJX,1 )                                   19DEC02.572
>       ENDIF                                                                      19DEC02.573
1245c1288,1308
< 380   FORMAT('SOIL MOISTURE IN LAYER ',I2)                                       OUTTAP.1103
---
> 380   FORMAT('TOTAL SOIL MOIS IN LYR ',I2)                                       19DEC02.574
> C                                                                                19DEC02.575
>         DO L = 1,MLX                                                             19DEC02.576
>                                                                                  19DEC02.577
> #ifndef MPP1                                                                     19DEC02.578
>            CALL EQUATO(SWCA(1,1,L),MIX,MJX,1,HDOTH,IL,JL,1)                      19DEC02.579
> #else                                                                            19DEC02.580
>            CALL EQUATO(SWCA(NOFLIC(1),NOFLIC(1),L),                              19DEC02.581
>      +                 MIX,MJX,1,HDOTH,IL,JL,1)                                  19DEC02.582
> #endif                                                                           19DEC02.583
>            WRITE (NAME(1:8),FMT=371)L                                            19DEC02.584
>            WRITE (DESCRIPTION(1:25),FMT=381)L                                    19DEC02.585
>            CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                      19DEC02.586
>      +                          NAME,CURRENT_DATE,                               19DEC02.587
>      +                          'C','YX','m^3/m^3',                              19DEC02.588
>      +                          DESCRIPTION,                                     19DEC02.589
>      +                          IX,JX,1,MIX,MJX,1 )                              19DEC02.590
>                                                                                  19DEC02.591
>         END DO                                                                   19DEC02.592
> 371     FORMAT('SOIL W',I2)                                                      19DEC02.593
> 381     FORMAT('SOIL LQD WATER IN LYR ',I2)                                      19DEC02.594
1258c1321
<      +                       'SNODPTH ',CURRENT_DATE,                            OUTTAP.1115
---
>      +                       'WEASD   ',CURRENT_DATE,                            19DEC02.595
1262a1326,1367
> C CONVERT SNOWH TO METERS FOR OUTPUT                                             19DEC02.596
>       DO I=1,ILX                                                                 19DEC02.597
>         DO J=1,JLX                                                               19DEC02.598
>           HSCRL(I,J)=SNOWHA(I,J)*0.001                                           19DEC02.599
>         ENDDO                                                                    19DEC02.600
>       ENDDO                                                                      19DEC02.601
>         CALL EQUATO(HSCRL,MIX,MJX,1,HDOTH,IL,JL,1)                               19DEC02.602
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         19DEC02.603
>      +                       'SNOWH   ',CURRENT_DATE,                            19DEC02.604
>      +                       'C','YX','m',                                       19DEC02.605
>      +                       'PHYSICAL SNOW DEPTH',                              19DEC02.606
>      +                       IX,JX,1,MIX,MJX,1 )                                 19DEC02.607
> C                                                                                19DEC02.608
>         CALL EQUATO(SNOWC,MIX,MJX,1,HDOTH,IL,JL,1)                               19DEC02.609
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         19DEC02.610
>      +                       'SNOWCOVR',CURRENT_DATE,                            19DEC02.611
>      +                       'C','YX','fraction',                                19DEC02.612
>      +                       'FRACTIONAL SNOW COVER',                            19DEC02.613
>      +                       IX,JX,1,MIX,MJX,1 )                                 19DEC02.614
> C                                                                                19DEC02.615
>         CALL EQUATO(ALB,MIX,MJX,1,HDOTH,IL,JL,1)                                 19DEC02.616
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         19DEC02.617
>      +                       'ALB     ',CURRENT_DATE,                            19DEC02.618
>      +                       'C','YX','fraction',                                19DEC02.619
>      +                       'ALBEDO',                                           19DEC02.620
>      +                       IX,JX,1,MIX,MJX,1 )                                 19DEC02.621
> C                                                                                19DEC02.622
>         CALL EQUATO(GRNFLX,MIX,MJX,1,HDOTH,IL,JL,1)                              19DEC02.623
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         19DEC02.624
>      +                       'GRNFLX  ',CURRENT_DATE,                            19DEC02.625
>      +                       'C','YX','W m{-2}',                                 19DEC02.626
>      +                       'GROUND HEAT FLUX',                                 19DEC02.627
>      +                       IX,JX,1,MIX,MJX,1 )                                 19DEC02.628
> C                                                                                19DEC02.629
>         CALL EQUATO(VEGFRC,MIX,MJX,1,HDOTH,IL,JL,1)                              19DEC02.630
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         19DEC02.631
>      +                     'VEGFRC',CURRENT_DATE,                                19DEC02.632
>      +                     'C','YX','fraction',                                  19DEC02.633
>      +                     'VEGETATION COVERAGE',                                19DEC02.634
>      +                     IX,JX,1,MIX,MJX,1 )                                   19DEC02.635
>                                                                                  19DEC02.636
> C                                                                                19DEC02.637
1283a1389,1422
>           IF(RDBRDALB)THEN                                                       19DEC02.638
>         DO MONTHLOOP=1,12                                                        19DEC02.639
>         WRITE(MONALBNAMECHAR,FMT='("MONALB",I2.2)') MONTHLOOP                    19DEC02.640
> #ifndef MPP1                                                                     19DEC02.641
>         CALL EQUATO(ALBMON(1,1,MONTHLOOP),MIX,MJX,1,HDOTH,IL,JL,1)               19DEC02.642
> #else                                                                            19DEC02.643
>         CALL EQUATO(ALBMON(NOFLIC(1),NOFLIC(1),MONTHLOOP),                       19DEC02.644
>      +              MIX,MJX,1,HDOTH,IL,JL,1)                                     19DEC02.645
> #endif                                                                           19DEC02.646
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         19DEC02.647
>      +                       MONALBNAMECHAR,CURRENT_DATE,                        19DEC02.648
>      +                       'C','YX','PERCENT',                                 19DEC02.649
>      +            'MONTHLY ALBEDO FOR ' // MONTHNAME(MONTHLOOP),                 19DEC02.650
>      +                       IX,JX,1,MIX,MJX,1 )                                 19DEC02.651
>         END DO                                                                   19DEC02.652
>         CALL EQUATO(ALBEDO,MIX,MJX,1,HDOTH,IL,JL,1)                              19DEC02.653
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         19DEC02.654
>      +                     'ALBEDO   ',CURRENT_DATE,                             19DEC02.655
>      +                     'C','YX','PERCENT',                                   19DEC02.656
>      +                     'BACKGROUND ALBEDO',                                  19DEC02.657
>      +                     IX,JX,1,MIX,MJX,1 )                                   19DEC02.658
> C                                                                                19DEC02.659
>                                                                                  19DEC02.660
>           ENDIF                                                                  19DEC02.661
> C                                                                                19DEC02.662
>           IF(RDMAXALB)THEN                                                       19DEC02.663
>         CALL EQUATO(ALBMAX,MIX,MJX,1,HDOTH,IL,JL,1)                              19DEC02.664
>         CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                         19DEC02.665
>      +                       'ALBSNOMX ',CURRENT_DATE,                           19DEC02.666
>      +                       'C','YX','PERCENT',                                 19DEC02.667
>      +                       'MAXIMUM SNOW ALBEDO',                              19DEC02.668
>      +                       IX,JX,1,MIX,MJX,1 )                                 19DEC02.669
>           ENDIF                                                                  19DEC02.670
> C                                                                                19DEC02.671
1392a1532,1538
>          CALL EQUATO(TA2,MIX,MJX,1,HDOTH,IL,JL,1)                                19DEC02.672
>          CALL WRITE_FIELDREC( iutl,D2,nescou,HDOTH,XTIME,                        19DEC02.673
>      +                        'T2',CURRENT_DATE,                                 19DEC02.674
>      +                        'C','YX','K',                                      19DEC02.675
>      +                        '1.5-meter Temperature',                           19DEC02.676
>      +                        IX,JX,1,MIX,MJX,1 )                                19DEC02.677
> C                                                                                19DEC02.678
===================================================================
domain/io/outts.F
diff -r3.12 -r3.14
12a13,16
> #     include <hdrv3.incl>                                                       19DEC02.679
>       integer iproj                                                              19DEC02.680
>       real uhold, vhold                                                          19DEC02.681
>       real confac, pole, cenlon, ang                                             19DEC02.682
73a78,94
> C Rotate the winds from grid coordinates to earth coordinates.                   19DEC02.683
>             iproj = bhi(7,1) ! projection flag                                   19DEC02.684
>             if (iproj .eq. 3) then                                               19DEC02.685
>                ! Mercator grid, no rotation necessary                            19DEC02.686
>             else                                                                 19DEC02.687
>                ! Lambert Conformal and Polar Stereographic projections           19DEC02.688
>                uhold = uats                                                      19DEC02.689
>                vhold = vats                                                      19DEC02.690
>                confac = bhr(4,1)                                                 19DEC02.691
>                pole   = bhr(7,1)                                                 19DEC02.692
>                cenlon = bhr(3,1)                                                 19DEC02.693
>                ang = xlong(its,jts)-cenlon                                       19DEC02.694
>                ang = ang * confac * degrad                                       19DEC02.695
>                if (pole .lt. 0) ang=-ang                                         19DEC02.696
>                uats = uhold*cos(ang)+vhold*sin(ang)                              19DEC02.697
>                vats = vhold*cos(ang)-uhold*sin(ang)                              19DEC02.698
>             endif                                                                19DEC02.699
===================================================================
domain/io/rdinit.F
diff -r3.34 -r3.38
13a14
> #     include <pmoist.incl>                                                      19DEC02.700
25a27,29
> #     include <paramsoil_STAS.incl>                                              19DEC02.701
> #     include <paramveg_USGS.incl>                                               19DEC02.702
> #     include <paramgen_LSM.incl>                                                19DEC02.703
51,52c55,57
<       REAL SOILM,SOILT                                                           24SEP99.218
<       DIMENSION SOILT(MIXL,MJXL,MLX),SOILM(MIXL,MJXL,MLX)                        24SEP99.219
---
>       REAL SOILM,SOILT,SOILW                                                     19DEC02.704
>       DIMENSION SOILT(MIXL,MJXL,MLX),SOILM(MIXL,MJXL,MLX),                       19DEC02.705
>      -     SOILW(MIXL,MJXL,MLX)                                                  19DEC02.706
56a62
>       REAL BX,SMCMAX,PSISAT,BLIM,FK,HLICE,GRAV,FREE                              19DEC02.707
59c65
<      -        FNDSOLCT                                                           07NOV00.619
---
>      -        FNDSOLCT,FNDSOILW(MLX),FNDLSMW,FNDSNOWH,FNDALBMO,FNDALBMX          19DEC02.708
92a99
>         FNDSNOWH=.FALSE.                                                         19DEC02.709
97a105,106
>         FNDALBMO=.FALSE.                                                         19DEC02.710
>         FNDALBMX=.FALSE.                                                         19DEC02.711
102a112
>           FNDSOILW(NL)=.FALSE.                                                   19DEC02.712
105a116
>         FNDLSMW=.FALSE.                                                          19DEC02.713
306c317
<         ELSE IF((NAME8.EQ.'WEASD   ' .OR. NAME8.EQ.'SNODPTH ')                   24SEP99.235
---
>         ELSE IF((NAME8.EQ.'WEASD   ')                                            19DEC02.714
323c334
<         ELSE IF((NAME8.EQ.'WEASD   ' .OR. NAME8.EQ.'SNODPTH ')                   05DEC01.301
---
>         ELSE IF((NAME8.EQ.'WEASD   ')                                            19DEC02.715
330a342
>             IF(SNOWC(I,J).LT.0.01)SNOWC(I,J)=0.                                  19DEC02.716
338a351,355
>         ELSE IF(NAME8.EQ.'SNOWH   '                                              19DEC02.717
>      -          .AND.MIXL.GT.1)THEN                                              19DEC02.718
>           FNDSNOWH=.TRUE.                                                        19DEC02.719
>           CALL EQUATE(HDOTH,IX,JX,1,SNOWHA,MIXL,MJXL,1)                          19DEC02.720
>           CALL EQUATE(HDOTH,IX,JX,1,SNOWHB,MIXL,MJXL,1)                          19DEC02.721
359a377,380
>         ELSE IF(NAME8.EQ.'ALBSNOMX'                                              19DEC02.722
>      -          .AND.MIXL.GT.1)THEN                                              19DEC02.723
>           FNDALBMX=.TRUE.                                                        19DEC02.724
>           CALL EQUATE(HDOTH,IX,JX,1,ALBMAX,MIXL,MJXL,1)                          19DEC02.725
370c391
<         ELSE IF(NAME6.EQ.'VEGFRC'                                                RDINIT.326
---
>         ELSE IF(NAME6.EQ.'VEGFRC' .AND. NAME8(7:8).NE.'  '                       19DEC02.726
374a396,400
>         ELSE IF(NAME6.EQ.'MONALB'                                                19DEC02.727
>      -          .AND.MIXL.GT.1)THEN                                              19DEC02.728
>           READ(NAME8(7:8),'(I2)')IMON                                            19DEC02.729
>           FNDALBMO=.TRUE.                                                        19DEC02.730
>           CALL EQUATE(HDOTH,IX,JX,1,ALBMON(1,1,IMON),MIXL,MJXL,1)                19DEC02.731
422a449,460
>         ELSE IF(NAME5.EQ.'SOILW' .AND. MIXL.GT.1 ) THEN                          19DEC02.732
>             READ(NAME8(6:8),'(I3)')ILYR                                          19DEC02.733
>             ILEV=0                                                               19DEC02.734
>             DO NL=1,NSML                                                         19DEC02.735
>               IF(ILYR.EQ.ISMLYR(NL))ILEV=NL                                      19DEC02.736
>             ENDDO                                                                19DEC02.737
>             IF(ILEV.NE.0)THEN                                                    19DEC02.738
>               FNDSOILW(ILEV)=.TRUE.                                              19DEC02.739
>               CALL EQUATE(HDOTH,IX,JX,1,SOILW(1,1,ILEV),MIXL,MJXL,1)             19DEC02.740
>             ELSE                                                                 19DEC02.741
>               PRINT *,NAME8,' LAYER NOT RECOGNIZED'                              19DEC02.742
>             ENDIF                                                                19DEC02.743
447a486,492
>         ELSE IF(NAME6.EQ.'SOIL W'                                                19DEC02.744
>      -          .AND.MIXL.GT.1)THEN                                              19DEC02.745
>           READ(NAME(7:8),'(I2)')ILEV                                             19DEC02.746
>           FNDLSMW=.TRUE.                                                         19DEC02.747
>           CALL EQUATE(HDOTH,IX,JX,1,SWCA(1,1,ILEV),MIXL,MJXL,1)                  19DEC02.748
>           CALL EQUATE(SWCA(1,1,ILEV),MIXL,MJXL,1,SWCB(1,1,ILEV),                 19DEC02.749
>      -                MIXL,MJXL,1)                                               19DEC02.750
500a546,555
>         IF(RDMAXALB.AND..NOT.FNDALBMX)THEN                                       19DEC02.751
>            PRINT *,'RDMAXALB=.TRUE. BUT ALBSNOMX NOT FOUND: '                    19DEC02.752
>            PRINT *,'   CHECK REGRID JOB OR SET RDMAXALB=.FALSE.'                 19DEC02.753
>            ISTOP=ISTOP+1                                                         19DEC02.754
>         ENDIF                                                                    19DEC02.755
>         IF(RDBRDALB.AND..NOT.FNDALBMO)THEN                                       19DEC02.756
>            PRINT *,'RDBRDALB=.TRUE. BUT MONALBnn NOT FOUND: '                    19DEC02.757
>            PRINT *,'   CHECK REGRID JOB OR SET RDBRDALB=.FALSE.'                 19DEC02.758
>            ISTOP=ISTOP+1                                                         19DEC02.759
>         ENDIF                                                                    19DEC02.760
516c571
<           PRINT *,'INPUT FILE CONTAINS INSUFFICIENT FIELDS FOR ISOIL=2'          RDINIT.412
---
>           PRINT *,'INPUT FILE MISSING FIELDS FOR ISOIL=2: SEE ABOVE'             19DEC02.761
614a670,673
> C******************************************************************************  19DEC02.762
> C LSM INITIALIZATION FROM I/O STARTS HERE                                        19DEC02.763
> C******************************************************************************  19DEC02.764
> #ifdef SOIL2                                                                     19DEC02.765
618c677,686
<         CALL SETVEGFR(ILX,JLX,XTIME,JULDAY,GMT)                                  05DEC01.319
---
>         CALL SETVEGFR(ILX,JLX,XTIME,JULDAY,GMT)                                  19DEC02.766
> C SET XVEGMN (MINIMUM ANNUAL VEGFRC IN NOAH LSM)                                 19DEC02.767
>         DO J=1,JLX                                                               19DEC02.768
>         DO I=1,ILX                                                               19DEC02.769
>           XVEGMN(I,J)=1.                                                         19DEC02.770
>           DO IMON=1,NMO                                                          19DEC02.771
>             XVEGMN(I,J)=AMIN1(XVEGMN(I,J),VEGFMO(I,J,IMON))                      19DEC02.772
>           ENDDO                                                                  19DEC02.773
>         ENDDO                                                                    19DEC02.774
>         ENDDO                                                                    19DEC02.775
710a779
> C     ASSUME SOILW COMES IN AT SAME LEVELS AS SOILM                              19DEC02.776
722a792,795
>               IF(FNDSOILW(L))THEN                                                19DEC02.777
>                 SWCA(I,J,L)=SOILW(I,J,1)                                         19DEC02.778
>                 SWCB(I,J,L)=SWCA(I,J,L)                                          19DEC02.779
>               ENDIF                                                              19DEC02.780
726a800,803
>               IF(FNDSOILW(L))THEN                                                19DEC02.781
>                 SWCA(I,J,L)=SOILW(I,J,NSML)                                      19DEC02.782
>                 SWCB(I,J,L)=SWCA(I,J,L)                                          19DEC02.783
>               ENDIF                                                              19DEC02.784
734a812,817
>                   IF(FNDSOILW(L))THEN                                            19DEC02.785
>                     SWCA(I,J,L)=((SMLEV(NL+1)-ZS(L))*SOILW(I,J,NL)+              19DEC02.786
>      -                        (ZS(L)-SMLEV(NL))*SOILW(I,J,NL+1))                 19DEC02.787
>      -                        /(SMLEV(NL+1)-SMLEV(NL))                           19DEC02.788
>                     SWCB(I,J,L)=SWCA(I,J,L)                                      19DEC02.789
>                   ENDIF                                                          19DEC02.790
740a824,879
>          IF(.NOT.FNDSOILW(1))THEN                                                19DEC02.791
> C If no SWC, do the following                                                    19DEC02.792
>           PRINT *,'SOIL WATER NOT FOUND - VALUE SET IN RDINIT'                   19DEC02.793
>         GRAV=G                                                                   19DEC02.794
>         HLICE=XLF0                                                               19DEC02.795
>         BLIM=5.5                                                                 19DEC02.796
>         DO J = 1, JLX                                                            19DEC02.797
>         DO I = 1, ILX                                                            19DEC02.798
>           BX = BB(ISLTYP(I,J))                                                   19DEC02.799
>           SMCMAX = MAXSMC(ISLTYP(I,J))                                           19DEC02.800
>           PSISAT = SATPSI(ISLTYP(I,J))                                           19DEC02.801
>          if ((bx.gt.0.0).and.(smcmax.gt.0.0).and.(psisat.gt.0.0)) then           19DEC02.802
>           DO L=1,MLX                                                             19DEC02.803
>          IF(.NOT.FNDSOILW(L))THEN                                                19DEC02.804
> C ----------------------------------------------------------------------         19DEC02.805
> C SWC <= SMC for T < 273.149K (-0.001C)                                          19DEC02.806
>             IF (STCA(I,J,L) .LT. 273.149) THEN                                   19DEC02.807
> C ----------------------------------------------------------------------         19DEC02.808
> C first guess following explicit solution for Flerchinger Eqn from Koren         19DEC02.809
> C et al, JGR, 1999, Eqn 17 (KCOUNT=0 in FUNCTION FRH2O).                         19DEC02.810
> C ISLTPK is soil type                                                            19DEC02.811
>               BX = BB(ISLTYP(I,J))                                               19DEC02.812
>               SMCMAX = MAXSMC(ISLTYP(I,J))                                       19DEC02.813
>               PSISAT = SATPSI(ISLTYP(I,J))                                       19DEC02.814
>               IF ( BX .GT. BLIM ) BX = BLIM                                      19DEC02.815
>               FK=(((HLICE/(GRAV*(-SATPSI(ISLTYP(I,J)))))*                        19DEC02.816
>      .           ((STCA(I,J,L)-TO)/STCA(I,J,L)))**                               19DEC02.817
>      .           (-1/BX))*MAXSMC(ISLTYP(I,J))                                    19DEC02.818
>               IF (FK .LT. 0.02) FK = 0.02                                        19DEC02.819
>               SWCA(I,J,L) = AMIN1( FK, SMCB(I,J,L) )                             19DEC02.820
> C ----------------------------------------------------------------------         19DEC02.821
> C now use iterative solution for liquid soil water content using                 19DEC02.822
> C FUNCTION FRH2O with the initial guess for SH2O from above explicit             19DEC02.823
> C first guess.                                                                   19DEC02.824
>               CALL FRH2O (FREE,STCA(I,J,L),SMCB(I,J,L),SWCA(I,J,L),              19DEC02.825
>      .           SMCMAX,BX,PSISAT)                                               19DEC02.826
>               SWCA(I,J,L) = FREE                                                 19DEC02.827
>               SWCB(I,J,L) = SWCA(I,J,L)                                          19DEC02.828
>             ELSE                                                                 19DEC02.829
> C ----------------------------------------------------------------------         19DEC02.830
> C SWC = SMC for T => 273.149K (-0.001C)                                          19DEC02.831
>               SWCA(I,J,L)=SMCB(I,J,L)                                            19DEC02.832
>               SWCB(I,J,L)=SMCB(I,J,L)                                            19DEC02.833
> C ----------------------------------------------------------------------         19DEC02.834
>             ENDIF                                                                19DEC02.835
>            ENDIF                                                                 19DEC02.836
>           END DO                                                                 19DEC02.837
>          else                                                                    19DEC02.838
>           DO L=1,MLX                                                             19DEC02.839
>            SWCA(I,J,L)=SMCB(I,J,L)                                               19DEC02.840
>            SWCB(I,J,L)=SMCB(I,J,L)                                               19DEC02.841
>           END DO                                                                 19DEC02.842
>          endif                                                                   19DEC02.843
>         ENDDO                                                                    19DEC02.844
>         ENDDO                                                                    19DEC02.845
>          ENDIF                                                                   19DEC02.846
741a881,898
>         IF(.NOT.FNDSNOWH)THEN                                                    19DEC02.847
> C If no SNOWH do the following                                                   19DEC02.848
>           PRINT *,'SNOW HEIGHT NOT FOUND - VALUE DEFINED IN RDINIT'              19DEC02.849
>           DO J = 1, JLX                                                          19DEC02.850
>           DO I = 1, ILX                                                          19DEC02.851
>             SNOWHA(I,J)=SNOA(I,J)*5.0                                            19DEC02.852
>             SNOWHB(I,J)=SNOB(I,J)*5.0                                            19DEC02.853
>           ENDDO                                                                  19DEC02.854
>           ENDDO                                                                  19DEC02.855
>         ELSE                                                                     19DEC02.856
> C convert from m to mm - later outtap converts back                              19DEC02.857
>           DO J = 1, JLX                                                          19DEC02.858
>           DO I = 1, ILX                                                          19DEC02.859
>             SNOWHA(I,J)=SNOWHA(I,J)*1000.0                                       19DEC02.860
>             SNOWHB(I,J)=SNOWHB(I,J)*1000.0                                       19DEC02.861
>           ENDDO                                                                  19DEC02.862
>           ENDDO                                                                  19DEC02.863
>         ENDIF                                                                    19DEC02.864
742a900,903
> #endif                                                                           19DEC02.865
> C******************************************************************************  19DEC02.866
> C LSM INITIALIZATION FROM I/O ENDS HERE                                          19DEC02.867
> C******************************************************************************  19DEC02.868
===================================================================
domain/io/write_fieldrec.F
diff -r3.2 -r3.4
14c14
<      +                            IX, JX, KX )                                   WRITE_FIELDREC.14
---
>      +                            IM, JM, KM )                                   19DEC02.869
18a19,22
>                                                                                  19DEC02.870
> #ifdef MPP1                                                                      19DEC02.871
> #include <parame.incl>                                                           19DEC02.872
> #endif                                                                           19DEC02.873
42a47
>       REAL           BUFFER2(MIX*MJX*MKX)                                        19DEC02.874
49c54
<       INTEGER        IX, JX, KX                                                  WRITE_FIELDREC.49
---
>       INTEGER        IM, JM, KM                                                  19DEC02.875
53c58
<       INTEGER        I,J,K                                                       07NOV00.804
---
>       INTEGER        I,J,K,IC                                                    19DEC02.876
98c103
<         CALL DM_DIST_WRITE(IUNIT,INEST,BUFFER,NDIM,IR,JR,KR,IX,JX,KX)            WRITE_FIELDREC.98
---
>         CALL DM_DIST_WRITE(IUNIT,INEST,BUFFER,NDIM,IR,JR,KR,IM,JM,KM)            19DEC02.877
101,102c106,120
< 	  WRITE(IUNIT)((BUFFER(I+(J-1)*IX),I=1,IR),J=1,JR)                              07NOV00.807
< 	ENDIF                                                                           07NOV00.808
---
>           IC = 1                                                                 19DEC02.878
>           DO J=1,JR                                                              19DEC02.879
>             DO I=1,IR                                                            19DEC02.880
>               IF ( IC .GT. MIX*MJX*MKX ) THEN                                                  19DEC02.881
> 		WRITE(0,*)'FATAL INTERNAL ERROR: WRITE_FIELDREC'                               19DEC02.882
> 		WRITE(0,*)'WOULD OVERWRITE BUFFER2'                                            19DEC02.883
> 		WRITE(0,*)'Contact mesouser@ucar.edu'                                          19DEC02.884
> 		STOP                                                                           19DEC02.885
>               ENDIF                                                                            19DEC02.886
>               BUFFER2(IC) = BUFFER(I+(J-1)*IM)                                   19DEC02.887
>               IC = IC+1                                                          19DEC02.888
>             ENDDO                                                                19DEC02.889
>           ENDDO                                                                  19DEC02.890
>           CALL RSL_WRITE_1D_DATA(IUNIT,BUFFER2,IC-1,RSL_REAL)                    19DEC02.891
>         ENDIF                                                                    19DEC02.892
===================================================================
domain/nest/Makefile
diff -r3.2 -r3.3
124c124,125
< initnest.o: ../../include/soil.incl ../../include/soiln.incl ../../include/soilp.incl
---
> initnest.o: ../../include/soil.incl ../../include/soiln.incl 
> initnest.o: ../../include/soilp.incl ../../include/paramveg_USGS.incl
===================================================================
domain/nest/feedbk.F
diff -r3.8 -r3.13
38a39,40
> #     include <pbltke.incl>                                                      19DEC02.893
> #     include <pbltken.incl>                                                     19DEC02.894
153c155,156
<           IF(IFEED.EQ.1)TGA(ICY,JCX)=F1*TGAN(IFY,JFX)+F2*(TGAN(IFP,JFX)+         FEEDBK.129
---
>           IF(IFEED.EQ.1)then                                                     19DEC02.895
>             TGA(ICY,JCX)=F1*TGAN(IFY,JFX)+F2*(TGAN(IFP,JFX)+                     19DEC02.896
156c159,167
<           IF(IFEED.GE.2)TGA(ICY,JCX)=TGAN(IFY,JFX)                               FEEDBK.132
---
>             TGSI(ICY,JCX)=F1*TGSIN(IFY,JFX)+F2*(TGSIN(IFP,JFX)+                  19DEC02.897
>      &      TGSIN(IFM,JFX)+TGSIN(IFY,JFP)+TGSIN(IFY,JFM))+F3*                    19DEC02.898
>      &      (TGSIN(IFP,JFP)+TGSIN(IFP,JFM)+TGSIN(IFM,JFP)+                       19DEC02.899
>      &      TGSIN(IFM,JFM))                                                      19DEC02.900
> 	  endif                                                                  19DEC02.901
>           IF(IFEED.GE.2) then                                                    19DEC02.902
>             TGA(ICY,JCX)=TGAN(IFY,JFX)                                           19DEC02.903
>             TGSI(ICY,JCX)=TGSIN(IFY,JFX)                                         19DEC02.904
>           endif                                                                  19DEC02.905
263a275
> C FOR LSM JUST FEED BACK SINGLE POINT (AGREES WITH LANDUSE/SOIL FEEDBACK)        19DEC02.906
275,278c287,295
<             SNOA(ICY,JCX)=(SNOAN(IFY,JFX)+SNOAN(IFP,JFX)+                        05DEC01.374
<      +                   SNOAN(IFM,JFX)+SNOAN(IFY,JFP)+SNOAN(IFY,JFM)            05DEC01.375
<      +                   +SNOAN(IFP,JFP)+SNOAN(IFP,JFM)+                         05DEC01.376
<      +                   SNOAN(IFM,JFP)+SNOAN(IFM,JFM))/9.                       05DEC01.377
---
>             SNOA(ICY,JCX)=SNOAN(IFY,JFX)                                         19DEC02.907
>             SNOWHA(ICY,JCX)=SNOWHAN(IFY,JFX)                                     19DEC02.908
>             CMCA(ICY,JCX)=CMCAN(IFY,JFX)                                         19DEC02.909
>             SNOWC(ICY,JCX)=SNOWCN(IFY,JFX)                                       19DEC02.910
>             DO L = 1,MLX                                                         19DEC02.911
>               STCA(ICY,JCX,L)=STCAN(IFY,JFX,L)                                   19DEC02.912
>               SMCA(ICY,JCX,L)=SMCAN(IFY,JFX,L)                                   19DEC02.913
>               SWCA(ICY,JCX,L)=SWCAN(IFY,JFX,L)                                   19DEC02.914
>             ENDDO                                                                19DEC02.915
406a424,458
> C  Add TKEA feedback for GS - 20021217                                           19DEC02.916
>       IF(IGSPBL.EQ.1)THEN                                                        19DEC02.917
> C                                                                                19DEC02.918
> cmic$ do all autoscope                                                           19DEC02.919
> c$omp parallel do default(shared)                                                19DEC02.920
> c$omp&private(icy,jcx,k,jfx,jfp,jfm,ify,ifp,ifm,tij,tpj,tmj,tip,tim,             19DEC02.921
> c$omp&tpp,tpm,tmp,tmm,tav)                                                       19DEC02.922
>       DO JCX=JWP1,JEM2                                                           19DEC02.923
>         JFX=2+(JCX-JWEST)*IRAX                                                   19DEC02.924
>         JFP=JFX+1                                                                19DEC02.925
>         JFM=JFX-1                                                                19DEC02.926
>         DO ICY=ISP1,INM2                                                         19DEC02.927
>           IFY=2+(ICY-ISOUTH)*IRAX                                                19DEC02.928
>           IFP=IFY+1                                                              19DEC02.929
>           IFM=IFY-1                                                              19DEC02.930
>           DO K=1,KL                                                              19DEC02.931
>             IF(IFEED.EQ.1)THEN                                                   19DEC02.932
>               TIJ=TKEAN(IFY,JFX,K)                                               19DEC02.933
>               TPJ=TKEAN(IFP,JFX,K)                                               19DEC02.934
>               TMJ=TKEAN(IFM,JFX,K)                                               19DEC02.935
>               TIP=TKEAN(IFY,JFP,K)                                               19DEC02.936
>               TIM=TKEAN(IFY,JFM,K)                                               19DEC02.937
>               TPP=TKEAN(IFP,JFP,K)                                               19DEC02.938
>               TPM=TKEAN(IFP,JFM,K)                                               19DEC02.939
>               TMP=TKEAN(IFM,JFP,K)                                               19DEC02.940
>               TMM=TKEAN(IFM,JFM,K)                                               19DEC02.941
>               TAV=F1*TIJ+F2*(TIP+TIM+TPJ+TMJ)+F3*(TPP+TPM+TMP+TMM)               19DEC02.942
>               TKEA(ICY,JCX,K)=TAV                                                19DEC02.943
>             ENDIF                                                                19DEC02.944
>             IF(IFEED.GE.2)TKEA(ICY,JCX,K)=TKEAN(IFY,JFX,K)                       19DEC02.945
>           ENDDO                                                                  19DEC02.946
>         ENDDO                                                                    19DEC02.947
>       ENDDO                                                                      19DEC02.948
>       ENDIF                                                                      19DEC02.949
> C                                                                                19DEC02.950
913a966,983
> C  Add TKEA feedback for GS - 20021217                                           19DEC02.951
>           IF(IGSPBL.EQ.1)THEN                                                    19DEC02.952
>             DO 141 I=1,INM1                                                      19DEC02.953
>               DO 141 J=1,JEM1                                                    19DEC02.954
>                 HSC1(I,J)=TKEA(I,J,K)                                            19DEC02.955
>   141         CONTINUE                                                           19DEC02.956
>                                                                                  19DEC02.957
>             IF(IFEED.EQ.3)THEN                                                   19DEC02.958
>               CALL SMTHER(HSC1,MIX,MJX,2,ISP1,INM2,JWP1,JEM2)                    19DEC02.959
>             ELSEIF(IFEED.EQ.4)THEN                                               19DEC02.960
>               CALL SMT2(HSC1,MIX,MJX,ISP1,INM2,JWP1,JEM2)                        19DEC02.961
>             ENDIF                                                                19DEC02.962
>             DO 142 I=ISP1,INM2                                                   19DEC02.963
>               DO 142 J=JWP1,JEM2                                                 19DEC02.964
>                 TKEA(I,J,K)=HSC1(I,J)                                            19DEC02.965
>                 IF(TKEA(I,J,K).LT.1.E-06)TKEA(I,J,K)=1.E-06                      19DEC02.966
>   142         CONTINUE                                                           19DEC02.967
>             ENDIF                                                                19DEC02.968
===================================================================
domain/nest/initnest.F
diff -r3.46 -r3.52
49a50
> #     include <paramveg_USGS.incl>                                               19DEC02.969
53a55,57
>       EXTERNAL DM_IONODE                                                         19DEC02.970
>       LOGICAL  DM_IONODE                                                         19DEC02.971
>       INTEGER  IER                                                               19DEC02.972
63c67
<       REAL    SHCLND                                                             INITNEST.62
---
>       REAL    SHCLND,SNOALB,ALBBRD,SHDFAC,SHDMIN,SNCOVR                          19DEC02.973
170c174,175
<       XKHZN=3.E-3*DXNSQ/DTN                                                      INITNEST.175
---
> C     XKHZN=3.E-3*DXNSQ/DTN                                                      19DEC02.974
>       XKHZN=CKH*DXN                                                              19DEC02.975
800a806,809
> C                                                                                19DEC02.976
>         CALL FILL(XVEGMN,HELP1,MIX,MJX,IYY,JXX,IYY-1,JXX-1)                      19DEC02.977
>         CALL EXAINT(HELP1,IYY,JXX,HSCR1N,IYYN,JXXN,ISOUTH,JWEST,1)               19DEC02.978
>         CALL FILL(HSCR1N,XVEGMNN,IYYN,JXXN,MIX,MJX,IYYN-1,JXXN-1)                19DEC02.979
818a828,837
>         CALL FILL(SNOWHA,HELP1,MIX,MJX,IYY,JXX,IYY-1,JXX-1)                      19DEC02.980
>         CALL EXAINT(HELP1,IYY,JXX,HSCR1N,IYYN,JXXN,ISOUTH,JWEST,1)               19DEC02.981
>         CALL FILL(HSCR1N,SNOWHAN,IYYN,JXXN,MIX,MJX,IYYN-1,JXXN-1)                19DEC02.982
>         DO J=1,JXXN-1                                                            19DEC02.983
>           DO I=1,IYYN-1                                                          19DEC02.984
>             IF (SNOWHAN(I,J) .LT. 0.) SNOWHAN(I,J)=0.                            19DEC02.985
>             SNOWHBN(I,J)=SNOWHAN(I,J)                                            19DEC02.986
>           ENDDO                                                                  19DEC02.987
>         ENDDO                                                                    19DEC02.988
> C                                                                                19DEC02.989
846a866,874
> C                                                                                19DEC02.990
>           CALL FILL(SWCA(1,1,L),HELP1,MIX,MJX,IYY,JXX,IYY-1,JXX-1)               19DEC02.991
>           CALL EXAINT(HELP1,IYY,JXX,HSCR1N,IYYN,JXXN,ISOUTH,JWEST,1)             19DEC02.992
>           CALL FILL(HSCR1N,SWCAN(1,1,L),IYYN,JXXN,MIX,MJX,IYYN-1,JXXN-1)         19DEC02.993
>           DO J=1,JXXN-1                                                          19DEC02.994
>             DO I=1,IYYN-1                                                        19DEC02.995
>               SWCBN(I,J,L)=SWCAN(I,J,L)                                          19DEC02.996
>             ENDDO                                                                19DEC02.997
>           ENDDO                                                                  19DEC02.998
853a882,897
>         IF(RDMAXALB)THEN                                                         19DEC02.999
>           CALL FILL(ALBMAX,HELP1,MIX,MJX,IYY,JXX,IYY-1,JXX-1)                    19DEC02.1000
>           CALL EXAINT(HELP1,IYY,JXX,HSCR1N,IYYN,JXXN,ISOUTH,JWEST,1)             19DEC02.1001
>           CALL FILL(HSCR1N,ALBMAXN,IYYN,JXXN,MIX,MJX,IYYN-1,JXXN-1)              19DEC02.1002
>         ENDIF                                                                    19DEC02.1003
>         IF(RDBRDALB)THEN                                                         19DEC02.1004
>           CALL FILL(ALBEDO,HELP1,MIX,MJX,IYY,JXX,IYY-1,JXX-1)                    19DEC02.1005
>           CALL EXAINT(HELP1,IYY,JXX,HSCR1N,IYYN,JXXN,ISOUTH,JWEST,1)             19DEC02.1006
>           CALL FILL(HSCR1N,ALBEDON,IYYN,JXXN,MIX,MJX,IYYN-1,JXXN-1)              19DEC02.1007
>           DO L=1,12                                                              19DEC02.1008
>             CALL FILL(ALBMON(1,1,L),HELP1,MIX,MJX,IYY,JXX,IYY-1,JXX-1)           19DEC02.1009
>             CALL EXAINT(HELP1,IYY,JXX,HSCR1N,IYYN,JXXN,ISOUTH,JWEST,1)           19DEC02.1010
>             CALL FILL(HSCR1N,ALBMONN(1,1,L),IYYN,JXXN,MIX,MJX,IYYN-1,            19DEC02.1011
>      -              JXXN-1)                                                      19DEC02.1012
>           ENDDO                                                                  19DEC02.1013
>         ENDIF                                                                    19DEC02.1014
923c967
<          IF(IFSNOW(NUMNES).EQ.1)THEN                                             05DEC01.386
---
>          IF(IFSNOW(NUMNES).EQ.1.AND.ISOIL.NE.2)THEN                              19DEC02.1015
929c973
<          ELSE IF(IFSNOW(NUMNES).EQ.2)THEN                                        05DEC01.387
---
>          ELSE IF(IFSNOW(NUMNES).EQ.2 .OR. ISOIL.EQ.2)THEN                        19DEC02.1016
1290c1334
<      -     IFSNOW,IL,JL)                                                         05DEC01.425
---
>      -     IFSNOW,IEXSI,IL,JL)                                                   19DEC02.1017
1291a1336,1416
> C                                                                                19DEC02.1018
> C SPECIFY SEA ICE BASED ON SST IF IEXSI.EQ.1                                     19DEC02.1019
> C READ SEA ICE FRACTION FROM LOWBDY IF IEXSI.EQ.2                                19DEC02.1020
> C                                                                                19DEC02.1021
>       IF(IEXSI.GE.1)THEN                                                         19DEC02.1022
>         IF(IEXSI.EQ.1)THEN                                                       19DEC02.1023
>           DO I=1,INLX                                                            19DEC02.1024
>             DO J=1,JNLX                                                          19DEC02.1025
>               IF((TGAN(I,J).LE.271.4).AND.                                       19DEC02.1026
>      +           NINT(SATBRN(I,J)).EQ.ISWATER)THEN                               19DEC02.1027
>                 SEAICN(I,J)=0.8                                                  19DEC02.1028
>               ELSE                                                               19DEC02.1029
>                 SEAICN(I,J)=0.0                                                  19DEC02.1030
>               ENDIF                                                              19DEC02.1031
>             ENDDO                                                                19DEC02.1032
>           ENDDO                                                                  19DEC02.1033
>           PRINT *,'FINISHED SPECIFYING SEAICE BASED ON TG'                       19DEC02.1034
>         ENDIF                                                                    19DEC02.1035
> C                                                                                19DEC02.1036
> C SET DUMMY END VALUES FOR SEAICE AND CHECK FOR ERRORS IN SEAICE INPUT DATA      19DEC02.1037
> C                                                                                19DEC02.1038
>         DO I=1,INLX                                                              19DEC02.1039
>           SEAICN(I,JNL)=SEAICN(I,JNLX)                                           19DEC02.1040
>         ENDDO                                                                    19DEC02.1041
>         DO J=1,JNLX                                                              19DEC02.1042
>           SEAICN(INL,J)=SEAICN(INLX,J)                                           19DEC02.1043
>         ENDDO                                                                    19DEC02.1044
>         SEAICN(IL,JNL)=SEAICN(ILX,JNLX)                                          19DEC02.1045
> C                                                                                19DEC02.1046
> C CHECK FOR ERRORS IN SEAICE INPUT DATA                                          19DEC02.1047
> C ALLOW SEAICE SURFACE TYPE AT WATER GRID POINTS ONLY, WITH SEAICE               19DEC02.1048
> C FRACTION > 0.02                                                                19DEC02.1049
> C                                                                                19DEC02.1050
>         DO I=1,INLX                                                              19DEC02.1051
>           DO J=1,JNLX                                                            19DEC02.1052
>             IF((SEAICN(I,J).GT.1.001).OR.                                        19DEC02.1053
>      +       (SEAICN(I,J).LT.-0.001))THEN                                        19DEC02.1054
>               WRITE(6,*) 'SEA ICE INITIAL ERROR AT I, J',I,', ',J                19DEC02.1055
>               STOP 'initnest sea ice'                                            19DEC02.1056
>             ENDIF                                                                19DEC02.1057
>             IF((NINT(SATBRN(I,J)).NE.ISWATER).OR.                                19DEC02.1058
>      -              (SEAICN(I,J).LE.0.02))THEN                                   19DEC02.1059
>               SEAICN(I,J)=0.0                                                    19DEC02.1060
>             ENDIF                                                                19DEC02.1061
> C                                                                                19DEC02.1062
> C INITIALIZE SEAICE GROUND TEMPERATURE (TGSI)                                    19DEC02.1063
> C                                                                                19DEC02.1064
>             IF(SEAICN(I,J).GT.0.02)THEN                                          19DEC02.1065
> C ASSUME INITIAL GROUND TEMPERATURE (TGA) REPRESENTS TEMPERATURE OVER SEAICE     19DEC02.1066
>               TGSIN(I,J)=TGAN(I,J)                                               19DEC02.1067
> C MODIFY TGA (AND TGB) TO REPRESENT AREA AVERAGE OF SEAICE GROUND TEMPERATURE    19DEC02.1068
> C AND OCEAN WATER TEMPERATURE AT FREEZING POINT (271.4 K)                        19DEC02.1069
>               TGAN(I,J)=SEAICN(I,J)*TGAN(I,J)+(1.-SEAICN(I,J))*271.4             19DEC02.1070
>               TGBN(I,J)=TGAN(I,J)                                                19DEC02.1071
> C                                                                                19DEC02.1072
> C SET TMN TO FREEZING POINT OF SEA WATER (271.4 K) FOR SEAICE GRID POINTS        19DEC02.1073
> C SET SNOWC TO 1 FOR SEAICE AND PERMANENT ICE GRID POINTS                        19DEC02.1074
> C                                                                                19DEC02.1075
>               IF(SEAICN(I,J).GT.0.02.AND.(IEXSI.GE.1))THEN                       19DEC02.1076
>                 TMNN(I,J)=271.4                                                  19DEC02.1077
>                 SNOWCN(I,J)=1.0                                                  19DEC02.1078
>               ENDIF                                                              19DEC02.1079
>               IF(NINT(SATBRN(I,J)).EQ.ISICE)THEN                                 19DEC02.1080
>                 SNOWCN(I,J)=1.0                                                  19DEC02.1081
>               ENDIF                                                              19DEC02.1082
>             ELSE                                                                 19DEC02.1083
>               TGSIN(I,J)=-1.*TGAN(I,J)                                           19DEC02.1084
>             ENDIF                                                                19DEC02.1085
>           ENDDO                                                                  19DEC02.1086
>         ENDDO                                                                    19DEC02.1087
>       ELSE                                                                       19DEC02.1088
> C                                                                                19DEC02.1089
> C IEXSI.LT.1                                                                     19DEC02.1090
> C                                                                                19DEC02.1091
>         DO I=1,INL                                                               19DEC02.1092
>           DO J=1,JNL                                                             19DEC02.1093
>             SEAICN(I,J)=0.0                                                      19DEC02.1094
>             TGSIN(I,J)=0.0                                                       19DEC02.1095
>           ENDDO                                                                  19DEC02.1096
>         ENDDO                                                                    19DEC02.1097
>       ENDIF                                                                      19DEC02.1098
1790a1916,1932
>           IF(SEAICN(I,J).GT.0.02)THEN                                            19DEC02.1099
> C                                                                                19DEC02.1100
> C CALCULATE AVERAGE SURFACE PROPERTIES FOR SEAICE GRID POINTS AS SIMPLE AVERAGE  19DEC02.1101
> C OF SEAICE SURFACE PROPERTIES AND WATER SURFACE PROPERTIES                      19DEC02.1102
> C                                                                                19DEC02.1103
>             ALBN(I,J)=ALBD(ISICE,ISN)/100.*SEAICN(I,J)+                          19DEC02.1104
>      +        ALBD(ISWATER,ISN)/100.*(1.-SEAICN(I,J))                            19DEC02.1105
>             THCN(I,J)=THERIN(ISICE,ISN)/100.                                     19DEC02.1106
> c sea-ice roughness=0.1 cm                                                       19DEC02.1107
>             ZNTN(I,J)=0.1/100.                                                   19DEC02.1108
>             EMISSN(I,J)=SFEM(ISICE,ISN)*SEAICN(I,J)+                             19DEC02.1109
>      +        SFEM(ISWATER,ISN)*(1.-SEAICN(I,J))                                 19DEC02.1110
>             MAVAIN(I,J)=SLMO(ISICE,ISN)*SEAICN(I,J)+                             19DEC02.1111
>      +        SLMO(ISWATER,ISN)*(1.-SEAICN(I,J))                                 19DEC02.1112
> C TREAT SEAICE GRID POINTS AS LAND GRID POINTS                                   19DEC02.1113
>             XLANDN(I,J)=1.0                                                      19DEC02.1114
>           ENDIF                                                                  19DEC02.1115
1798c1940
< c$omp&private(i,j,is)                                                            INITNEST.1656
---
> c$omp&private(i,j,is,snoalb,albbrd,shdfac,shdmin,sncovr)                         19DEC02.1116
1821a1964,1986
> C  NEW NOAH ALBEDO CALCULATION                                                   19DEC02.1117
>           IF(ISOIL.EQ.2)THEN                                                     19DEC02.1118
> C                                                                                19DEC02.1119
>             IF(RDMAXALB) THEN                                                    19DEC02.1120
>               SNOALB=ALBMAXN(I,J)*0.01                                           19DEC02.1121
>             ELSE                                                                 19DEC02.1122
>               SNOALB=MAXALB(IS)*0.01                                             19DEC02.1123
>             ENDIF                                                                19DEC02.1124
> C                                                                                19DEC02.1125
>             IF(RDBRDALB) THEN                                                    19DEC02.1126
>               ALBBRD=ALBEDON(I,J)*0.01                                           19DEC02.1127
>             ELSE                                                                 19DEC02.1128
>               ALBBRD=ALBD(IS,ISN)*0.01                                           19DEC02.1129
>             ENDIF                                                                19DEC02.1130
> C                                                                                19DEC02.1131
>             SHDFAC = VEGFRCN(I,J)/100.                                           19DEC02.1132
>             SHDMIN = XVEGMNN(I,J)/100.                                           19DEC02.1133
>             SNCOVR = SNOWCN(I,J)                                                 19DEC02.1134
> C                                                                                19DEC02.1135
>             ALBN(I,J) = ALBBRD + (1.0- (SHDFAC - SHDMIN))* SNCOVR *              19DEC02.1136
>      -                 (SNOALB - ALBBRD)                                         19DEC02.1137
>                                                                                  19DEC02.1138
>           ENDIF                                                                  19DEC02.1139
1837a2003,2010
>           IF(NINT(SATBRN(I,J)).EQ.ISICE)THEN                                     19DEC02.1140
> C              BASED UPON YEN (1981)                                             19DEC02.1141
> C              DENSITY * SPECIFIC HEAT / MOL / K / MOLECULAR WEIGHT              19DEC02.1142
>             CAPGN(I,J)=917.*34000./18.                                           19DEC02.1143
>           ELSEIF(SEAICN(I,J).GT.0.02)THEN                                        19DEC02.1144
> C              DENSITY * SPECIFIC HEAT / KG / K                                  19DEC02.1145
>             CAPGN(I,J)=900.*3400.                                                19DEC02.1146
>           ELSE                                                                   19DEC02.1147
1838a2012
>           ENDIF                                                                  19DEC02.1148
===================================================================
domain/nest/nestlsm.F
diff -r3.3 -r3.7
84a85,86
>                   swcan(i,j,l) = 1.0                                             19DEC02.1149
>                   swcbn(i,j,l) = 1.0                                             19DEC02.1150
90a93,100
>                                                                                  19DEC02.1151
> c Water points have albedos set to 8.0                                           19DEC02.1152
>                                                                                  19DEC02.1153
>                albedon(i,j) = 8.                                                 19DEC02.1154
>                albmaxn(i,j) = 8.                                                 19DEC02.1155
>                do l=1,12                                                         19DEC02.1156
>                  albmonn(i,j,l) = 8.                                             19DEC02.1157
>                enddo                                                             19DEC02.1158
114c124
<                      xicen(i,j) = 0                                              NESTLSM.114
---
>                      xicen(i,j) = 1.                                             19DEC02.1159
116c126
<                      xicen(i,j) = 1.                                             NESTLSM.116
---
>                      xicen(i,j) = 0.                                             19DEC02.1160
130a141,142
>                   snowhan(i,j) = 0.                                              19DEC02.1161
>                   snowhbn(i,j) = 0.                                              19DEC02.1162
132c144
< c               Open water points have the soil temperature set to 0 K:          NESTLSM.132
---
> c               Open water points have the soil temperature set to 0 C:          19DEC02.1163
135,136c147,148
<                      stcan(i,j,l) = 0.                                           NESTLSM.135
<                      stcbn(i,j,l) = 0.                                           NESTLSM.136
---
>                      stcan(i,j,l) = 273.16                                       19DEC02.1164
>                      stcbn(i,j,l) = 273.16                                       19DEC02.1165
186,187c198,199
< c              and soil moisture are determined from the values of               NESTLSM.186
< c              nearby MOTHER land points:                                        NESTLSM.187
---
> c              soil moisture, and albedo are determined from the values          19DEC02.1166
> c              of nearby MOTHER land points:                                     19DEC02.1167
191a204,209
>                snoan(i,j) = stfun(i, j, 1, snoa, lmask)                          19DEC02.1168
>                snobn(i,j) = stfun(i, j, 1, snob, lmask)                          19DEC02.1169
>                snowhan(i,j) = stfun(i, j, 1, snowha, lmask)                      19DEC02.1170
>                snowhbn(i,j) = stfun(i, j, 1, snowhb, lmask)                      19DEC02.1171
>                albedon(i,j) = stfun(i, j, 1, albedo, lmask)                      19DEC02.1172
>                albmaxn(i,j) = stfun(i, j, 1, albmax, lmask)                      19DEC02.1173
196a215,226
>                snoan(i,j) = stfun(FLIC_L2G_M(i), FLIC_L2G_N(j),                  19DEC02.1174
>      +                            1, snoa_g, lmask_g)                            19DEC02.1175
>                snobn(i,j) = stfun(FLIC_L2G_M(i), FLIC_L2G_N(j),                  19DEC02.1176
>      +                            1, snob_g, lmask_g)                            19DEC02.1177
>                snowhan(i,j) = stfun(FLIC_L2G_M(i), FLIC_L2G_N(j),                19DEC02.1178
>      +                            1, snowha_g, lmask_g)                          19DEC02.1179
>                snowhbn(i,j) = stfun(FLIC_L2G_M(i), FLIC_L2G_N(j),                19DEC02.1180
>      +                            1, snowhb_g, lmask_g)                          19DEC02.1181
>                albedon(i,j) = stfun(FLIC_L2G_M(i), FLIC_L2G_N(j),                19DEC02.1182
>      +                            1, albedo_g, lmask_g)                          19DEC02.1183
>                albmaxn(i,j) = stfun(FLIC_L2G_M(i), FLIC_L2G_N(j),                19DEC02.1184
>      +                            1, albmax_g, lmask_g)                          19DEC02.1185
199a230,235
>                if (snoan(i,j) .lt. -1.E24) snoan(i,j) = 0                        19DEC02.1186
>                if (snobn(i,j) .lt. -1.E24) snobn(i,j) = 0                        19DEC02.1187
>                if (snowhan(i,j) .lt. -1.E24) snowhan(i,j) = 0                    19DEC02.1188
>                if (snowhbn(i,j) .lt. -1.E24) snowhbn(i,j) = 0                    19DEC02.1189
>                if (albedon(i,j) .lt. -1.E24) albedon(i,j) = 16.                  19DEC02.1190
>                if (albmaxn(i,j) .lt. -1.E24) albmaxn(i,j) = 65.                  19DEC02.1191
232a269,282
>                                                                                  19DEC02.1192
> C                                                                                19DEC02.1193
> C                 Masked interpolation of soil liquid water                      19DEC02.1194
> #ifndef MPP1                                                                     19DEC02.1195
>                   swcan(i,j,l) = stfun(i, j, l, swca, lmask)                     19DEC02.1196
>                   swcbn(i,j,l) = stfun(i, j, l, swcb, lmask)                     19DEC02.1197
> #else                                                                            19DEC02.1198
>                   swcan(i,j,l) = stfun(FLIC_L2G_M(i), FLIC_L2G_N(j),             19DEC02.1199
>      +                                 l, swca_g, lmask_g)                       19DEC02.1200
>                   swcbn(i,j,l) = stfun(FLIC_L2G_M(i), FLIC_L2G_N(j),             19DEC02.1201
>      +                                 l, swcb_g, lmask_g)                       19DEC02.1202
> #endif                                                                           19DEC02.1203
>                   if (swcan(i,j,l) .lt. -1.E24) swcan(i,j,l) = 0.25              19DEC02.1204
>                   if (swcbn(i,j,l) .lt. -1.E24) swcbn(i,j,l) = 0.25              19DEC02.1205
234a285,294
> c               Masked interpolation of monthly albedo                           19DEC02.1206
>                do l = 1, 12                                                      19DEC02.1207
> #ifndef MPP1                                                                     19DEC02.1208
>                  albmonn(i,j,l) = stfun(i, j, 1, albmon(1,1,l), lmask)           19DEC02.1209
> #else                                                                            19DEC02.1210
>                  albmonn(i,j,l) = stfun(FLIC_L2G_M(i), FLIC_L2G_N(j),            19DEC02.1211
>      +                                 1, albmon_g(1,1,l), lmask_g)              19DEC02.1212
> #endif                                                                           19DEC02.1213
>                  if (albmonn(i,j,l) .lt. -1.E24) albmonn(i,j,l) = 16.            19DEC02.1214
>                enddo                                                             19DEC02.1215
===================================================================
domain/nest/stotndi.F
diff -r3.2 -r3.4
637a638
>             PSCA3(J,I,NF)=SWCA(I,J,L)                                            19DEC02.1216
643a645
>       CALL SINTY(PSCA3,MJX,MIX,JWEST,ISOUTH,IENDC-1,1,1)                         19DEC02.1217
648a651
>       CALL SINTY(PSCA3,MJX,MIX,JENDC-1,ISOUTH,IENDC-1,2,1)                       19DEC02.1218
661a665,668
>           SWCAN(I,NN,L)=PSCA3(JWEST,II,JJ)                                       19DEC02.1219
>           SWCAN(I,JNL-NN,L)=PSCA3(JENDC-1,II,JJE)                                19DEC02.1220
>           SWCBN(I,NN,L)=SWCAN(I,NN,L)                                            19DEC02.1221
>           SWCBN(I,JNL-NN,L)=SWCAN(I,JNL-NN,L)                                    19DEC02.1222
668a676
>             PSCA3(J,I,NF)=SWCA(I,J,L)                                            19DEC02.1223
674a683,684
>       CALL SINTX(PSCA3,MJX,MIX,JWEST,JENDC-1,ISOUTH,1,1)                         19DEC02.1224
>       CALL SINTX(PSCA3,MJX,MIX,JWEST,JENDC-1,IENDC-1,2,1)                        19DEC02.1225
687a698,701
>           SWCAN(NN,J,L)=PSCA3(JJ,ISOUTH,II)                                      19DEC02.1226
>           SWCAN(INL-NN,J,L)=PSCA3(JJ,IENDC-1,IIN)                                19DEC02.1227
>           SWCBN(NN,J,L)=SWCAN(NN,J,L)                                            19DEC02.1228
>           SWCBN(INL-NN,J,L)=SWCAN(INL-NN,J,L)                                    19DEC02.1229
===================================================================
dynamics/nonhydro/solve.F
diff -r3.45 -r3.51
83a84,103
> C+---+-----------------------------------------------------------------+         19DEC02.1230
> C+---+-----------------------------------------------------------------+         19DEC02.1231
> #undef CALL_EVERY_OTHER_TSTEP                                                    19DEC02.1232
> C+---+-----------------------------------------------------------------+         19DEC02.1233
> #if defined (CALL_EVERY_OTHER_TSTEP)                                            
> C                                                                                19DEC02.1235
> C..These variables are used for calling EXMOISG every other timestep.            19DEC02.1236
> C                                                                                19DEC02.1237
>       common/ex_ten/tex_ten,qvex_ten,qcex_ten,qrex_ten,qiex_ten,                 19DEC02.1238
>      -     qniex_ten,qgex_ten,qncex_ten                                          19DEC02.1239
>       real tex_ten(MIX, MJX, MKX, MAXNES)                                        19DEC02.1240
>      +    ,qvex_ten(MIX, MJX, MKX, MAXNES)                                       19DEC02.1241
>      +    ,qcex_ten(MIXM, MJXM, MKXM, MAXNES)                                    19DEC02.1242
>      +    ,qrex_ten(MIXM, MJXM, MKXM, MAXNES)                                    19DEC02.1243
>      +    ,qiex_ten(MIXIC, MJXIC, MKXIC, MAXNES)                                 19DEC02.1244
>      +    ,qniex_ten(MIXIC, MJXIC, MKXIC, MAXNES)                                19DEC02.1245
>      +    ,qgex_ten(MIXIG, MJXIG, MKXIG, MAXNES)                                 19DEC02.1246
>      +    ,qncex_ten(MIXIG, MJXIG, MKXIG, MAXNES)                                19DEC02.1247
> #endif                                                                           19DEC02.1248
> C+---+-----------------------------------------------------------------+         19DEC02.1249
115a136
>       REAL      TGSTOR(MIX,MJX)                                                  19DEC02.1250
681a703
>             SNOWNCT(I,J)=0.                                                      19DEC02.1251
912a935,950
> C                                                                                19DEC02.1252
> C FOR SEA ICE ONLY (IEXSI.GE.1)                                                  19DEC02.1253
> C STORE TG**4 AREA WEIGHTED AVG IN TGB FOR RADIATION CALCULATIONS                19DEC02.1254
> C STORE ORIGINAL TG IN TGSTOR                                                    19DEC02.1255
> C                                                                                19DEC02.1256
>       IF(IEXSI.GE.1)THEN                                                         19DEC02.1257
>         DO J=1,JLX                                                               19DEC02.1258
>           DO I=1,ILX                                                             19DEC02.1259
>             TGSTOR(I,J)=TGB(I,J)                                                 19DEC02.1260
>             IF(SEAICE(I,J).GT.0.02)THEN                                          19DEC02.1261
>               TGB(I,J)=(SEAICE(I,J)*TGSI(I,J)**4+                                19DEC02.1262
>      +                  (1-SEAICE(I,J))*271.4**4)**0.25                          19DEC02.1263
>             ENDIF                                                                19DEC02.1264
>           ENDDO                                                                  19DEC02.1265
>         ENDDO                                                                    19DEC02.1266
>       ENDIF                                                                      19DEC02.1267
1047a1086,1096
> C                                                                                19DEC02.1268
> C FOR SEA ICE ONLY (IEXSI.GE.1)                                                  19DEC02.1269
> C COPY TGSTOR TO TG (RETURN ORIGINAL VALUE TO TG)                                19DEC02.1270
> C                                                                                19DEC02.1271
>       IF(IEXSI.GE.1)THEN                                                         19DEC02.1272
>         DO J=1,JLX                                                               19DEC02.1273
>           DO I=1,ILX                                                             19DEC02.1274
>             TGB(I,J)=TGSTOR(I,J)                                                 19DEC02.1275
>           ENDDO                                                                  19DEC02.1276
>         ENDDO                                                                    19DEC02.1277
>       ENDIF                                                                      19DEC02.1278
1798c1847,1856
<      +           QNC3D,PP3D,PSB,RAINNC,SNOWNCT,INEST,J,IBNES,IENES-1)            05DEC01.527
---
>      +           QNC3D,PP3D,PSB,RAINNC,SNOWNCT,INEST,J,IBNES,IENES-1             19DEC02.1279
> C+---+-----------------------------------------------------------------+         19DEC02.1280
> #if defined (CALL_EVERY_OTHER_TSTEP)                               
>      +           ,tex_ten(1,1,1,INEST), qvex_ten(1,1,1,INEST)                    19DEC02.1282
>      +           ,qcex_ten(1,1,1,INEST), qrex_ten(1,1,1,INEST)                   19DEC02.1283
>      +           ,qiex_ten(1,1,1,INEST), qniex_ten(1,1,1,INEST)                  19DEC02.1284
>      +           ,qgex_ten(1,1,1,INEST), qncex_ten(1,1,1,INEST)                  19DEC02.1285
> #endif                                                                           19DEC02.1286
>      +)                                                                          19DEC02.1287
> C+---+-----------------------------------------------------------------+         19DEC02.1288
1872,1873c1930,1934
<                 ALB(I,J)=ALBD(IS,ISN)/100.*(1.+SCFX(IS))                         05DEC01.560
<                 THC(I,J)=THERIN(ISICE,ISN)/100.                                  05DEC01.561
---
>                 if(isoil.ne.2)then                                               19DEC02.1289
>                   ALB(I,J)=ALBD(IS,ISN)/100.*(1.+SCFX(IS))                       19DEC02.1290
>                   THC(I,J)=THERIN(ISICE,ISN)/100.                                19DEC02.1291
>                   MAVAIL(I,J)=SLMO(ISICE,ISN)                                    19DEC02.1292
>                 endif                                                            19DEC02.1293
1875d1935
<                 MAVAIL(I,J)=SLMO(ISICE,ISN)                                      05DEC01.563
1877,1878c1937,1941
<                 ALB(I,J)=ALBD(IS,ISN)/100.                                       05DEC01.565
<                 THC(I,J)=THERIN(IS,ISN)/100.                                     05DEC01.566
---
>                 if(isoil.ne.2)then                                               19DEC02.1294
>                   ALB(I,J)=ALBD(IS,ISN)/100.                                     19DEC02.1295
>                   THC(I,J)=THERIN(IS,ISN)/100.                                   19DEC02.1296
>                   MAVAIL(I,J)=SLMO(IS,ISN)                                       19DEC02.1297
>                 endif                                                            19DEC02.1298
1880d1942
<                 MAVAIL(I,J)=SLMO(IS,ISN)                                         05DEC01.568
2114c2176
<       XTIME=FLOAT(KTAU)*DTMIN                                                    05DEC01.574
---
>       XTIME=XSTNES(INEST)+FLOAT(KTAU)*DTMIN                                      19DEC02.1299
===================================================================
dynamics/nonhydro/sound.F
diff -r3.4 -r3.6
131,134c131,136
<       CS=SQRT(GAMMA*R*T0(1,1,KX))                                                SOUND.133
< #ifdef MPP1                                                                      SOUND.134
< #  include <mpp_sound_10.incl>                                                   SOUND.135
< #endif                                                                           SOUND.136
---
> cto enable MPI_IO_NODE to work correctly                                         19DEC02.1300
> C      CS=SQRT(GAMMA*R*T0(1,1,KX))                                               19DEC02.1301
> C#ifdef MPP1                                                                     19DEC02.1302
> C#  include <mpp_sound_10.incl>                                                  19DEC02.1303
> C#endif                                                                          19DEC02.1304
>       CS=SQRT(GAMMA*R*TS0)                                                       19DEC02.1305
===================================================================
include/Makefile
diff -r3.0 -r3.2
25c25
< 	@echo "C--- 5-LAYER SOIL (ISLDIM=1,MLX=6), OSU LAND SFC (ILDDIM=1,MLX=4). ">>$(PINCL)
---
> 	@echo "C--- MULTI-LAYER SOIL (ISLDIM=1,MLX=6 OR 8), NOAH LAND SFC (ILDDIM=1,MLX=4). ">>$(PINCL)
===================================================================
include/comicl.incl
diff -r3.3 -r3.5
34c34
<      &           PBLSIG,EDDYZ,TST,WST,QST,                                       COMICL.34
---
>      &           PBLSIG,EDDYZ,TST,WST,QST,USTM,                                  19DEC02.1306
45c45
<      &           TST(MIX),WST(MIX),QST(MIX),                                     COMICL.45
---
>      &           TST(MIX,MJX),WST(MIX,MJX),QST(MIX),USTM(MIX),                   19DEC02.1307
===================================================================
include/fddagd.incl
diff -r3.0 -r3.2
23c23
<      1  (IFPSB,PSBD(MIX,MJX)),                                                   FDDAGD.23
---
>      1  (IFPSB,PSBD(MIXFG,MJXFG)),                                               19DEC02.1308
===================================================================
include/jrg.incl
diff -r3.2 -r3.4
12a13
>      9,DIACE_min,RHO_not,ron_qr0,ron_delqr0,ron_const1r,ron_const2r              19DEC02.1309
24a26
>      +,DIACE_min,RHO_not,ron_qr0,ron_delqr0,ron_const1r,ron_const2r              19DEC02.1310
===================================================================
include/param2.incl
diff -r3.9 -r3.13
5c5
<      2 BDYFRQ,BUFFRQ,TBDYLBE,BDYLTIM,BDYLFRQ,TSLAT,TSLON,SOILFAC                 07NOV00.1115
---
>      2 BDYFRQ,BUFFRQ,TBDYLBE,BDYLTIM,BDYLFRQ,TSLAT,TSLON,SOILFAC,CKH             19DEC02.1311
12c12
<      6 ,ITSN,JTSN,ISSTVAR,IZ0TOPT                                                05DEC01.643
---
>      6 ,ITSN,JTSN,ISSTVAR,IZ0TOPT,IEXSI,IPOLAR                                   19DEC02.1312
23c23
<      4  ISSTVAR,IZ0TOPT                                                          05DEC01.644
---
>      4  ISSTVAR,IZ0TOPT,CKH,IEXSI,IPOLAR                                         19DEC02.1313
===================================================================
include/parame
diff -r3.14 -r3.17
79c79
<       PARAMETER (NVARX=8,NVARMX=4,NVARSX=47,NVARI=13,                            05DEC01.1520
---
>       PARAMETER (NVARX=8,NVARMX=4,NVARSX=51,NVARI=13,                            19DEC02.2064
115c115
<      1     32*MIXL*MJXL+4*MIXL*MJXL*MLX+MIXL*MJXL*12+                            05DEC01.1522
---
>      1     35*MIXL*MJXL+6*MIXL*MJXL*MLX+2*MIXL*MJXL*12+                          19DEC02.2065
153c153
< C--- 37 FOR LAND-SURFACE,                                                        05DEC01.1525
---
> C--- 43 FOR LAND-SURFACE,                                                        19DEC02.2066
167c167
<      1     +NVARI+NVARP+27+20+46+37+9+20+2+14+1+1                                05DEC01.1526
---
>      1     +NVARI+NVARP+27+20+46+43+9+20+2+14+1+1                                19DEC02.2067
===================================================================
include/point2d.incl
diff -r3.7 -r3.9
3a4
> C ADD POINTERS FOR 2D SEAICE VARIABLES                                           19DEC02.1314
33a35,37
>       REAL SEAICE,TGSI,HFXSI,QFXSI                                               19DEC02.1315
>       POINTER (IASI,SEAICE(MIX,MJX)), (IATGS, TGSI(MIX,MJX)),                    19DEC02.1316
>      1        (IAHXS,HFXSI(MIX,MJX)), (IAQXS,QFXSI(MIX,MJX))                     19DEC02.1317
39c43,44
<      5              IASR, IATSS,IATA2,IAQA2,IAUA10,IAVA10,IASNT                  05DEC01.648
---
>      5              IASR, IATSS,IATA2,IAQA2,IAUA10,IAVA10,IASNT,IASI,            19DEC02.1318
>      6              IATGS,IAHXS,IAQXS                                            19DEC02.1319
===================================================================
include/point2dn.incl
diff -r3.7 -r3.9
3a4
> C ADD POINTERS FOR 2D SEAICE VARIABLES                                           19DEC02.1320
33a35,37
>       REAL SEAICN,TGSIN,HFXSIN,QFXSIN                                            19DEC02.1321
>       POINTER (INASI,SEAICN(MIX,MJX)),(INATGS, TGSIN(MIX,MJX)),                  19DEC02.1322
>      1       (INAHXS,HFXSIN(MIX,MJX)),(INAQXS,QFXSIN(MIX,MJX))                   19DEC02.1323
40c44,45
<      5           INASR,INATSS,INATA2,INAQA2,INAUA10,INAVA10,INASNT               05DEC01.652
---
>      5           INASR,INATSS,INATA2,INAQA2,INAUA10,INAVA10,INASNT,              19DEC02.1324
>      6           INASI,INATGS,INAHXS,INAQXS                                      19DEC02.1325
===================================================================
include/soilp.incl
diff -r3.4 -r3.6
6c6
<      & XICE,VEGFMO                                                               05DEC01.655
---
>      & XICE,VEGFMO,ALBMON,XVEGMN,ALBEDO,ALBMAX,SWCA,SWCB,SNOWHA,SNOWHB           19DEC02.1326
9,10c9,10
<       REAL LAI,ALBEDO,RADNET,THZ1OB,RHOBS,RA,RS,RSTMIN                           07NOV00.1153
<       REAL XLAI,XVEG,XLAIMN,XVEGMN                                               07NOV00.1154
---
>       REAL LAI,RADNET,THZ1OB,RHOBS,RA,RS,RSTMIN                                  19DEC02.1327
>       REAL XLAI,XVEG,XLAIMN                                                      19DEC02.1328
24a25
>      & (IAALM,ALBMAX(MIXL,MJXL)),                                                19DEC02.1329
26a28
>      & (IASNHA,SNOWHA(MIXL,MJXL)), (IASNHB,SNOWHB(MIXL,MJXL)),                   19DEC02.1330
30c32,33
<      & (IAVGM,VEGFMO(MIXL,MJXL,NMO))                                             05DEC01.657
---
>      & (IASWA,SWCA(MIXL,MJXL,MLX)),(IASWB,SWCB(MIXL,MJXL,MLX)),                  19DEC02.1331
>      & (IAVGM,VEGFMO(MIXL,MJXL,NMO)),(IAAMO,ALBMON(MIXL,MJXL,NMO))               19DEC02.1332
34,35c37,38
<      &     IACMA,IASNA,IACMB,IASNB,IAVGT,IASLT,IASMA,IASTA,IASMB,IASTB,          05DEC01.658
<      &     IAVGM                                                                 05DEC01.659
---
>      &     IAALM,IACMA,IASNA,IACMB,IASNB,IASNHA,IASNHB,IAVGT,IASLT,              19DEC02.1333
>      &     IASMA,IASTA,IASMB,IASTB,IASWA,IASWB,IAVGM,IAAMO                       19DEC02.1334
===================================================================
include/soilpn.incl
diff -r3.4 -r3.6
6c6,7
<      & STCAN,STCBN,VEGFRCN,XICEN,VEGFMON                                         05DEC01.662
---
>      & STCAN,STCBN,VEGFRCN,XICEN,VEGFMON,ALBMONN,XVEGMNN,ALBEDON,                19DEC02.1335
>      & ALBMAXN,SWCAN,SWCBN,SNOWHAN,SNOWHBN                                       19DEC02.1336
9,10c10,11
<       REAL LAIN,ALBEDON,RADNETN,THZ1OBN,RHOBSN,RAN,RSN,RSTMINN                   07NOV00.1167
<       REAL XLAIN,XVEGN,XLAIMNN,XVEGMNN                                           07NOV00.1168
---
>       REAL LAIN,RADNETN,THZ1OBN,RHOBSN,RAN,RSN,RSTMINN                           19DEC02.1337
>       REAL XLAIN,XVEGN,XLAIMNN                                                   19DEC02.1338
24a26
>      & (INALM,ALBMAXN(MIXL,MJXL)),                                               19DEC02.1339
26a29
>      & (INSNHA,SNOWHAN(MIXL,MJXL)), (INSNHB,SNOWHBN(MIXL,MJXL)),                 19DEC02.1340
30c33,34
<      & (INVGM,VEGFMON(MIXL,MJXL,NMON))                                           05DEC01.664
---
>      & (INSWA,SWCAN(MIXL,MJXL,MLX)),(INSWB,SWCBN(MIXL,MJXL,MLX)),                19DEC02.1341
>      & (INVGM,VEGFMON(MIXL,MJXL,NMON)),(INAMN,ALBMONN(MIXL,MJXL,NMON))           19DEC02.1342
34,35c38,39
<      &     INCMA,INSNA,INCMB,INSNB,INVGT,INSLT,INSMA,INSTA,INSMB,INSTB,          05DEC01.665
<      &     INVGM                                                                 05DEC01.666
---
>      &     INALM,INCMA,INSNA,INCMB,INSNB,INSNHA,INSNHB,INVGT,INSLT,              19DEC02.1343
>      &     INSMA,INSTA,INSMB,INSTB,INSWA,INSWB,INVGM,INAMN                       19DEC02.1344
===================================================================
memory/address/addall.F
diff -r3.9 -r3.12
473,474c473,474
< C       25 REAL 2D ARRAYS                                                        07NOV00.1185
<         DO N=1,25                                                                07NOV00.1186
---
> C       28 REAL 2D ARRAYS                                                        19DEC02.1345
>         DO N=1,28                                                                19DEC02.1346
478c478
<         NCOU=NCOU+25*MIXL*MJXL                                                   07NOV00.1187
---
>         NCOU=NCOU+28*MIXL*MJXL                                                   19DEC02.1347
489,490c489,490
< C       4 REAL 3D ARRAYS                                                         ADDALL.485
<         DO N=1,4                                                                 ADDALL.486
---
> C       6 REAL 3D ARRAYS                                                         19DEC02.1348
>         DO N=1,6                                                                 19DEC02.1349
494c494
<         NCOU=NCOU+4*MIXL*MJXL*MLX                                                ADDALL.490
---
>         NCOU=NCOU+6*MIXL*MJXL*MLX                                                19DEC02.1350
496c496,499
< C       1 REAL 2D*12 ARRAY                                                       05DEC01.678
---
> C       2 REAL 2D*12 ARRAYS                                                      19DEC02.1351
>         IAXALL(NCOUNT,K)=LOC(ALLARR(NCOU+MIXL*MJXL*12,K))                        19DEC02.1352
>         NCOU=NCOU+MIXL*MJXL*12                                                   19DEC02.1353
>         NCOUNT=NCOUNT+1                                                          19DEC02.1354
519d521
<         NCOUNT=NCOUNT+1                                                          ADDALL.507
522a525
>         NCOUNT=NCOUNT+1                                                          19DEC02.1355
===================================================================
memory/address/addrx1c.F
diff -r3.5 -r3.7
42c42
<      4         IDUDU6B(4),IDUDU16(14),IDUD16(37)                                 05DEC01.687
---
>      4         IDUDU6B(4),IDUDU16(14),IDUD16(43)                                 19DEC02.1356
154c154
<       DO 170 N=1,37                                                              05DEC01.689
---
>       DO 170 N=1,43                                                              19DEC02.1357
===================================================================
memory/address/addrx1n.F
diff -r3.5 -r3.7
53c53
<      4         IDUDU6B(4),IDUDU16(14),IDUD16(37)                                 05DEC01.691
---
>      4         IDUDU6B(4),IDUDU16(14),IDUD16(43)                                 19DEC02.1358
166c166
<       DO 170 N=1,37                                                              05DEC01.693
---
>       DO 170 N=1,43                                                              19DEC02.1359
===================================================================
physics/cumulus/bm/bmpara.F
diff -r3.0 -r3.2
358c358
<             P(I)=A(KL)*PSB(I,J)*1000.+PT+PP3D(I,J,KL)                            BMPARA.358
---
>             P(I)=A(K)*PSB(I,J)*1000.+PT+PP3D(I,J,K)                              19DEC02.1360
===================================================================
physics/cumulus/kf/kfpara.F
diff -r3.4 -r3.6
838c838
<         LVF=MIN0(LVF,LET)                                                        KFPARA.812
---
>         LVF=MIN0(LVF,LET-2)                                                      19DEC02.1361
===================================================================
physics/cumulus/kf2/cupara8.F
diff -r1.3 -r1.5
63c63
< 	CALL KFDRIVE (psb,scr1,j,inest,ibeg,iend,T0,U3D,V3D,PP3D,T3D,                   CUPARA8.63
---
>          CALL KFDRIVE (psb,scr1,j,inest,ibeg,iend,T0,U3D,V3D,PP3D,T3D,           19DEC02.1362
===================================================================
physics/cumulus/kf2/kfpara2.F
diff -r1.7 -r1.9
600c600
<         AU0=PIE*RAD*RAD                                                          KFPARA2.600
---
>         AU0=0.01*DXSQ                                                            19DEC02.1363
===================================================================
physics/explicit/reisner1/exmoisr.F
diff -r3.13 -r3.18
23a24,27
> C                                                                     C          19DEC02.1364
> C     ADD FLAG (MEYERS) FOR USE OF MEYERS ICE NUCLEI CONC. EQ         C          19DEC02.1365
> C     IN PLACE OF FLETCHER EQ                                         C          19DEC02.1366
> C                                                                     C          19DEC02.1367
110a115
>       real r1, r2                                                                19DEC02.1368
119a125,132
> C                                                                                19DEC02.1369
> C ADD FLAG FOR MEYERS ICE NUCLEI CONC. EQ                                        19DEC02.1370
>       INTEGER MEYERS                                                             19DEC02.1371
> C MEYERS=1 : USE MEYERS ICE NUCLEI CONC. EQ.                                     19DEC02.1372
> C MEYERS=0 : USE FLETCHER or cooper ICE NUCLEI CONC. EQ.                         19DEC02.1373
>       MEYERS= 0                                                                  19DEC02.1374
>       IF(IPOLAR.EQ.1)MEYERS=1                                                    19DEC02.1375
>       r1 = 1.e-25                                                                19DEC02.1376
159,162c172,175
<           CLOUD(I,K)=AMAX1(1.E-25,QC3D(I,J,K))                                   EXMOISR.114
<           ICE(I,K)=AMAX1(1.E-25,QI3D(I,J,K))                                     EXMOISR.115
<           RAIN(I,K)=AMAX1(1.E-25,QR3D(I,J,K))                                    EXMOISR.116
<           SNOW(I,K)=AMAX1(1.E-25,QNI3D(I,J,K))                                   EXMOISR.117
---
>           CLOUD(I,K)=AMAX1(r1,QC3D(I,J,K))                                       19DEC02.1377
>           ICE(I,K)=AMAX1(r1,QI3D(I,J,K))                                         19DEC02.1378
>           RAIN(I,K)=AMAX1(r1,QR3D(I,J,K))                                        19DEC02.1379
>           SNOW(I,K)=AMAX1(r1,QNI3D(I,J,K))                                       19DEC02.1380
231a245,250
>           IF(MEYERS.EQ.1)THEN                                                    19DEC02.1381
> C MEYERS ICE CONC. EQ.                                                           19DEC02.1382
>             XNC=1000.*EXP(-0.639+0.1296*(100.*                                   19DEC02.1383
>      +        (QVQVSI(I,K)-1.)))/RHO(I,K)                                        19DEC02.1384
>            XNC=AMAX1(XNC,10000./RHO(I,K))                                        19DEC02.1385
>           ELSE                                                                   19DEC02.1386
233c252,253
<           XNC=TNO*EXP(ATO*(TO-TAOUT(I,K)))/RHO(I,K)                              EXMOISR.176
---
>             XNC=TNO*EXP(ATO*(TO-TAOUT(I,K)))/RHO(I,K)                            19DEC02.1387
>           ENDIF                                                                  19DEC02.1388
253c273
<             IF(CLOUD(I,K).GT.0.)THEN                                             EXMOISR.188
---
>             IF(CLOUD(I,K).GT.r1)THEN                                             19DEC02.1389
261c281
<           IF(SNOW(I,K).EQ.0)THEN                                                 EXMOISR.196
---
>           IF(SNOW(I,K).LE.r1)THEN                                                19DEC02.1390
272c292
<           IF(SNOW(I,K).EQ.0)THEN                                                 EXMOISR.202
---
>           IF(SNOW(I,K).le.r1)THEN                                                19DEC02.1391
299c319
< C...AUTOCONVERSION OF CLOUD ICE TO SNOW, DUDHIA  (B4):                           EXMOISR.220
---
> C...AUTOCONVERSION OF CLOUD ICE TO SNOW, DUDHIA  (B9):                           19DEC02.1392
312c332
<           IF((SNOW(I,K).GT.0.).AND.(ISAT.EQ.1))THEN                              EXMOISR.229
---
>           IF((SNOW(I,K).GT.r1).AND.(ISAT.EQ.1))THEN                              19DEC02.1393
314c334
<           ELSEIF(SNOW(I,K).GT.0)THEN                                             EXMOISR.231
---
>           ELSEIF(SNOW(I,K).GT.r1)THEN                                            19DEC02.1394
332c352
<           IF(RAIN(I,K).EQ.0)THEN                                                 EXMOISR.244
---
>           IF(RAIN(I,K).le.r1)THEN                                                19DEC02.1395
342c362,363
<           IF(RAIN(I,K).GT.0.)PRE(I,K)=DEPR1*(QAOUT(I,K)/QVS(I,K)-1.)*(           EXMOISR.250
---
>           IF(RAIN(I,K).GT.r1)                                                    19DEC02.1396
>      &    PRE(I,K)=DEPR1*(QAOUT(I,K)/QVS(I,K)-1.)*(                              19DEC02.1397
357c378
<           IF(SNOW(I,K).EQ.0.)THEN                                                EXMOISR.260
---
>           IF(SNOW(I,K).le.r1)THEN                                                19DEC02.1398
371c392
<           IF((SNOW(I,K).GT.0.).AND.(QAOUT(I,K)-QVS(I,K).GE.0.))THEN              EXMOISR.274
---
>           IF((SNOW(I,K).GT.r1).AND.(QAOUT(I,K)-QVS(I,K).GE.0.))THEN              19DEC02.1399
373c394
<           ELSEIF(SNOW(I,K).GT.0.)THEN                                            EXMOISR.276
---
>           ELSEIF(SNOW(I,K).GT.r1)THEN                                            19DEC02.1400
521a543
> 	  r2 = r1 * psb(i,j)                                                            19DEC02.1401
539c561
<      +               AMAX1(1.E-25,QR3D(I,J,K)*PSB(I,J)+DT*QR3DTEN(I,J,K)         EXMOISR.411
---
>      +               AMAX1(r2,QR3D(I,J,K)*PSB(I,J)+DT*QR3DTEN(I,J,K)             19DEC02.1402
542c564
<      +               AMAX1(1.E-25,QNI3D(I,J,K)*PSB(I,J)+DT*                      EXMOISR.414
---
>      +               AMAX1(r2,QNI3D(I,J,K)*PSB(I,J)+DT*                          19DEC02.1403
545c567
<      +               AMAX1(1.E-25,QI3D(I,J,K)*PSB(I,J)+DT*QI3DTEN(I,J,K)         EXMOISR.417
---
>      +               AMAX1(r2,QI3D(I,J,K)*PSB(I,J)+DT*QI3DTEN(I,J,K)             19DEC02.1404
575c597
<           IF(ICE(I,K).GT.1.E-25)THEN                                             EXMOISR.439
---
>           IF(ICE(I,K).GT.r1)THEN                                                 19DEC02.1405
660c682
<       SNOWNCT(I,J)=(FALOUTS(KL)+FALOUTI(KL))*DTMIN*6000./G/NSTEP                 05DEC01.739
---
>       SNOWNCT(I,J)=(FALOUTS(KL)+FALOUTI(KL))*DTMIN*6000.*G_RCP*RCP_NSTEP         19DEC02.1406
===================================================================
physics/explicit/reisner1/lexmoisr.F
diff -r3.5 -r3.8
16a17,20
> C                                                                     C          19DEC02.1407
> C     ADD FLAG (MEYERS) FOR USE OF MEYERS ICE NUCLEI CONC. EQ         C          19DEC02.1408
> C     IN PLACE OF FLETCHER EQ                                         C          19DEC02.1409
> C                                                                     C          19DEC02.1410
86a91,96
> C ADD FLAG FOR MEYERS ICE NUCLEI CONC. EQ                                        19DEC02.1411
>       INTEGER MEYERS                                                             19DEC02.1412
> C MEYERS=1 : USE MEYERS ICE NUCLEI CONC. EQ.                                     19DEC02.1413
> C MEYERS=0 : USE FLETCHER ICE NUCLEI CONC. EQ.                                   19DEC02.1414
>       MEYERS=0                                                                   19DEC02.1415
>       IF(IPOLAR.EQ.1)MEYERS=1                                                    19DEC02.1416
181a192,196
>           IF(MEYERS.EQ.1)THEN                                                    19DEC02.1417
> C MEYERS ICE CONC. EQ.                                                           19DEC02.1418
>             XNC=1000.*EXP(-0.639+0.1296*(100.*                                   19DEC02.1419
>      +        (QVQVSI(I,K)-1.)))/RHO(I,K)                                        19DEC02.1420
>           ELSE                                                                   19DEC02.1421
185c200
<           XNC=NCICE(TAOUT(I,K))/RHO(I,K)                                         LEXMOISR.185
---
>             XNC=NCICE(TAOUT(I,K))/RHO(I,K)                                       19DEC02.1422
186a202
>           ENDIF                                                                  19DEC02.1423
===================================================================
physics/explicit/reisner2/exmoisg.F
diff -r3.7 -r3.11
0a1,3
> C+---+-----------------------------------------------------------------+         19DEC02.1424
> #undef CALL_EVERY_OTHER_TSTEP                                                    19DEC02.1425
> C+---+-----------------------------------------------------------------+         19DEC02.1426
5c8,13
<      &                   IN,J,IST,IEN)                                           EXMOISG.5
---
>      &                   IN,J,IST,IEN                                            19DEC02.1427
> #if defined (CALL_EVERY_OTHER_TSTEP) 
>      +                  ,tex_ten, qvex_ten, qcex_ten, qrex_ten                   19DEC02.1429
>      +                  ,qiex_ten, qniex_ten, qgex_ten, qncex_ten                19DEC02.1430
> #endif                                                                           19DEC02.1431
>      +)                                                                          19DEC02.1432
21c29
< C     THE SCHEME IS MODIFIED AGAIN FOR RELEASE-3-5 BY GREG THOMPSON,  C          EXMOISG.21
---
> C     THE SCHEME IS MODIFIED AGAIN FOR RELEASE-3-6 BY GREG THOMPSON,  C          19DEC02.1433
50a59,75
> C    RELEASE 3.6:                                                     C          19DEC02.1434
> C    30 JUL 2002                                                      C          19DEC02.1435
> C       BUG FIXES FOR RON2 AND NCON UNITS; FUDGEF CHANGED 1.0 TO 0.5; C          19DEC02.1436
> C       MOVE DIACE_min, RHO_not AND RONV CONSTANTS TO PARAMR/JRG;     C          19DEC02.1437
> C       AUTOCONVERSION DONE EARLIER; COMMENT IIWARM VARS AND GOTOS;   C          19DEC02.1438
> C       COMMENT OUT PRACS/PSACR AND ALPSNOW/ALPRAIN, SET ALPHARS=0.0; C          19DEC02.1439
> C       SUBSTITUTE TEMPERATURE-DEPENDENT SONV (Y-INTERCEPT EXP        C          19DEC02.1440
> C       DISTRIB FOR SNOW) FOR PREV MASS-DEPENDENT SONV.               C          19DEC02.1441
> C    06 NOV 2002                                                      C          19DEC02.1442
> C       CHANGE SNOW-TO-GRAUPEL CONVERSION.  PREVIOUSLY, BASED ON      C          19DEC02.1443
> C       MURAKAMI, RIMING GROWTH (PSACW) NEEDED TO EXCEED DEPOSITIONAL C          19DEC02.1444
> C       (PREI) GROWTH.  NOW PSACW MUST BE 2.5 TIMES GREATER THAN PREI.C          19DEC02.1445
> C       ALSO SWAPPED KESSLER AUTOCONVERSION FOR BERRY AND REINHARDT   C          19DEC02.1446
> C       SCHEME IMPLEMENTED AS IN WALKO ET AL. (1995).                 C          19DEC02.1447
> C    02 DEC 2002                                                      C          19DEC02.1448
> C       INCLUDE SCHMIDT NUMBER TO ONE-THIRD POWER (0.84) IN PREI,     C          19DEC02.1449
> C       PRE, PMLTEV (BUG FIX BY DR. GERHARD KRAMM)                    C          19DEC02.1450
138,140c163,174
<                                                                                  EXMOISG.138
<       LOGICAL IIWARM                                                             EXMOISG.139
< C+---+-----------------------------------------------------------------+         EXMOISG.140
---
> C     LOGICAL IIWARM                                                             19DEC02.1451
> C+---+-----------------------------------------------------------------+         19DEC02.1452
> #if defined (CALL_EVERY_OTHER_TSTEP) 
> C TEMP TIMESTEP HOLDING VARIABLE FOR CALLING ROUTINE EVERY OTHER TSTEP           19DEC02.1454
>       REAL tex_ten(MIX,MJX,MKX),        qvex_ten(MIX,MJX,MKX),                   19DEC02.1455
>      &     qcex_ten(MIXM,MJXM,MKXM),    qrex_ten(MIXM,MJXM,MKXM),                19DEC02.1456
>      &     qiex_ten(MIXIC,MJXIC,MKXIC), qniex_ten(MIXIC,MJXIC,MKXIC),            19DEC02.1457
>      &     qgex_ten(MIXIG,MJXIG,MKXIG), qncex_ten(MIXIG,MJXIG,MKXIG)             19DEC02.1458
>       REAL DTSAVE                                                                19DEC02.1459
>       INTEGER IEXFRQ                                                             19DEC02.1460
> #endif                                                                           19DEC02.1461
> C+---+-----------------------------------------------------------------+         19DEC02.1462
142,151c176,177
<       IIWARM=.FALSE.                                                             EXMOISG.142
<       IF(IIWARM)TO=173.0                                                         EXMOISG.143
<       RHO_NOT = 101325.0/(R*298.0)                                               EXMOISG.144
< C.. New RONV formulation                                                         EXMOISG.145
< c    Note: RON2 is set in PARAMR                                                 EXMOISG.146
<       ron_min = 1.e7                                                             EXMOISG.147
<       ron_qr0 = 0.00005                                                          EXMOISG.148
<       ron_delqr0 = 0.2*ron_qr0                                                   EXMOISG.149
<       ron_const1r = (ron2-ron_min)*0.5                                           EXMOISG.150
<       ron_const2r = (ron2+ron_min)*0.5                                           EXMOISG.151
---
> C     IIWARM=.TRUE.                                                              19DEC02.1463
> C     IF(IIWARM)TO=173.0                                                         19DEC02.1464
215c241
<            NCON(I,K)=AMAX1(R1,QNC3D(I,J,K))                                      EXMOISG.215
---
>            NCON(I,K)=AMAX1(R1,QNC3D(I,J,K))*RHOd(I,K)                            19DEC02.1465
218,224c244,255
<            SONV(I,K) = SON                                                       EXMOISG.218
<            IF (SNOW(I,K).GT. R1) THEN                                            EXMOISG.219
<               SONV(I,K) = (CONST1A*(DRAIN/(RHO(I,K)*SNOW(I,K)*CONST1B)           EXMOISG.220
<      +             *(PI*DSNOW/(RHO(I,K)*SNOW(I,K)))**(BS/4))**0.94)              EXMOISG.221
<      +             **(4./(4-0.94*BS))                                            EXMOISG.222
<               SONV(I,K) = MIN(SONV(I,K),SON)                                     EXMOISG.223
<            ENDIF                                                                 EXMOISG.224
---
> CCCCC      SONV(I,K) = SON                                                       19DEC02.1466
> CCCCC      IF (SNOW(I,K).GT. R1) THEN                                            19DEC02.1467
> CCCCC         SONV(I,K) = (CONST1A*(DRAIN/(RHO(I,K)*SNOW(I,K)*CONST1B)           19DEC02.1468
> CCCCC+             *(PI*DSNOW/(RHO(I,K)*SNOW(I,K)))**(BS/4))**0.94)              19DEC02.1469
> CCCCC+             **(4./(4-0.94*BS))                                            19DEC02.1470
> CCCCC         SONV(I,K) = MIN(SONV(I,K),SON)                                     19DEC02.1471
> CCCCC      ENDIF                                                                 19DEC02.1472
>                                                                                  19DEC02.1473
> C.. New SONV formulation based on Fig. 7, curve_3 of Houze et al 1979            19DEC02.1474
>            temp_C = amin1(-0.001, TAOUT(I,K)-273.15)                             19DEC02.1475
>            sonv(i,k) = amin1(2.0E8, 2.0E6*exp(-0.12*temp_C))                     19DEC02.1476
>                                                                                  19DEC02.1477
237,240d267
< C               RONV(I,K) = (4.95E9)*tanh(-(RAIN(I,K)-0.000090)                  EXMOISG.237
< C     +                      *3.0E5) + 5.05E9                                    EXMOISG.238
< C.. New RONV formulation                                                         EXMOISG.239
< C+---+-----------------------------------------------------------------+         EXMOISG.240
244c271
<            RONV(I,K) = RONV(I,K)/RON2                                            EXMOISG.244
---
>            RONV(I,K) = RONV(I,K)/RON                                             19DEC02.1478
293a321,343
>       dtsave = dt                                                                19DEC02.1479
> C+---+-----------------------------------------------------------------+         19DEC02.1480
> #if defined (CALL_EVERY_OTHER_TSTEP)   
> C TEMP TIMESTEP HOLDING VARIABLE FOR CALLING ROUTINE EVERY OTHER TSTEP           19DEC02.1482
>       iexfrq = 3                                                                 19DEC02.1483
>       if (mod(ktau-ktaur,iexfrq).eq.0) then                                      19DEC02.1484
>                                                                                  19DEC02.1485
>         dtsave = dt*iexfrq                                                       19DEC02.1486
>                                                                                  19DEC02.1487
>         do k = 1, KL                                                             19DEC02.1488
>            do i = IST, IEN                                                       19DEC02.1489
>               tex_ten(i,j,k)   = t3dten(i,j,k)                                   19DEC02.1490
>               qvex_ten(i,j,k)  = qv3dten(i,j,k)                                  19DEC02.1491
>               qcex_ten(i,j,k)  = qc3dten(i,j,k)                                  19DEC02.1492
>               qrex_ten(i,j,k)  = qr3dten(i,j,k)                                  19DEC02.1493
>               qiex_ten(i,j,k)  = qi3dten(i,j,k)                                  19DEC02.1494
>               qniex_ten(i,j,k) = qni3dten(i,j,k)                                 19DEC02.1495
>               qgex_ten(i,j,k)  = qg3dten(i,j,k)                                  19DEC02.1496
>               qncex_ten(i,j,k) = qnc3dten(i,j,k)                                 19DEC02.1497
>            enddo                                                                 19DEC02.1498
>         enddo                                                                    19DEC02.1499
> #endif                                                                           19DEC02.1500
> C+---+-----------------------------------------------------------------+         19DEC02.1501
305d354
<       DIACE_min = 2.0 * (3.0*XM01/(4.0*PI*DICE))**0.3333                         EXMOISG.305
322,324c371,407
<                                                                                  EXMOISG.322
<             IF(IIWARM)GOTO 701                                                   EXMOISG.323
<             SUPICE=(QAOUT(I,K)-QVSI(I,K))/DT                                     EXMOISG.324
---
>                                                                                  19DEC02.1502
> C---AUTOCONVERSION OF CLOUD WATER TO RAINWATER  (R-A.60)                         19DEC02.1503
> CC            PRC(I,K)=AMAX1(0.,QCK1*(CLOUD(I,K)-QCTH))                          19DEC02.1504
> CC          PRC(I,K)=AMAX1(0.,QCK1*(CLOUD(I,K)-0.00035))                         19DEC02.1505
>                                                                                  19DEC02.1506
> C+---+-----------------------------------------------------------------+         19DEC02.1507
> CC      ! Berry and Reinhardt autoconversion used in RAMS from Walko             19DEC02.1508
> CC      ! et al. (1995) with exponential size distrib (nu=1) though              19DEC02.1509
> CC      ! DCLO (above) is computed using monodisperse distrib.                   19DEC02.1510
>             walko_zeta = 2.7E-2*cloud(i,k)*(6.25E18*DCLO**4*0.707 - 0.4)         19DEC02.1511
>             walko_tau  = 3.7/(rho(i,k)*cloud(i,k))                               19DEC02.1512
>      +                          / (0.5E6*DCLO*0.707 - 0.75)                      19DEC02.1513
>             DQr_Dt = drain/rho(i,k) * (walko_zeta/walko_tau)                     19DEC02.1514
>             PRC(I,K) = AMAX1(0.0, DQr_Dt)                                        19DEC02.1515
> C+---+-----------------------------------------------------------------+         19DEC02.1516
>                                                                                  19DEC02.1517
>             IF(RAIN(I,K).GT.R1)THEN                                              19DEC02.1518
>                IF(CLOUD(I,K).GT.R1) THEN                                         19DEC02.1519
>                DRNO = 4.*SLOR(I,K)                                               19DEC02.1520
>                STOKE_R = DCLO*DCLO*VT2R*DRAIN/(9.*DUM21(I,K)*DRNO)               19DEC02.1521
>                EFF_CR = STOKE_R*STOKE_R/((STOKE_R+0.5)*(STOKE_R+0.5))            19DEC02.1522
>                EFF_CR = MAX(0.0, MIN(1.0, EFF_CR))                               19DEC02.1523
> C---ACCRETION OF CLOUD WATER BY RAINWATER  (R-A.61)                              19DEC02.1524
>                PRA(I,K)=ACRCR*RONV(I,K)*EFF_CR/EFCR*SLOR(I,K)**BACRCR            19DEC02.1525
>      +              *CLOUD(I,K)                                                  19DEC02.1526
>                ENDIF                                                             19DEC02.1527
>                                                                                  19DEC02.1528
> C...EVAPORATION OF RAINWATER  (R-A.62) [No depositional growth of rain - 17Feb2  19DEC02.1529
>                PRE(I,K)=DEPR1*RONV(I,K)*(QAOUT(I,K)/QVS(I,K)-1.)*(               19DEC02.1530
>      +              0.78*SLOR(I,K)*SLOR(I,K)+((DEPR2*RHO(I,K)                    19DEC02.1531
>      +              /DUM21(I,K))**0.5)*DEPR3*0.84*SLOR(I,K)**(DEPR4))            19DEC02.1532
>      +              /ABW(I,K)                                                    19DEC02.1533
>                PRE(I,K) = amin1(PRE(I,K), 0.0)                                   19DEC02.1534
>             ENDIF                                                                19DEC02.1535
> C           IF(IIWARM)GOTO 702                                                   19DEC02.1536
>                                                                                  19DEC02.1537
>             SUPICE=(QAOUT(I,K)-QVSI(I,K))/DTSAVE                                 19DEC02.1538
331c414
<                PRI(I,K)=AMAX1(0.,XM01/RHOd(I,K)*(XNC-NCON(I,K))/DT)              EXMOISG.331
---
>                PRI(I,K)=AMAX1(0.,XM01/RHOd(I,K)*(XNC-NCON(I,K))/DTSAVE)          19DEC02.1539
337c420
< C               PRI(I,K)=AMAX1(0.,XM01/RHOd(I,K)*(XNC-NCON(I,K))/DT)             EXMOISG.337
---
> C               PRI(I,K)=AMAX1(0.,XM01/RHOd(I,K)*(XNC-NCON(I,K))/DTSAVE)         19DEC02.1540
366,370c449,453
<                IF(SNOW(I,K).GT.R1)THEN                                           EXMOISG.366
<                   PSACR(I,K)=(CSR*RONV(I,K)*SONV(I,K)/RHOd(I,K))*                EXMOISG.367
<      +                 SQRT((ALPHA1*VT2R-BETA1*VT2S)**2+GAMMA1*VT2R              EXMOISG.368
<      +                 *VT2S)*(5.*SLOR(I,K)**6*SLOS(I,K)+2.*SLOR(I,K)**5         EXMOISG.369
<      +                 *SLOS(I,K)**2+0.5*SLOR(I,K)**4*SLOS(I,K)**3)              EXMOISG.370
---
> CCCCC          IF(SNOW(I,K).GT.R1)THEN                                           19DEC02.1541
> CCCCC             PSACR(I,K)=(CSR*RONV(I,K)*SONV(I,K)/RHOd(I,K))*                19DEC02.1542
> CCCCC+                 SQRT((ALPHA1*VT2R-BETA1*VT2S)**2+GAMMA1*VT2R              19DEC02.1543
> CCCCC+                 *VT2S)*(5.*SLOR(I,K)**6*SLOS(I,K)+2.*SLOR(I,K)**5         19DEC02.1544
> CCCCC+                 *SLOS(I,K)**2+0.5*SLOR(I,K)**4*SLOS(I,K)**3)              19DEC02.1545
372,376c455,459
<                   PRACS(I,K)=(CRS*RONV(I,K)*SONV(I,K)/RHOd(I,K))*                EXMOISG.372
<      +                 SQRT((ALPHA1*VT2R-BETA1*VT2S)**2+GAMMA1*VT2R              EXMOISG.373
<      +                 *VT2S)*(5.*SLOS(I,K)**6*SLOR(I,K)+2.*SLOS(I,K)**5         EXMOISG.374
<      +                 *SLOR(I,K)**2+0.5*SLOS(I,K)**4*SLOR(I,K)**3)              EXMOISG.375
<                ENDIF                                                             EXMOISG.376
---
> CCCCC             PRACS(I,K)=(CRS*RONV(I,K)*SONV(I,K)/RHOd(I,K))*                19DEC02.1546
> CCCCC+                 SQRT((ALPHA1*VT2R-BETA1*VT2S)**2+GAMMA1*VT2R              19DEC02.1547
> CCCCC+                 *VT2S)*(5.*SLOS(I,K)**6*SLOR(I,K)+2.*SLOS(I,K)**5         19DEC02.1548
> CCCCC+                 *SLOR(I,K)**2+0.5*SLOS(I,K)**4*SLOR(I,K)**3)              19DEC02.1549
> CCCCC          ENDIF                                                             19DEC02.1550
385,396d467
<                                                                                  EXMOISG.385
< C                 New Lambda = (4.*(lambda)^4)^0.2; where lambda = 1./SLOS       EXMOISG.386
< C                 CHANGES FOR NEW PARTICLE SIZE DISTRIBUTION OF SNOW             EXMOISG.387
<                                                                                  EXMOISG.388
< C..new..                  SLOSN = 0.75785828 * (SLOS(I,K)**0.8)                  EXMOISG.389
< C..new..                  DSNO = 4.*SLOSN                                        EXMOISG.390
< C..new..                  STOKE_S = DCLO*DCLO*VT2S*DRAIN/(9.*DUM21(I,K)*DSNO)    EXMOISG.391
< C..new..                  EFF_CS = STOKE_S*STOKE_S/((STOKE_S+0.4)*(STOKE_S+0.4)) EXMOISG.392
< C..new..                  EFF_CS = MAX(0.0, MIN(1.0, EFF_CS))                    EXMOISG.393
< C..new..                  PSACW(I,K)=ACRCS_new*EFF_CS/EFCS*SONV(I,K)             EXMOISG.394
< C..new..     +                 *SLOSN**BACRCS_new*CLOUD(I,K)                     EXMOISG.395
<                                                                                  EXMOISG.396
403d473
<                                                                                  EXMOISG.403
411,413d480
<                                                                                  EXMOISG.411
< C          CHANGES FOR NEW PARTICLE SIZE DISTRIBUTION FOR GRAUPEL                EXMOISG.412
<                                                                                  EXMOISG.413
420,427d486
<                                                                                  EXMOISG.420
< C..old..                  DGRO = 4.*SLOG(I,K)                                    EXMOISG.421
< C..old..                  STOKE_G = DCLO*DCLO*VT2G*DRAIN/(9.*DUM21(I,K)*DGRO)    EXMOISG.422
< C..old..                  EFF_CG = STOKE_G*STOKE_G/((STOKE_G+0.5)*(STOKE_G+0.5)) EXMOISG.423
< C..old..                  EFF_CG = MAX(0.0, MIN(1.0, EFF_CG))                    EXMOISG.424
< C..old..                  PGACW(I,K)=ACRCG*GONV(I,K)*EFF_CG/EFGC*SLOG(I,K)**BACR EXMOISG.425
< C..old..     +                 *CLOUD(I,K)                                       EXMOISG.426
<                                                                                  EXMOISG.427
463,470d521
<                                                                                  EXMOISG.463
< C              CHANGES FOR NEW PARTICLE SIZE DISTRIBUTION OF SNOW                EXMOISG.464
<                                                                                  EXMOISG.465
< C..new..               PREI(I,K)=DEPS1*SONV(I,K)*(QAOUT(I,K)/QVSI(I,K)-1.)       EXMOISG.466
< C..new..     +              *(0.65*SLOSN**3+((DEPS2*RHO(I,K)                     EXMOISG.467
< C..new..     +              /DUM21(I,K))**0.5)*0.44*4.423*SLOSN**(DEPS4+1.))     EXMOISG.468
< C..new..     +              /ABI(I,K) - DUM11(I,K)*PSACW(I,K)                    EXMOISG.469
<                                                                                  EXMOISG.470
473c524
<      +              /DUM21(I,K))**0.5)*DEPS3*SLOS(I,K)**(DEPS4))                 EXMOISG.473
---
>      +              /DUM21(I,K))**0.5)*DEPS3*0.84*SLOS(I,K)**(DEPS4))            19DEC02.1551
476,489c527,540
< C   MURAKAMI SNOW TO GRAUPEL                                                     EXMOISG.476
<                                                                                  EXMOISG.477
<                IF(CLOUD(I,K).GT.R1) THEN                                         EXMOISG.478
<                                                                                  EXMOISG.479
<                   if (prei(i,k).gt.psacw(i,k)) then                              EXMOISG.480
<                      pgemb(i,k)=0.                                               EXMOISG.481
<                      pgsacw(i,k)=0.                                              EXMOISG.482
<                      pssacw(i,k) = psacw(i,k)                                    EXMOISG.483
<                   else                                                           EXMOISG.484
<                      pgsacw(i,k)=psacw(i,k)                                      EXMOISG.485
<                      pgemb(i,k)=dsnow/(dgraupel-dsnow) * psacw(i,k)              EXMOISG.486
<                      pssacw(i,k)=0.                                              EXMOISG.487
<                   endif                                                          EXMOISG.488
<                ENDIF                                                             EXMOISG.489
---
> C+---+-----------------------------------------------------------------+         19DEC02.1552
> C  changed snow to graupel conversion to require riming growth exceed            19DEC02.1553
> C  depositional growth by factor 2.5 (Murakami required a 1.0 factor             19DEC02.1554
> C  while RH1984 required qc>0.5 and qs>0.1 - similar to 5.0 factor)              19DEC02.1555
>                if (psacw(i,k).gt.2.5*prei(i,k)) then                             19DEC02.1556
>                   pgemb(i,k)=dsnow/(dgraupel-dsnow) * psacw(i,k)                 19DEC02.1557
>                   pgsacw(i,k)=psacw(i,k)-pgemb(i,k)                              19DEC02.1558
>                   pssacw(i,k)=0.                                                 19DEC02.1559
>                else                                                              19DEC02.1560
>                   pgemb(i,k)=0.                                                  19DEC02.1561
>                   pgsacw(i,k)=0.                                                 19DEC02.1562
>                   pssacw(i,k) = psacw(i,k)                                       19DEC02.1563
>                endif                                                             19DEC02.1564
> C+---+-----------------------------------------------------------------+         19DEC02.1565
494d544
<                                                                                  EXMOISG.494
499,503d548
<                                                                                  EXMOISG.499
< C..old..               PREG(I,K)=DEPG1*GONV(I,K)*(QAOUT(I,K)/QVSI(I,K)-1.)       EXMOISG.500
< C..old..     +              *(0.78*SLOG(I,K)*SLOG(I,K)+((DEPG2*RHO(I,K)          EXMOISG.501
< C..old..     +              /DUM21(I,K))**0.5)*DEPG3*SLOG(I,K)**(DEPG4))         EXMOISG.502
< C..old..     +              /ABI(I,K) - DUM11(I,K)*PGACW(I,K)                    EXMOISG.503
505c550
<             FUDGEF = 1.0                                                         EXMOISG.505
---
>             FUDGEF = 0.5                                                         19DEC02.1566
543c588
<      +                    *ICE(I,K)/DT                                           EXMOISG.543
---
>      +                    *ICE(I,K)/DTSAVE                                       19DEC02.1567
564,593d608
<  701        CONTINUE                                                             EXMOISG.564
< C---AUTOCONVERSION OF CLOUD WATER TO RAINWATER  (R-A.60)                         EXMOISG.565
< CC            PRC(I,K)=AMAX1(0.,QCK1*(CLOUD(I,K)-QCTH))                          EXMOISG.566
<             PRC(I,K)=AMAX1(0.,QCK1*(CLOUD(I,K)-0.00035))                         EXMOISG.567
< CC      ! BERRY AUTOCONVERSION RATE:                                             EXMOISG.568
< C..            NB = CNP                                                          EXMOISG.569
< C..            DB = 0.30                                                         EXMOISG.570
< C..            CWC = RHO(I,K)*CLOUD(I,K)*1000.                                   EXMOISG.571
< C..            PRC(I,K) = 0.016667*CWC**2/(5.+0.0366*NB/(CWC*DB))                EXMOISG.572
<                                                                                  EXMOISG.573
<             IF(RAIN(I,K).GT.R1)THEN                                              EXMOISG.574
< C.. Added an IF block for Cloud water per John Brown code 2 Nov 2000             EXMOISG.575
<                IF(CLOUD(I,K).GT.R1) THEN                                         EXMOISG.576
<                DRNO = 4.*SLOR(I,K)                                               EXMOISG.577
<                STOKE_R = DCLO*DCLO*VT2R*DRAIN/(9.*DUM21(I,K)*DRNO)               EXMOISG.578
<                EFF_CR = STOKE_R*STOKE_R/((STOKE_R+0.5)*(STOKE_R+0.5))            EXMOISG.579
<                EFF_CR = MAX(0.0, MIN(1.0, EFF_CR))                               EXMOISG.580
< C---ACCRETION OF CLOUD WATER BY RAINWATER  (R-A.61)                              EXMOISG.581
<                PRA(I,K)=ACRCR*RONV(I,K)*EFF_CR/EFCR*SLOR(I,K)**BACRCR            EXMOISG.582
<      +              *CLOUD(I,K)                                                  EXMOISG.583
<                ENDIF                                                             EXMOISG.584
<                                                                                  EXMOISG.585
< C...EVAPORATION OF RAINWATER  (R-A.62) [No depositional growth of rain - 17Feb20 EXMOISG.586
<                PRE(I,K)=DEPR1*RONV(I,K)*(QAOUT(I,K)/QVS(I,K)-1.)*(               EXMOISG.587
<      +              0.78*SLOR(I,K)*SLOR(I,K)+((DEPR2*RHO(I,K)                    EXMOISG.588
<      +              /DUM21(I,K))**0.5)*DEPR3*SLOR(I,K)**(DEPR4))                 EXMOISG.589
<      +              /ABW(I,K)                                                    EXMOISG.590
<                PRE(I,K) = amin1(PRE(I,K), 0.0)                                   EXMOISG.591
<             ENDIF                                                                EXMOISG.592
<             IF(IIWARM)GOTO 702                                                   EXMOISG.593
609c624
<      +                    *RHO(I,K)/DUM21(I,K))**0.5)*DEPS3                      EXMOISG.609
---
>      +                    *RHO(I,K)/DUM21(I,K))**0.5)*DEPS3*0.84                 19DEC02.1568
611,612d625
< C.. Used to be AB in denominator of above line but changed to ABW                EXMOISG.611
< C.. per John Brown code 2 Nov 2000.                                              EXMOISG.612
628,629d640
< C.. Used to be AB in denominator of above line but changed to ABW                EXMOISG.628
< C.. per John Brown code 2 Nov 2000.                                              EXMOISG.629
640c651
<  702        CONTINUE                                                             EXMOISG.640
---
> C702        CONTINUE                                                             19DEC02.1569
646,649c657,660
<             PRE(I,K)=AMAX1(-RAIN(I,K)/DT,PRE(I,K))                               EXMOISG.646
<             PREI(I,K)=AMAX1(-SNOW(I,K)/DT,PREI(I,K))                             EXMOISG.647
<             PREG(I,K)=AMAX1(-GRAUPEL(I,K)/DT,PREG(I,K))                          EXMOISG.648
<             PRD(I,K)=AMAX1(-ICE(I,K)/DT,PRD(I,K))                                EXMOISG.649
---
>             PRE(I,K)=AMAX1(-RAIN(I,K)/DTSAVE,PRE(I,K))                           19DEC02.1570
>             PREI(I,K)=AMAX1(-SNOW(I,K)/DTSAVE,PREI(I,K))                         19DEC02.1571
>             PREG(I,K)=AMAX1(-GRAUPEL(I,K)/DTSAVE,PREG(I,K))                      19DEC02.1572
>             PRD(I,K)=AMAX1(-ICE(I,K)/DTSAVE,PRD(I,K))                            19DEC02.1573
651,653c662,665
<             ALPSNOW=AMAX1(1.E-25,DSNOW**2*(4.*SLOS(I,K))**6)                     EXMOISG.651
<             ALPRAIN=AMAX1(1.E-25,DRAIN**2*(4.*SLOR(I,K))**6)                     EXMOISG.652
<             ALPHARS=ALPSNOW/(ALPSNOW+ALPRAIN)                                    EXMOISG.653
---
> CCCCC       ALPSNOW=AMAX1(1.E-25,DSNOW**2*(4.*SLOS(I,K))**6)                     19DEC02.1574
> CCCCC       ALPRAIN=AMAX1(1.E-25,DRAIN**2*(4.*SLOR(I,K))**6)                     19DEC02.1575
> CCCCC       ALPHARS=ALPSNOW/(ALPSNOW+ALPRAIN)                                    19DEC02.1576
>             alphars = 0.0                                                        19DEC02.1577
663c675
<      +              PIFCW(I,K)+PIACW(I,K)+PGIACW(I,K))*DT                        EXMOISG.663
---
>      +              PIFCW(I,K)+PIACW(I,K)+PGIACW(I,K))*DTSAVE                    19DEC02.1578
680c692
<      +              +PICNG(I,K)-PISPL(I,K))*DT                                   EXMOISG.680
---
>      +              +PICNG(I,K)-PISPL(I,K))*DTSAVE                               19DEC02.1579
695c707
<      +              -PRA(I,K)+PGFR(I,K)-PRE(I,K))*DT                             EXMOISG.695
---
>      +              -PRA(I,K)+PGFR(I,K)-PRE(I,K))*DTSAVE                         19DEC02.1580
710c722
<      +              PSSACW(I,K))*DT                                              EXMOISG.710
---
>      +              PSSACW(I,K))*DTSAVE                                          19DEC02.1581
728c740
<      +              PGFR(I,K)+PICNG(I,K)+PGIACW(I,K))*DT                         EXMOISG.728
---
>      +              PGFR(I,K)+PICNG(I,K)+PGIACW(I,K))*DTSAVE                     19DEC02.1582
745,747c757
< C.. Added since we may have modified the two variables independently             EXMOISG.745
< C.. 2 Nov 2000 per John Brown code                                               EXMOISG.746
<                PSACW(I,K) = PSSACW(I,K) + PGSACW(I,K)                            EXMOISG.747
---
>                PSACW(I,K) = PSSACW(I,K) + PGSACW(I,K) + PGEMB(I,K)               19DEC02.1583
788,789c798,799
< C QNCTEN SHOULD BE #/M3                                                          EXMOISG.788
<                QNC3DTEN(I,J,K)=QNC3DTEN(I,J,K)+((PRI(I,K)                        EXMOISG.789
---
> C QNCTEN SHOULD BE #/KG                                                          19DEC02.1584
>                QNC3DTEN(I,J,K)=QNC3DTEN(I,J,K)+(((PRI(I,K)                       19DEC02.1585
793a804
>      +              )/RHOd(I,K)                                                  19DEC02.1586
796c807
<                TEMP_ICE = AMAX1(R1,QI3D(I,J,K)+DT*QI3DTEN(I,J,K)                 EXMOISG.796
---
>                TEMP_ICE = AMAX1(R1,QI3D(I,J,K)+DTSAVE*QI3DTEN(I,J,K)             19DEC02.1587
798c809
<                TEMP_NC  = AMAX1(R1,QNC3D(I,J,K)+DT*QNC3DTEN(I,J,K)               EXMOISG.798
---
>                TEMP_NC  = AMAX1(R1,QNC3D(I,J,K)+DTSAVE*QNC3DTEN(I,J,K)           19DEC02.1588
801c812,813
<                   RLU=RHOd(I,K)*TEMP_ICE/XM01                                    EXMOISG.801
---
> CCCCC             RLU=RHOd(I,K)*TEMP_ICE/XM01                                    19DEC02.1589
>                   RLU=TEMP_ICE/XM01                                              19DEC02.1590
803c815
<      +                 - PSB(I,J)*QNC3D(I,J,K))/DT                               EXMOISG.803
---
>      +                 - PSB(I,J)*QNC3D(I,J,K))/DTSAVE                           19DEC02.1591
805c817
<                   QNC3DTEN(I,J,K) = -1.*(TEMP_NC/DT)*PSB(I,J)                    EXMOISG.805
---
>                   QNC3DTEN(I,J,K) = -1.*(TEMP_NC/DTSAVE)*PSB(I,J)                19DEC02.1592
820c832,833
<                sum_terms=(PRC(I,K)+PRA(I,K)+PSACW(I,K)+PGACW(I,K))*DT            EXMOISG.820
---
>                sum_terms=(PRC(I,K)+PRA(I,K)+PSACW(I,K)+PGACW(I,K))               19DEC02.1593
>      -                    *DTSAVE                                                19DEC02.1594
831c844
<      +              PRACS(I,K)+PGACW(I,K))*DT                                    EXMOISG.831
---
>      +              PRACS(I,K)+PGACW(I,K))*DTSAVE                                19DEC02.1595
845c858
<                IF(IIWARM)GOTO 703                                                EXMOISG.845
---
> C              IF(IIWARM)GOTO 703                                                19DEC02.1596
847c860
<                sum_terms=(PRACS(I,K)-PMLTEV(I,K)-PSMLT(I,K))*DT                  EXMOISG.847
---
>                sum_terms=(PRACS(I,K)-PMLTEV(I,K)-PSMLT(I,K))*DTSAVE              19DEC02.1597
856c869
<      +              -PMLTGE(I,K))*DT                                             EXMOISG.856
---
>      +              -PMLTGE(I,K))*DTSAVE                                         19DEC02.1598
864c877
<  703           CONTINUE                                                          EXMOISG.864
---
> C703           CONTINUE                                                          19DEC02.1599
877c890
<                IF(IIWARM)GOTO 704                                                EXMOISG.877
---
> C              IF(IIWARM)GOTO 704                                                19DEC02.1600
884c897
<  704           CONTINUE                                                          EXMOISG.884
---
> C704           CONTINUE                                                          19DEC02.1601
893a907,943
> C+---+-----------------------------------------------------------------+         19DEC02.1602
> #if defined (CALL_EVERY_OTHER_TSTEP)  
> C TEMP TIMESTEP HOLDING VARIABLE FOR CALLING ROUTINE EVERY OTHER TSTEP           19DEC02.1604
> C.. Next section deals with the every other timestep issue                       19DEC02.1605
>                                                                                  19DEC02.1606
>       do k = 1, KL                                                               19DEC02.1607
>          do i = IST, IEN                                                         19DEC02.1608
>             tex_ten(i,j,k)   = t3dten(i,j,k)   - tex_ten(i,j,k)                  19DEC02.1609
>             qvex_ten(i,j,k)  = qv3dten(i,j,k)  - qvex_ten(i,j,k)                 19DEC02.1610
>             qcex_ten(i,j,k)  = qc3dten(i,j,k)  - qcex_ten(i,j,k)                 19DEC02.1611
>             qrex_ten(i,j,k)  = qr3dten(i,j,k)  - qrex_ten(i,j,k)                 19DEC02.1612
>             qiex_ten(i,j,k)  = qi3dten(i,j,k)  - qiex_ten(i,j,k)                 19DEC02.1613
>             qniex_ten(i,j,k) = qni3dten(i,j,k) - qniex_ten(i,j,k)                19DEC02.1614
>             qgex_ten(i,j,k)  = qg3dten(i,j,k)  - qgex_ten(i,j,k)                 19DEC02.1615
>             qncex_ten(i,j,k) = qnc3dten(i,j,k) - qncex_ten(i,j,k)                19DEC02.1616
>          enddo                                                                   19DEC02.1617
>       enddo                                                                      19DEC02.1618
>                                                                                  19DEC02.1619
>       else                                                                       19DEC02.1620
>                                                                                  19DEC02.1621
>       do k = 1, KL                                                               19DEC02.1622
>          do i = IST, IEN                                                         19DEC02.1623
>             t3dten(i,j,k)   = t3dten(i,j,k)   + tex_ten(i,j,k)                   19DEC02.1624
>             qv3dten(i,j,k)  = qv3dten(i,j,k)  + qvex_ten(i,j,k)                  19DEC02.1625
>             qc3dten(i,j,k)  = qc3dten(i,j,k)  + qcex_ten(i,j,k)                  19DEC02.1626
>             qr3dten(i,j,k)  = qr3dten(i,j,k)  + qrex_ten(i,j,k)                  19DEC02.1627
>             qi3dten(i,j,k)  = qi3dten(i,j,k)  + qiex_ten(i,j,k)                  19DEC02.1628
>             qni3dten(i,j,k) = qni3dten(i,j,k) + qniex_ten(i,j,k)                 19DEC02.1629
>             qg3dten(i,j,k)  = qg3dten(i,j,k)  + qgex_ten(i,j,k)                  19DEC02.1630
>             qnc3dten(i,j,k) = qnc3dten(i,j,k) + qncex_ten(i,j,k)                 19DEC02.1631
>          enddo                                                                   19DEC02.1632
>       enddo                                                                      19DEC02.1633
>                                                                                  19DEC02.1634
>       endif                                                                      19DEC02.1635
>                                                                                  19DEC02.1636
> #endif                                                                           19DEC02.1637
> C+---+-----------------------------------------------------------------+         19DEC02.1638
911a962
>             PRD(I,K)=CP*(1.+0.887*QAOUT(I,K))                                    19DEC02.1639
963,969c1014,1025
<             SONV(I,K) = SON                                                      EXMOISG.963
<             IF (UPDT_S.GT. R3) THEN                                              EXMOISG.964
<                SONV(I,K) = (CONST1A*(DRAIN/(RHO3*UPDT_S*CONST1B)                 EXMOISG.965
<      +              *(PI*DSNOW/(RHO3*UPDT_S))**(BS/4))**0.94)                    EXMOISG.966
<      +              **(4./(4-0.94*BS))                                           EXMOISG.967
<                SONV(I,K) = MIN(SONV(I,K),SON)                                    EXMOISG.968
<             ENDIF                                                                EXMOISG.969
---
> CCCCC       SONV(I,K) = SON                                                      19DEC02.1640
> CCCCC       IF (UPDT_S.GT. R3) THEN                                              19DEC02.1641
> CCCCC          SONV(I,K) = (CONST1A*(DRAIN/(RHO3*UPDT_S*CONST1B)                 19DEC02.1642
> CCCCC+              *(PI*DSNOW/(RHO3*UPDT_S))**(BS/4))**0.94)                    19DEC02.1643
> CCCCC+              **(4./(4-0.94*BS))                                           19DEC02.1644
> CCCCC          SONV(I,K) = MIN(SONV(I,K),SON)                                    19DEC02.1645
> CCCCC       ENDIF                                                                19DEC02.1646
>                                                                                  19DEC02.1647
> C.. New SONV formulation based on Fig. 7, curve_3 of Houze et al 1979            19DEC02.1648
>            temp_C = amin1(-0.001, SCR6(I,K)-273.15)                              19DEC02.1649
>            sonv(i,k) = amin1(2.0E8, 2.0E6*exp(-0.12*temp_C))                     19DEC02.1650
>                                                                                  19DEC02.1651
986c1042
<             RONV(I,K) = RONV(I,K)/RON2                                           EXMOISG.986
---
>             RONV(I,K) = RONV(I,K)/RON                                            19DEC02.1652
1064c1120
<       IF(IIWARM)GOTO 705                                                         EXMOISG.1064
---
> C     IF(IIWARM)GOTO 705                                                         19DEC02.1653
1088,1089c1144,1146
<                QNC3DTEN(I,J,K)=QNC3DTEN(I,J,K)+(RHO3*DUM11(I,K)                  EXMOISG.1088
<      +              /XM01)/DT                                                    EXMOISG.1089
---
> CCCCC          QNC3DTEN(I,J,K)=QNC3DTEN(I,J,K)+(RHO3*DUM11(I,K)                  19DEC02.1654
> CCCCC+              /XM01)/DT                                                    19DEC02.1655
>                QNC3DTEN(I,J,K)=QNC3DTEN(I,J,K)+(DUM11(I,K)/XM01)/DT              19DEC02.1656
1095c1152
<  705  CONTINUE                                                                   EXMOISG.1095
---
> C705  CONTINUE                                                                   19DEC02.1657
===================================================================
physics/explicit/simple/exmoiss.F
diff -r3.4 -r3.7
15a16,18
> C                                                                     C          19DEC02.1658
> C     ADD FLAG (MEYERS) FOR USE OF MEYERS ICE NUCLEI CONC. EQ         C          19DEC02.1659
> C     IN PLACE OF FLETCHER EQ                                         C          19DEC02.1660
51a55,60
> C ADD FLAG FOR MEYERS ICE NUCLEI CONC. EQ                                        19DEC02.1661
>       INTEGER MEYERS                                                             19DEC02.1662
> C MEYERS=1 : USE MEYERS ICE NUCLEI CONC. EQ.                                     19DEC02.1663
> C MEYERS=0 : USE FLETCHER ICE NUCLEI CONC. EQ.                                   19DEC02.1664
>       MEYERS=0                                                                   19DEC02.1665
>       IF(IPOLAR.EQ.1)MEYERS=1                                                    19DEC02.1666
114c123,129
<             XNC=XN0*EXP(BETAI*(TO-T(I,J,K)))/SCR6(I,K)                           EXMOISS.114
---
>             IF(MEYERS.EQ.1)THEN                                                  19DEC02.1667
> C MEYERS ICE CONC. EQ.                                                           19DEC02.1668
>               XNC=1000.*EXP(-0.639+0.1296*(100.*                                 19DEC02.1669
>      +          (QV(I,J,K)/SCR5(I,K)-1.)))/SCR6(I,K)                             19DEC02.1670
>             ELSE                                                                 19DEC02.1671
>               XNC=XN0*EXP(BETAI*(TO-T(I,J,K)))/SCR6(I,K)                         19DEC02.1672
>             ENDIF                                                                19DEC02.1673
===================================================================
physics/explicit/simple/lexmoiss.F
diff -r3.4 -r3.7
14a15,17
> C                                                                     C          19DEC02.1674
> C     ADD FLAG (MEYERS) FOR USE OF MEYERS ICE NUCLEI CONC. EQ         C          19DEC02.1675
> C     IN PLACE OF FLETCHER EQ                                         C          19DEC02.1676
46a50,55
> C ADD FLAG FOR MEYERS ICE NUCLEI CONC. EQ                                        19DEC02.1677
>       INTEGER MEYERS                                                             19DEC02.1678
> C MEYERS=1 : USE MEYERS ICE NUCLEI CONC. EQ.                                     19DEC02.1679
> C MEYERS=0 : USE FLETCHER ICE NUCLEI CONC. EQ.                                   19DEC02.1680
>       MEYERS=0                                                                   19DEC02.1681
>       IF(IPOLAR.EQ.1)MEYERS=1                                                    19DEC02.1682
111c120,126
<             XNC=NCICE(T(I,J,K))/SCR6(I,K)                                        LEXMOISS.111
---
>             IF(MEYERS.EQ.1)THEN                                                  19DEC02.1683
> C MEYERS ICE CONC. EQ.                                                           19DEC02.1684
>               XNC=1000.*EXP(-0.639+0.1296*(100.*                                 19DEC02.1685
>      +          (QV(I,J,K)/SCR5(I,K)-1.)))/SCR6(I,K)                             19DEC02.1686
>             ELSE                                                                 19DEC02.1687
>               XNC=NCICE(T(I,J,K))/SCR6(I,K)                                      19DEC02.1688
>             ENDIF                                                                19DEC02.1689
===================================================================
physics/hzdiffu/simple/diffu.F
diff -r3.0 -r3.2
101c101
<         I=2                                                                      DIFFU.101
---
>         I=IBGN                                                                   19DEC02.1690
===================================================================
physics/pbl_sfc/Makefile
diff -r3.2 -r3.3
72c72
< 		(cd osusfc; $(MAKE) all); \
---
> 		(cd noahlsm; $(MAKE) all); \
142c142
< 		(cd osusfc; $(MAKE) code); \
---
> 		(cd noahlsm; $(MAKE) code); \
213c213
< 		(cd osusfc; $(MAKE) little_f); \
---
> 		(cd noahlsm; $(MAKE) little_f); \
231c231
< 	(cd osusfc; $(MAKE) clean)
---
> 	(cd noahlsm; $(MAKE) clean)
===================================================================
physics/pbl_sfc/bulk/blkpbl.F
diff -r3.4 -r3.6
381c381
<           KZO=CKZ*DZQ(I,K)                                                       BLKPBL.381
---
>           KZO=CKZ*DZA(I,K-1)                                                     19DEC02.1691
===================================================================
physics/pbl_sfc/gspbl/gspbl.F
diff -r3.15 -r3.17
779c779
<             PSIH(I)=-10.*GZ1OZ0(I)                                               05DEC01.872
---
>             PSIM(I)=-10.*GZ1OZ0(I)                                               19DEC02.1692
782c782
<             PSIM(I)=PSIH(I)                                                      GSPBL.729
---
>             PSIH(I)=PSIM(I)                                                      19DEC02.1693
791c791
<             PSIH(I)=-5.0*BR(I)*GZ1OZ0(I)/(1.1-5.0*BR(I))                         GSPBL.738
---
>             PSIM(I)=-5.0*BR(I)*GZ1OZ0(I)/(1.1-5.0*BR(I))                         19DEC02.1694
794c794
<             PSIM(I)=PSIH(I)                                                      GSPBL.739
---
>             PSIH(I)=PSIM(I)                                                      19DEC02.1695
===================================================================
physics/pbl_sfc/hirpbl/hirpbl.F
diff -r3.13 -r3.16
479c479
<           KZO=CKZ*DZQ(I,KL)                                                      HIRPBL.457
---
>           KZO=CKZ*DZA(I,KL-1)                                                    19DEC02.1696
500a501,506
>           PSIM10(I)=-10.*GZ10OZ0(I)                                              19DEC02.1697
>           PSIM10(I)=AMAX1(PSIM10(I),-10.)                                        19DEC02.1698
>           PSIH10(I)=PSIM10(I)                                                    19DEC02.1699
>           PSIM2(I)=-10.*GZ2OZ0(I)                                                19DEC02.1700
>           PSIM2(I)=AMAX1(PSIM2(I),-10.)                                          19DEC02.1701
>           PSIH2(I)=PSIM2(I)                                                      19DEC02.1702
513a520,525
>           PSIM10(I)=-5.0*BR(I)*GZ10OZ0(I)/(1.1-5.0*BR(I))                        19DEC02.1703
>           PSIM10(I)=AMAX1(PSIM10(I),-10.)                                        19DEC02.1704
>           PSIH10(I)=PSIM10(I)                                                    19DEC02.1705
>           PSIM2(I)=-5.0*BR(I)*GZ2OZ0(I)/(1.1-5.0*BR(I))                          19DEC02.1706
>           PSIM2(I)=AMAX1(PSIM2(I),-10.)                                          19DEC02.1707
>           PSIH2(I)=PSIM2(I)                                                      19DEC02.1708
522c534,538
<           PSIH(I)=PSIM(I)                                                        HIRPBL.500
---
>           PSIH(I)=PSIM(I)                                                        19DEC02.1709
>           PSIM10(I)=0.                                                           19DEC02.1710
>           PSIH10(I)=PSIM10(I)                                                    19DEC02.1711
>           PSIM2(I)=0.                                                            19DEC02.1712
>           PSIH2(I)=PSIM2(I)                                                      19DEC02.1713
982c998
<             KZO=CKZ*DZQ(I,K)                                                     HIRPBL.900
---
>             KZO=CKZ*DZA(I,K-1)                                                   19DEC02.1714
===================================================================
physics/pbl_sfc/mrfpbl/mrfpbl.F
diff -r3.22 -r3.28
87c87
<       PARAMETER (KLPBL=MKX/2,RLAM=150.,PRMIN=0.5,PRMAX=4.)                       MRFPBL.48
---
>       PARAMETER (KLPBL=1,RLAM=150.,PRMIN=0.5,PRMAX=4.)                           19DEC02.1715
162c162
< C---- FOR OSUSFC                                                                 MRFPBL.104
---
> C---- FOR NOAH LSM                                                               19DEC02.1716
536c536,538
<           PSIT=GZ1OZ0(I)-PSIH(I)                                                 05DEC01.1010
---
> C     LOWER LIMIT ADDED TO PREVENT LARGE FLHC IN SOIL MODEL                      19DEC02.1717
> C     ACTIVATES IN UNSTABLE CONDITIONS WITH THIN LAYERS OR HIGH Z0               19DEC02.1718
>           PSIT=AMAX1(GZ1OZ0(I)-PSIH(I),2.)                                       19DEC02.1719
686c688
<      +       V10,TH2,Q2,RAINC,RAINNC,SNOWC,CHS2,CKLQ)                            05DEC01.1059
---
>      +       V10,TH2,Q2,RAINC,RAINNC,SNOWC,CHS2,CKLQ,ZNT)                        19DEC02.1720
855c857
<             XKZO=CKZ*DZQ(I,K)                                                    MRFPBL.744
---
>             XKZO=CKZ*DZA(I,K-1)                                                  19DEC02.1721
870c872
<           XKZO=CKZ*DZQ(I,K)                                                      MRFPBL.759
---
>           XKZO=CKZ*DZA(I,K-1)                                                    19DEC02.1722
===================================================================
physics/pbl_sfc/myepbl/Makefile
diff -r3.0 -r3.1
67a68
> myepbl.o: ../../../include/landuse.incl
===================================================================
physics/pbl_sfc/myepbl/myepbl.F
diff -r3.10 -r3.14
26c26
< C       COUPLE WITH OSU LSM                                                      05DEC01.1067
---
> C       COUPLE WITH OSU LSM. NOAH LSM SINCE V3.6                                 19DEC02.1723
42a43
> #     include <landuse.incl>                                                     19DEC02.1724
63a65
>       REAL ESG,QSSI,QSWT,THSI,THWT,HSFLXSI,HLFLXSI                               19DEC02.1725
100a103,112
> C                                                                                19DEC02.1726
> C Initialize new variables to zero at start of i loop                            19DEC02.1727
> C                                                                                19DEC02.1728
>         THSI=0.                                                                  19DEC02.1729
>         THWT=0.                                                                  19DEC02.1730
>         QSSI=0.                                                                  19DEC02.1731
>         QSWT=0.                                                                  19DEC02.1732
>         ESG=0.                                                                   19DEC02.1733
>         HSFLXSI=0.                                                               19DEC02.1734
>         HLFLXSI=0.                                                               19DEC02.1735
102a115,118
>         IF(SEAICE(I,J).GT.0.02)THEN                                              19DEC02.1736
> C Sea-ice grid point                                                             19DEC02.1737
>           ISM=0                                                                  19DEC02.1738
>         ENDIF                                                                    19DEC02.1739
127a144,166
> C                                                                                19DEC02.1740
> C Adjust value of QS to account for ice surface (permanent or sea ice)           19DEC02.1741
> C Calculate THSI and THWT for sea ice surface type                               19DEC02.1742
> C                                                                                19DEC02.1743
>         IF(NINT(SATBRT(I,J)).EQ.ISICE)THEN                                       19DEC02.1744
> C Permanent ice surface type                                                     19DEC02.1745
>           E1=0.611*EXP(22.514-6.15E3/TS)                                         19DEC02.1746
>           QS=0.622*E1/(PSURF-E1)                                                 19DEC02.1747
>         ELSEIF(SEAICE(I,J).GT.0.02)THEN                                          19DEC02.1748
> C Sea ice surface type                                                           19DEC02.1749
>           E1=SVP1*EXP(SVP2*(271.4-SVPT0)/(271.4-SVP3))                           19DEC02.1750
> c         write(6,*) 'i = ',i,' j = ',j,' tgsi = ',tgsi(i,j),' in = ',in         19DEC02.1751
>           ESG=0.611*EXP(22.514-6.15E3/TGSI(I,J))                                 19DEC02.1752
>           QS=EP2*E1/(PSURF-E1)*(1.-SEAICE(I,J))+                                 19DEC02.1753
>      +       0.622*ESG/(PSURF-ESG)*SEAICE(I,J)                                   19DEC02.1754
>           QSSI=0.622*ESG/(PSURF-ESG)                                             19DEC02.1755
>           QSWT=EP2*E1/(PSURF-E1)                                                 19DEC02.1756
> C                                                                                19DEC02.1757
> C Calculate potential temperature of sea ice surface                             19DEC02.1758
> C                                                                                19DEC02.1759
>           THSI=TGSI(I,J)*APES(I)                                                 19DEC02.1760
>           THWT=271.4*APES(I)                                                     19DEC02.1761
>         ENDIF                                                                    19DEC02.1762
152,153c191,193
<      +       VLM,TCOL,QCOL,APECOL,ZCOL,HSFLX,HLFLX,AKHS02)                       05DEC01.1089
< c       IF (ISOIL.LE.1) THEN                                                     05DEC01.1090
---
>      +       VLM,TCOL,QCOL,APECOL,ZCOL,HSFLX,HLFLX,AKHS02,                       19DEC02.1763
>      +       HSFLXSI,HLFLXSI,                                                    19DEC02.1764
>      +       SATBRT(I,J),SEAICE(I,J),THSI,QSSI,THWT,QSWT)                        19DEC02.1765
156c196,197
< c       END IF                                                                   05DEC01.1091
---
>         HFXSI(I,J)=-RHOSFC*CP*HSFLXSI                                            19DEC02.1766
>         QFXSI(I,J)=-RHOSFC*HLFLXSI                                               19DEC02.1767
238c279
<      +       V10I,TH2,Q2,RAINC,RAINNC,SNOWC,CHS2,CKLQ)                           05DEC01.1139
---
>      +       V10I,TH2,Q2,RAINC,RAINNC,SNOWC,CHS2,CKLQ,ZNT)                       19DEC02.1768
===================================================================
physics/pbl_sfc/myepbl/sfcdif.F
diff -r3.2 -r3.4
5c5,7
<      &,                 ULM,VLM,T,Q,APE,Z,HSFLX,HLFLX,AKHS02)                    05DEC01.1253
---
>      &,                 ULM,VLM,T,Q,APE,Z,HSFLX,HLFLX,AKHS02                     19DEC02.1769
>      &,                 HSFLXSI,HLFLXSI,SFCTYP,SIFRAC                            19DEC02.1770
>      &,                 THSI,QSSI,THWT,QSWT)                                     19DEC02.1771
49a52,53
>       REAL HSFLXSI,HLFLXSI,SFCTYP,SIFRAC,THSI,QSSI,THWT,QSWT                     19DEC02.1772
>       REAL HSFLXWT,HLFLXWT                                                       19DEC02.1773
60a65,72
> C                                                                                19DEC02.1774
> C Initialize sea ice heat flux arrays to zero                                    19DEC02.1775
> C                                                                                19DEC02.1776
>       HSFLXSI=0.                                                                 19DEC02.1777
>       HLFLXSI=0.                                                                 19DEC02.1778
>       HSFLXWT=0.                                                                 19DEC02.1779
>       HLFLXWT=0.                                                                 19DEC02.1780
> c     write(6,*) 'sfctyp = ',sfctyp,' SIFRAC = ',SIFRAC,' z0 = ',z0              19DEC02.1781
72a85
> c         write(6,*) 'at sfcdif.72, zu = ',zu                                    19DEC02.1782
89a103
> cwrite(6,*) 'at sfcdif.89, zu = ',zu                                             19DEC02.1783
93a108
> cwrite(6,*) 'at sfcdif.93, zu = ',zu                                             19DEC02.1784
110a126
> cwrite(6,*) 'at sfcdif.110, zu = ',zu                                            19DEC02.1785
151a168
> cwrite(6,*) 'zsl = ',zsl,' zu = ',zu                                             19DEC02.1786
152a170
> cwrite(6,*) 'zsl = ',zsl,' zt = ',zt                                             19DEC02.1787
282a301,313
> c     write(6,*) 'at SFCDIF.282'                                                 19DEC02.1788
> C                                                                                19DEC02.1789
> C Calculate turbulent heat fluxes over sea ice grid point                        19DEC02.1790
> C                                                                                19DEC02.1791
>       IF(SIFRAC.GT.0.02)THEN                                                     19DEC02.1792
>         HSFLXSI=AKHS*(THLM-THSI)                                                 19DEC02.1793
>         HLFLXSI=AKHS*(QLM-QSSI)                                                  19DEC02.1794
>         HSFLXWT=AKHS*(THLM-THWT)                                                 19DEC02.1795
>         HLFLXWT=AKHS*(QLM-QSWT)                                                  19DEC02.1796
>         HSFLX=HSFLXSI*SIFRAC+HSFLXWT*(1.-SIFRAC)                                 19DEC02.1797
>         HLFLX=HLFLXSI*SIFRAC+HLFLXWT*(1.-SIFRAC)                                 19DEC02.1798
> c     write(6,*) 'at endif SFCDIF.283'                                           19DEC02.1799
>       ENDIF                                                                      19DEC02.1800
===================================================================
physics/pbl_sfc/pxpbl/acm.F
diff -r3.5 -r3.7
140c140
<         FS(I,1) = -UST(I,J) * TST(I) * DENSX(I,1) * PSTARI(I)                    ACM.140
---
>         FS(I,1) = -UST(I,J) * TST(I,J) * DENSX(I,1) * PSTARI(I)                  19DEC02.1801
142c142
<         FM    = -UST(I,J) * UST(I,J) * DENSX(I,1) * PSTARI(I)                    ACM.142
---
>         FM    = -USTM(I) * USTM(I) * DENSX(I,1) * PSTARI(I)                      19DEC02.1802
===================================================================
physics/pbl_sfc/pxpbl/pxpbl.F
diff -r3.5 -r3.7
382,383c382,383
<           TST(I) = 0.0                                                           PXPBL.384
<           WST(I) = 0.0                                                           PXPBL.385
---
>           TST(I,J) = 0.0                                                         19DEC02.1803
>           WST(I,J) = 0.0                                                         19DEC02.1804
590,591c590,591
<             WSS= (UST(I,J)**3+0.6*WST(I)**3)**0.33333                            PXPBL.591
<             TCONV= -8.5*UST(I,J)*TST(I)/WSS                                      PXPBL.592
---
>             WSS= (UST(I,J)**3+0.6*WST(I,J)**3)**0.33333                          19DEC02.1805
>             TCONV= -8.5*UST(I,J)*TST(I,J)/WSS                                    19DEC02.1806
607c607
<      >            ' TCONV=',TCONV,' TG(i)=',TG(i),' wst=',WST(I),                PXPBL.608
---
>      >            ' TCONV=',TCONV,' TG(i)=',TG(i),' wst=',WST(I,J),              19DEC02.1807
609c609
<      >       ' tst=',TST(I),' u,v=',US(I,1),VS(I,1),' i,j=',I,J,                 PXPBL.610
---
>      >       ' tst=',TST(I,J),' u,v=',US(I,1),VS(I,1),' i,j=',I,J,               19DEC02.1808
698c698
<      &               ILX,JLX,KL,J,DTPBL,NUDGE)                                   PXPBL.699
---
>      &               ILX,JLX,KL,J,DTPBL,NUDGE,TA2)                               19DEC02.1809
===================================================================
physics/pbl_sfc/pxpbl/sfcmm4.F
diff -r3.5 -r3.7
2c2
<      &                  KARMAN,J,ILX,KL,PSIH)                                    SFCMM4.2
---
>      &                  KARMAN,J,ILX,KL)                                         19DEC02.1810
40a41
>       REAL WS(MIX)                                                               19DEC02.1811
45,46c46
<       REAL DTG,PSIX,USTM,RBH,TSTV                                                SFCMM4.45
<       REAL WSPDX                                                                 SFCMM4.46
---
>       REAL DTG,PSIX,RBH,TSTV                                                     19DEC02.1812
70c70
<         WSPD(I) = SQRT(US(I,1) * US(I,1) + VS(I,1) * VS(I,1))                    SFCMM4.70
---
>         WS(I) = SQRT(US(I,1) * US(I,1) + VS(I,1) * VS(I,1))                      19DEC02.1813
73,77c73,76
< C       DTHVM = AMAX1(-DTHVDZ,0.0)                                               SFCMM4.73
< C       VCONV = 2.0 * SQRT(DTHVM)                                                SFCMM4.74
< C       WSPDX = SQRT(WSPD(I) * WSPD(I) + VCONV * VCONV)                          SFCMM4.75
< C       WSPDX = AMAX1(WSPDX,1.0 )                                                SFCMM4.76
<         WSPDX = AMAX1(WSPD(I),1.0 )                                              SFCMM4.77
---
>         DTHVM = AMAX1(-DTHVDZ,0.0)                                               19DEC02.1814
>         VCONV = 2.0 * SQRT(DTHVM)                                                19DEC02.1815
>         WSPD(I) = SQRT(WS(I) * WS(I) + VCONV * VCONV)                            19DEC02.1816
>         WSPD(I) = AMAX1(WSPD(I),1.0 )                                            19DEC02.1817
79c78
<         RICH(I) = GOVRTH(I) * Z(I,1) * DTHVDZ / (WSPDX * WSPDX)                  SFCMM4.79
---
>         RICH(I) = GOVRTH(I) * Z(I,1) * DTHVDZ / (WSPD(I) * WSPD(I))              19DEC02.1818
129a129
>         USTM(I) = KARMAN * WS(I) / PSIX                                          19DEC02.1819
139c139
<         TST(I) = DTG / (UST(I,J)*(RA(I,J) + RBH))                                SFCMM4.139
---
>         TST(I,J) = DTG / (UST(I,J)*(RA(I,J) + RBH))                              19DEC02.1820
144c144
<         WST(I) = UST(I,J) * (PBL(I,J) /                                          SFCMM4.144
---
>         WST(I,J) = UST(I,J) * (PBL(I,J) /                                        19DEC02.1821
148c148
<           WST(I) = 0.0                                                           SFCMM4.148
---
>           WST(I,J) = 0.0                                                         19DEC02.1822
===================================================================
physics/pbl_sfc/pxpbl/surfpx.F
diff -r3.5 -r3.7
4c4
<      &                   DTPBL,NUDGE)                                            SURFACE.4
---
>      &                   DTPBL,NUDGE,TA2)                                        19DEC02.1823
70c70
<       REAL PSIH(MIX),PSURF(MIX)                                                  SURFACE.69
---
>       REAL PSURF(MIX)                                                            19DEC02.1824
72a73
>       REAL TA2(MIX,MJX)                                                          19DEC02.1825
91a93
>       REAL PSIH,BETAH,ZNTOL,XMOL                                                 19DEC02.1826
97c99
<       DATA GAMAH/11.6/
---
>       DATA GAMAH/11.6/,BETAH/8.21/                                               19DEC02.1827
109c111
<      &            J,ILX,KL,PSIH)                                                 SURFACE.106
---
>      &            J,ILX,KL)                                                      19DEC02.1828
113c115
<         HF = UST(I,J) * TST(I)                                                   SURFACE.110
---
>         HF = UST(I,J) * TST(I,J)                                                 19DEC02.1829
167c169,194
< 144     CONTINUE                                                                 SURFACE.163
---
>           XMOL = MOL(I,J)                                                        19DEC02.1830
>           IF(MOL(I,J).GT.0.0) XMOL = AMAX1(MOL(I,J),2.0)                         19DEC02.1831
>           ZOL=Z(I,1)/XMOL                                                        19DEC02.1832
>           ZOBOL=ZOBS/XMOL                                                        19DEC02.1833
>           ZNTOL = ZNT(I,J)/XMOL                                                  19DEC02.1834
>           IF(MOL(I,J).LT.0.0) THEN                                               19DEC02.1835
>             Y = ( 1.0 - GAMAH * ZOL )**0.5                                       19DEC02.1836
>             Y0 = ( 1.0 - GAMAH * ZOBOL )**0.5                                    19DEC02.1837
>             PSIH15 =  2. * ALOG((Y+1.0)/(Y0+1.0))                                19DEC02.1838
>           ELSE                                                                   19DEC02.1839
>             IF((ZOL-ZNTOL).LE.1.0) THEN                                          19DEC02.1840
>                PSIH = -BETAH*(ZOL-ZNTOL)                                         19DEC02.1841
>              ELSE                                                                19DEC02.1842
>                PSIH = 1.-BETAH-(ZOL-ZNTOL)                                       19DEC02.1843
>              ENDIF                                                               19DEC02.1844
>              IF((ZOBOL-ZNTOL).LE.1.0) THEN                                       19DEC02.1845
>                PSIH15 = -BETAH*(ZOBOL-ZNTOL)                                     19DEC02.1846
>              ELSE                                                                19DEC02.1847
>                PSIH15 = 1.-BETAH-(ZOBOL-ZNTOL)                                   19DEC02.1848
>              ENDIF                                                               19DEC02.1849
>              PSIH15 =  PSIH - PSIH15                                             19DEC02.1850
> C            PSIH15 = PSIH(I) - PSIH(I) * ZOBS/ Z(I,1)                           19DEC02.1851
>           ENDIF                                                                  19DEC02.1852
>           TA2(I,J) = (THETA(I,1) - TST(I,J) / KARMAN *                           19DEC02.1853
>      &            (ALOG(Z(I,1) / ZOBS) - PSIH15))/CPOT(I)                        19DEC02.1854
>  144     CONTINUE                                                                19DEC02.1855
174a202,206
>           XMOL = MOL(I,J)                                                        19DEC02.1856
>           IF(MOL(I,J).GT.0.0) XMOL = AMAX1(MOL(I,J),2.0)                         19DEC02.1857
>           ZOL=Z(I,1)/XMOL                                                        19DEC02.1858
>           ZOBOL=ZOBS/XMOL                                                        19DEC02.1859
>           ZNTOL = ZNT(I,J)/XMOL                                                  19DEC02.1860
176,177d207
<             ZOL=Z(I,1)/MOL(I,J)
<             ZOBOL=ZOBS/MOL(I,J)
182c212,223
<             PSIH15 = PSIH(I) - PSIH(I) * ZOBS/ Z(I,1)
---
>             IF((ZOL-ZNTOL).LE.1.0) THEN                                          19DEC02.1861
>                PSIH = -BETAH*(ZOL-ZNTOL)                                         19DEC02.1862
>              ELSE                                                                19DEC02.1863
>                PSIH = 1.-BETAH-(ZOL-ZNTOL)                                       19DEC02.1864
>              ENDIF                                                               19DEC02.1865
>              IF((ZOBOL-ZNTOL).LE.1.0) THEN                                       19DEC02.1866
>                PSIH15 = -BETAH*(ZOBOL-ZNTOL)                                     19DEC02.1867
>              ELSE                                                                19DEC02.1868
>                PSIH15 = 1.-BETAH-(ZOBOL-ZNTOL)                                   19DEC02.1869
>              ENDIF                                                               19DEC02.1870
>              PSIH15 =  PSIH - PSIH15                                             19DEC02.1871
> C            PSIH15 = PSIH(I) - PSIH(I) * ZOBS/ Z(I,1)                           19DEC02.1872
184c225
<           T1P5 = (THETA(I,1) - TST(I) / KARMAN *                                 SURFACE.175
---
>           T1P5 = (THETA(I,1) - TST(I,J) / KARMAN *                               19DEC02.1873
185a227
>           TA2(I,J)= T1P5                                                         19DEC02.1874
===================================================================
physics/pbl_sfc/pxpbl/vdiff.F
diff -r3.5 -r3.7
75c75
<         FS(I,1) = -UST(I,J) * TST(I) * DENSX(I,1) * DTS * PSTARI                 VDIFF.75
---
>         FS(I,1) = -UST(I,J) * TST(I,J) * DENSX(I,1) * DTS * PSTARI               19DEC02.1875
77c77
<         FM    = -UST(I,J) * UST(I,J) * DENSX(I,1) * DTS * PSTARI                 VDIFF.77
---
>         FM    = -USTM(I) * USTM(I) * DENSX(I,1) * DTS * PSTARI                   19DEC02.1876
===================================================================
physics/pbl_sfc/util/Makefile
diff -r3.2 -r3.3
10c10
< 	setvegfr.o
---
> 	setvegfr.o 
14c14
< 	setvegfr.i
---
> 	setvegfr.i 
18c18
< 	setvegfr.f
---
> 	setvegfr.f 
===================================================================
physics/pbl_sfc/util/setvegfr.F
diff -r3.2 -r3.4
27a28,29
>            ALBEDO(I,J)=(1.-FRCMON)*ALBMON(I,J,M1)+FRCMON*ALBMON(I,J,M2)          19DEC02.1877
>            IF(ALBEDO(I,J).LT.1.E-3)ALBEDO(I,J)=0.                                19DEC02.1878
===================================================================
physics/pbl_sfc/util/slab.F
diff -r3.21 -r3.26
77a78,80
> C ADD NEW ARRAY WITH DENSITY OF SNOW AT MULTIPLE DEPTHS                          19DEC02.1879
>       REAL DENSNW(8)                                                             19DEC02.1880
>       DATA DENSNW/0.356,0.357,0.359,0.363,0.371,0.387,0.418,0.456/               19DEC02.1881
81a85,86
>       REAL TGWX,UPFLSI,UPFLXW,ESGW,QSGW,ESGI,QSGI                                19DEC02.1882
>       REAL HFXTW,HFXTI,QFXTW,QFXTI,DIFSNW,TGBXX                                  19DEC02.1883
89a95
>       real avsnow, zntfac, dstemp                                                19DEC02.1884
132a139,151
>         IF(SEAICE(I,J).GT.0.02)THEN                                              19DEC02.1885
>           IF(SEAICE(I,J).GT.0.10)THEN                                            19DEC02.1886
>             TGWX=271.4                                                           19DEC02.1887
>           ELSEIF(SEAICE(I,J).LT.0.01)THEN                                        19DEC02.1888
>             TGWX=TG0(I)                                                          19DEC02.1889
>           ELSE                                                                   19DEC02.1890
>            TGWX=(TG0(I)-TGSI(I,J)*SEAICE(I,J))/(1.-SEAICE(I,J))                  19DEC02.1891
>           ENDIF                                                                  19DEC02.1892
>           UPFLSI=STBOLT*TGSI(I,J)**4                                             19DEC02.1893
>           UPFLXW=STBOLT*TGWX**4                                                  19DEC02.1894
>           UPFLUX(I)=SEAICE(I,J)*UPFLSI+(1.-SEAICE(I,J))*UPFLXW                   19DEC02.1895
>           XINET(I)=EMISS(I,J)*(GLW(I,J)-UPFLSI)                                  19DEC02.1896
>         ENDIF                                                                    19DEC02.1897
135a155,166
>         IF(NINT(SATBRT(I,J)).EQ.ISICE.AND.IPOLAR.EQ.1)THEN                       19DEC02.1898
> C         PERMANENT ICE SURFACE TYPE                                             19DEC02.1899
>           HM(I)=1.82E-05*(TG0(I)-TMN(I,J))                                       19DEC02.1900
>           QS(I)=HFX(I,J)+XMOIST(INEST)*QFX(I,J)*2.836E+06                        19DEC02.1901
>         ELSEIF(SEAICE(I,J).GT.0.02)THEN                                          19DEC02.1902
>           HM(I)=1.82E-05*(TGSI(I,J)-TMN(I,J))                                    19DEC02.1903
>           IF(SEAICE(I,J).GT.0.99)THEN                                            19DEC02.1904
>             QS(I)=HFX(I,J)+XMOIST(INEST)*QFXSI(I,J)*2.836E+06                    19DEC02.1905
>           ELSE                                                                   19DEC02.1906
>             QS(I)=HFXSI(I,J)+XMOIST(INEST)*QFXSI(I,J)*2.836E+06                  19DEC02.1907
>           ENDIF                                                                  19DEC02.1908
>         ENDIF                                                                    19DEC02.1909
156,158c187,215
<                 ESG=SVP1*EXP(SVP2*(TSLB(I,J,1)-SVPT0)/(TSLB(I,J,1)               SLAB.120
<      -              -SVP3))                                                      SLAB.121
<                 QSG=EP2*ESG/(PS-ESG)                                             SLAB.122
---
>                 IF(NINT(SATBRT(I,J)).EQ.ISICE.AND.IPOLAR.EQ.1)THEN               19DEC02.1910
> C      USE ICE SATURATION                                                        19DEC02.1911
>                   ESG=.611*EXP(22.514-6.15E3/TSLB(I,J,1))                        19DEC02.1912
>                   QSG=.622*ESG/(PS-ESG)                                          19DEC02.1913
>                   HFXT=FLHC(I)*(THG-THX(I,KL))                                   19DEC02.1914
>                   QFXT=FLQC(I)*(QSG-QX(I,KL))                                    19DEC02.1915
>                   QS(I)=HFXT+XMOIST(INEST)*QFXT*2.836E+06                        19DEC02.1916
>                   HFX(I,J)=HFX(I,J)+HFXT                                         19DEC02.1917
>                   QFX(I,J)=QFX(I,J)+QFXT                                         19DEC02.1918
>                 ELSEIF(SEAICE(I,J).GT.0.02)THEN                                  19DEC02.1919
>                   ESGW=SVP1*EXP(SVP2*(271.4-SVPT0)/(271.4-SVP3))                 19DEC02.1920
>                   QSGW=EP2*ESGW/(PS-ESGW)                                        19DEC02.1921
>                   ESGI=.611*EXP(22.514-6.15E3/TSLB(I,J,1))                       19DEC02.1922
>                   QSGI=.622*ESGI/(PS-ESGI)                                       19DEC02.1923
>                   HFXTW=FLHC(I)*((271.4/PISFC(I))-THX(I,KL))                     19DEC02.1924
>                   HFXTI=FLHC(I)*(THG-THX(I,KL))                                  19DEC02.1925
>                   QFXTW=FLQC(I)*(QSGW-QX(I,KL))                                  19DEC02.1926
>                   QFXTI=FLQC(I)*(QSGI-QX(I,KL))                                  19DEC02.1927
>                   QS(I)=HFXTI+XMOIST(INEST)*QFXTI*2.836E+06                      19DEC02.1928
>                   HFX(I,J)=HFX(I,J)+HFXTI*SEAICE(I,J)+                           19DEC02.1929
>      +              HFXTW*(1.-SEAICE(I,J))                                       19DEC02.1930
>                   QFX(I,J)=QFX(I,J)+QFXTI*SEAICE(I,J)+                           19DEC02.1931
>      +              QFXTW*(1.-SEAICE(I,J))                                       19DEC02.1932
>                   HFXSI(I,J)=HFXSI(I,J)+HFXTI                                    19DEC02.1933
>                   QFXSI(I,J)=QFXSI(I,J)+QFXTI                                    19DEC02.1934
>                 ELSE                                                             19DEC02.1935
>                   ESG=SVP1*EXP(SVP2*(TSLB(I,J,1)-SVPT0)/                         19DEC02.1936
>      -                (TSLB(I,J,1)-SVP3))                                        19DEC02.1937
>                   QSG=EP2*ESG/(PS-ESG)                                           19DEC02.1938
160,162c217,219
<                 HFXT=FLHC(I)*(THG-THX(I,KL))                                     SLAB.124
<                 QFXT=FLQC(I)*(QSG-QX(I,KL))                                      SLAB.125
<                 QS(I)=HFXT+XMOIST(INEST)*QFXT*XLV                                SLAB.126
---
>                   HFXT=FLHC(I)*(THG-THX(I,KL))                                   19DEC02.1939
>                   QFXT=FLQC(I)*(QSG-QX(I,KL))                                    19DEC02.1940
>                   QS(I)=HFXT+XMOIST(INEST)*QFXT*XLV                              19DEC02.1941
164,165c221,223
<                 HFX(I,J)=HFX(I,J)+HFXT                                           SLAB.128
<                 QFX(I,J)=QFX(I,J)+QFXT                                           SLAB.129
---
>                   HFX(I,J)=HFX(I,J)+HFXT                                         19DEC02.1942
>                   QFX(I,J)=QFX(I,J)+QFXT                                         19DEC02.1943
>                 ENDIF                                                            19DEC02.1944
168,170c226,248
<               FLUX(I,L+1)=-DIFSL*CAPG(I,J)*(TSLB(I,J,L+1)-TSLB(I,J,L))/(         SLAB.132
<      +                    ZS(L+1)-ZS(L))                                         SLAB.133
<               DTSDT(I)=-(FLUX(I,L+1)-FLUX(I,L))/(DZS(L)*CAPG(I,J))               SLAB.134
---
>               IF((SNOWC(I,J).GT.0.5).AND.(L.LE.2).AND.IPOLAR.EQ.1)THEN           19DEC02.1945
> C        THERMAL DIFFUSIVITY THRU SNOW (YEN 1981)                                19DEC02.1946
>                DIFSNW=2.22362*(0.5*(DENSNW(L)+DENSNW(L+1)))**1.885               19DEC02.1947
>                FLUX(I,L+1)=-DIFSNW*(TSLB(I,J,L+1)-TSLB(I,J,L))                   19DEC02.1948
>      +           /(ZS(L+1)-ZS(L))                                                19DEC02.1949
>                DTSDT(I)=-(FLUX(I,L+1)-FLUX(I,L))/                                19DEC02.1950
>      +           (DZS(L)*(DENSNW(L)/0.917)*917.*32000./18.)                      19DEC02.1951
>               ELSEIF(NINT(SATBRT(I,J)).EQ.ISICE.AND.IPOLAR.EQ.1)THEN             19DEC02.1952
>                 DIFSNW=2.22362*(0.5*(DENSNW(L)+DENSNW(L+1)))**1.885              19DEC02.1953
>                 FLUX(I,L+1)=-DIFSNW*(TSLB(I,J,L+1)-TSLB(I,J,L))                  19DEC02.1954
>      +            /(ZS(L+1)-ZS(L))                                               19DEC02.1955
>                 DTSDT(I)=-(FLUX(I,L+1)-FLUX(I,L))/                               19DEC02.1956
>      +            (DZS(L)*(DENSNW(L)/0.917)*917.*34000./18.)                     19DEC02.1957
>               ELSEIF(SEAICE(I,J).GT.0.02)THEN                                    19DEC02.1958
>                 DIFSNW=1.9                                                       19DEC02.1959
>                 FLUX(I,L+1)=-DIFSNW*(TSLB(I,J,L+1)-TSLB(I,J,L))                  19DEC02.1960
>      +            /(ZS(L+1)-ZS(L))                                               19DEC02.1961
>                 DTSDT(I)=-(FLUX(I,L+1)-FLUX(I,L))/(DZS(L)*CAPG(I,J))             19DEC02.1962
>               ELSE                                                               19DEC02.1963
>                 FLUX(I,L+1)=-DIFSL*CAPG(I,J)*(TSLB(I,J,L+1)                      19DEC02.1964
>      +                      -TSLB(I,J,L))/(ZS(L+1)-ZS(L))                        19DEC02.1965
>                 DTSDT(I)=-(FLUX(I,L+1)-FLUX(I,L))/(DZS(L)*CAPG(I,J))             19DEC02.1966
>               ENDIF                                                              19DEC02.1967
176c254,275
<               IF(IFSNOW(INEST).EQ.1.AND.L.EQ.1)THEN                              SLAB.136
---
>               IF(NINT(SATBRT(I,J)).EQ.ISICE.AND.IPOLAR.EQ.1)THEN                 19DEC02.1968
> C MELT PERMANENT ICE IF TSLB.GT.273.155                                          19DEC02.1969
>                 IF(TSLB(I,J,L).GT.273.155)THEN                                   19DEC02.1970
>                   TSLB(I,J,L)=273.155                                            19DEC02.1971
>                 ENDIF                                                            19DEC02.1972
>               ELSEIF(SEAICE(I,J).GT.0.02)THEN                                    19DEC02.1973
> C MELT SEA ICE IF TSLB.GT.271.4 (AND SET SEA ICE DEPTH)                          19DEC02.1974
>                 TSLB(I,J,MLX)=271.4                                              19DEC02.1975
>                 IF(TSLB(I,J,L).GT.273.155)TSLB(I,J,L)=273.155                    19DEC02.1976
>                 IF((XLAT(I,J).GT.0.).AND.(SEAICE(I,J).LT.0.9)                    19DEC02.1977
>      +            .AND.(L.EQ.7))THEN                                             19DEC02.1978
>                   TSLB(I,J,L)=271.4                                              19DEC02.1979
>                 ENDIF                                                            19DEC02.1980
>                 IF((XLAT(I,J).GT.0.).AND.(SEAICE(I,J).LT.0.6)                    19DEC02.1981
>      +            .AND.(L.EQ.6))THEN                                             19DEC02.1982
>                   TSLB(I,J,L)=271.4                                              19DEC02.1983
>                 ENDIF                                                            19DEC02.1984
>                 IF((XLAT(I,J).LT.0.).AND.(L.GE.6))THEN                           19DEC02.1985
>                   TSLB(I,J,L) = 271.4                                            19DEC02.1986
>                 ENDIF                                                            19DEC02.1987
>               ENDIF                                                              19DEC02.1988
>               IF(IFSNOW(INEST).GE.1.AND.L.EQ.1)THEN                              19DEC02.1989
178c277,299
<                   TSLB(I,J,1)=273.16                                             SLAB.138
---
>                   if(ifsnow(inest).eq.2)then                                     19DEC02.1990
> c     snow melts                                                                 19DEC02.1991
> c     maximum available snow for melting is taken as 1 mm/hr (liquid equiv)      19DEC02.1992
> c      0.5 accounts for leapfrog step to avoid double-counting snow melt         19DEC02.1993
>                     avsnow=amin1(snowc(i,j),0.5*deltsm*rnsoil/3600.)             19DEC02.1994
> c     reduce available snow for forests and urban (large roughness length)       19DEC02.1995
>                     zntfac=amin1(1.0,0.1/znt(i,j))                               19DEC02.1996
>                     avsnow=zntfac*avsnow                                         19DEC02.1997
>                     dstemp=TSLB(I,J,1)-273.16                                    19DEC02.1998
>                     if(avsnow.gt.capg(i,j)*dzs(1)*dstemp/xlf0)then               19DEC02.1999
> c     enough available snow to cool tg to 0 C                                    19DEC02.2000
>                       snowc(i,j)=snowc(i,j)-capg(i,j)*dzs(1)*dstemp/xlf0         19DEC02.2001
>                       tslb(i,j,1)=273.16                                         19DEC02.2002
>                     else                                                         19DEC02.2003
> c     not enough available snow to cool tg to 0 C                                19DEC02.2004
> c         so cool to melt all available snow                                     19DEC02.2005
>                       tslb(i,j,1)=tslb(i,j,1)-xlf0*avsnow/                       19DEC02.2006
>      -                            (capg(i,j)*dzs(1))                             19DEC02.2007
>                       snowc(i,j)=snowc(i,j)-avsnow                               19DEC02.2008
>                     endif                                                        19DEC02.2009
>                   else                                                           19DEC02.2010
>                     tslb(i,j,1)=273.16                                           19DEC02.2011
>                   endif                                                          19DEC02.2012
185a307,310
>                 IF(SEAICE(I,J).GT.0.02)THEN                                      19DEC02.2013
>                   HFXSI(I,J)=HFXSI(I,J)*RNSOIL                                   19DEC02.2014
>                   QFXSI(I,J)=QFXSI(I,J)*RNSOIL                                   19DEC02.2015
>                 ENDIF                                                            19DEC02.2016
199a325,340
>         IF(NINT(SATBRT(I,J)).EQ.ISICE.AND.IPOLAR.EQ.1)THEN                       19DEC02.2017
>           IF(TGB(I,J).GT.273.155)THEN                                            19DEC02.2018
>             TGB(I,J)=273.155                                                     19DEC02.2019
>           ENDIF                                                                  19DEC02.2020
>         ELSEIF(SEAICE(I,J).GT.0.02)THEN                                          19DEC02.2021
>             TGSI(I,J)=TGSI(I,J)+DELTSM*DTHGDT(I)                                 19DEC02.2022
>             DTHGDT(I)=SEAICE(I,J)*DTHGDT(I)                                      19DEC02.2023
>             TGB(I,J)=TG0(I)+DELTSM*DTHGDT(I)                                     19DEC02.2024
>             TGBXX=SEAICE(I,J)*273.155+(1.-SEAICE(I,J))*271.4                     19DEC02.2025
>             IF(TGB(I,J).GT.TGBXX)THEN                                            19DEC02.2026
>               TGB(I,J)=TGBXX                                                     19DEC02.2027
>             ENDIF                                                                19DEC02.2028
>             IF(TGSI(I,J).GT.273.155)THEN                                         19DEC02.2029
>               TGSI(I,J)=273.155                                                  19DEC02.2030
>             ENDIF                                                                19DEC02.2031
>         ENDIF                                                                    19DEC02.2032
210,212c351,375
<           TSCVN(I)=273.16                                                        SLAB.169
<         ELSE                                                                     SLAB.170
<           TSCVN(I)=TSCVN(I)                                                      SLAB.171
---
>           if(ifsnow(inest).eq.2.and.isoil.eq.0)then                              19DEC02.2033
> c     snow melts                                                                 19DEC02.2034
> c     maximum available snow for melting is taken as 1 mm/hr (liquid equiv)      19DEC02.2035
> c      0.5 accounts for leapfrog step to avoid double-counting snow melt         19DEC02.2036
>             avsnow=amin1(snowc(i,j),0.5*deltsm/3600.)                            19DEC02.2037
> c     reduce available snow for forests and urban (large roughness length)       19DEC02.2038
>             zntfac=amin1(1.0,0.1/znt(i,j))                                       19DEC02.2039
>             avsnow=zntfac*avsnow                                                 19DEC02.2040
>             dstemp=TSCVN(I)-273.16                                               19DEC02.2041
>             if(avsnow.gt.capg(i,j)*dzs(1)*dstemp/xlf0)then                       19DEC02.2042
> c     enough available snow to cool tg to 0 C                                    19DEC02.2043
>               snowc(i,j)=snowc(i,j)-capg(i,j)*dzs(1)*dstemp/xlf0                 19DEC02.2044
>               TSCVN(I)=273.16                                                    19DEC02.2045
>             else                                                                 19DEC02.2046
> c     not enough available snow to cool tg to 0 C                                19DEC02.2047
> c         so cool to melt all available snow                                     19DEC02.2048
>               TSCVN(I)=TSCVN(I)-xlf0*avsnow/(capg(i,j)*dzs(1))                   19DEC02.2049
>               snowc(i,j)=snowc(i,j)-avsnow                                       19DEC02.2050
>             endif                                                                19DEC02.2051
>           else if(ifsnow(inest).eq.2.and.isoil.eq.1)then                         19DEC02.2052
> c   snow melt already accounted for so just set ground temp                      19DEC02.2053
>             TSCVN(I)=TSLB(I,J,1)                                                 19DEC02.2054
>           else                                                                   19DEC02.2055
>             TSCVN(I)=273.16                                                      19DEC02.2056
>           endif                                                                  19DEC02.2057
214a378,381
>       if(ifsnow(inest).eq.2)then                                                 19DEC02.2058
> c      snow sublimates proportionally to QFX                                     19DEC02.2059
>         snowc(i,j)=amax1(snowc(i,j)-0.5*qfx(i,j)*deltsm,0.0)                     19DEC02.2060
>       endif                                                                      19DEC02.2061
231c398,399
<         IF (IBLTYP(INEST).EQ.2) TIMFAC = DELTSM/DT                               07NOV00.2082
---
>         IF (IBLTYP(INEST).EQ.2.OR.IBLTYP(INEST).EQ.6)                            19DEC02.2062
>      -      TIMFAC = DELTSM/DT                                                   19DEC02.2063
