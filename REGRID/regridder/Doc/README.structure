INTRODUCTION  April 1999
------------------------

The source code for the regridder program is contained within a single
directory.  The source code is standard FORTRAN 90, though the file 
extensions are set up to allow each of the routines to be preprocessed 
by cpp (but none currently need to be).


CAVEAT EMPTOR
-------------

The current version of the regridder program has a known
flaw: the southern hemisphere.  No tests have been done in the 
southern hemisphere, so it is assumed that there are problems 
that need to be fixed (particularly the interpolation from one 
projection to another).


SUPPORTED CAPABILITIES
----------------------

The regridder program is able to accept specific files (that have been 
generated by one of the pregrid programs) and use them to create
an MM5-formatted DATAGRID file.  The output projection and grid
definition is that of the input MM5-formatted TERRAIN file (using the
information in the TERRAIN header).  The program is able to read the 
newer format of the TERRAIN file which may include information for the
land surface model.  Most of the options to the regridder program are 
provided through the NAMELIST file (namelist.input).

The program can handle separate times with a single run, but requires
a new program run for each different output grid (i.e, each new
input TERRAIN file). 

A significant amount of control is provided for the standard-out print
from the program.  This is a handy tool for debugging a problem.

Available Input Projections

For the available input projections of the first-guess data, the program 
can currently accept a regular latitude-longitude grid, a Gaussian
grid (which is treated as a regular latitude-longitude projection), a
polar stereo graphic domain, and a Lambert conformal grid.  

1) Regular Latitude-Longitude (llflag = 0)

The program is able to use any regularly spaced data in latitude-
longitude space.  The definition requires the starting location and
a constant delta latitude and a constant delta longitude.  The
delta latitude or delta longitude may each be positive or negative,
and they can be different resolutions.  The projection
may be global, but that is not necessary.  Since Gaussian grids are
similar, though not reaching either pole, these are handled also as
a cylindrical equidistant projection.  This projection has been 
thoroughly tested in both hemispheres.

2) Lambert Conformal (llflag = 3), Polar Stereographic (llflag = 5)

The Lambert conformal and polar stereographic projections are defined 
by information traditionally given in the GRIB files (true latitude(s), 
starting grid point, grid distance in the X and Y directions, and the
central longitude).  The input winds are rotated from the map projection 
to a meteorological orientation, then they are rotated to the model
grid projection.

First-Guess Input Format

The first-guess format is more fully described in the README.v3-format 
file.  The regridder program accepts a single 2d field after a few lines
of header information.  Therefore, each 2d field can be a different size,
with different projection characteristics, or even a completely differnt
projection.  After each 2d field is ingested, it is interpolated to the
model grid immediately.  The original space the the 2d field is 
removed.

There are presently decoders to handle several input formats.  These range
from the traditional NCAR archives that have been used for the past
20 years, to the new NCEP/NCAR Reanalysis Project (NNRP) data.  Decoder
programs for some NCEP forecast products are also available.  Whether the
input is from an NCAR supplied decoder or the user provides a data set
from a personal decoder, the input to the regridder program is defined
to be a simple standard format.  This information is located in the
../pregrid directories.

The fields that require special handling, such as the masked fields, have
to be described a priori.  As more fields with special handling 
requirements become used in the program, the regridder program will
be modified.

Output Grid

The output grid definition is that of the input MM5-formatted TERRAIN
file.  This can either be a coarse or a fine grid.  The TERRAIN file
can be the old format (two 2d fields of TERRAIN and LAND USE), or a 
newer TERRAIN file with more than fifty 2d fields.  

Error Tests

The program has many error tests at the locations most prevalent to
a mistake: the NAMELIST input and the file I/O.  Since the user
does not supply the grid information (size or location), or the 
expected size of the number of vertical levels, these typical
problem areas are removed.  Most problems are fixed through a 
modification of the information contained in the NAMELIST file, making
it consistent with the expected file names.

Obvious errors concerning dates, pressure levels and file names are
trapped.  Some tests for more subtle errors (no data for temperature) are 
already included in the program, but this area is expected to be developed
as the program gets more exposure to a wider input data stream.


NAMING CONVENTIONS
------------------

Most of the routines that are directly called by the main program
have the prefix "proc_" in the file name and routine name.

The filenames and the routine names are the same, except for the 
modules.  While all modules have a similar name as their file name
(the prefix "module_" notwithstanding), it is possible for the 
modules to have more than a single routine after the CONTAINS 
statement.

There are three required input files for the regridder program: the
NAMELIST (namelist.input), the MM5-formatted TERRAIN file (name
contained in the NAMELIST file), and the first-guess fields from 
the pregrid program (names generated from the information in the 
NAMELIST).


PROGRAMMING CONVENTIONS
-----------------------

The units in the regridder program are typically MKS:  the 
temperature is in K, the wind speeds are in m/s, the height
is in m, the relative humidity is a %, and the pressure is
in Pa.  

For the projection routines, the distances are in km and the 
angles are in degrees east and degrees north.

Most of the locations where a fatal problem is detected, the user
is notified by a print statement and a (hopefully) mnemonic
stop message is provided.


STRUCTURE OUTLINE
-----------------

The regridder program is comprised of a main program which calls
approximately a dozen subroutines.  Most of these calls are made
without arguments, as the data is passed through shared modules.
The main program (regridder.F) has a preamble that describes the
operation of each routine and the order of the various calls.  
The loop of the time periods to process is in the regridder main
program, after the NAMELIST and TERRAIN files are processed (only
required once per regridder run).  Following is a simplified calling 
structure for most of the larger routines in the program.

regridder
        1) proc_namelist
        2) proc_read_terrain 
                 2a) compute_terrestial_info
                 2b) llxy_lam, llxy_ste, llxy_mer
        Loop over times requested in NAMELIST
                 Using the NAMELIST date/time info, compute the
                    starting and ending times, and loop through the 
                    available times      
                 Compute the current date/time, both CHARACTER and INTEGER
                 3) proc_ingest_first_guess
                      Loop over file names
                          Loop over each field
                               3a) module_first_guess_map (lc_cone_factor, 
                                   find_center_longitude_lambert, center_latitude_lambert,
                                   find_center_longitude_polar, center_latitude_polar)
                               3b) llxy_lam, llxy_ste
                               3a) proc_grid_store
                          End Loop over each field
                      End Loop over file names
                 4) proc_list_to_array
                 5) proc_zap_space_list
                 6) proc_make_dot_point_data
                 7) proc_map_to_met_winds
                 8) proc_met_to_map_winds
                 9) for initial time only
                       proc_make_big_header
                10) proc_make_small_header
                11) proc_output
                12) proc_zap_space_array
        End Time Loop

This section provides a cursory view of functions of each of the 
major routines listed in the previous calling tree.  An initial 
look at the required data structures is first necessary.  The routines
that require the data in the two main data storage locations (the
linked list and the array of all arrays) must use the same modules
where the data type is defined.  With the data itself in the 
declaration of the module, a good deal of information is passed around
the program without explicit arguments to routines.

module_link_list_info

The data input from the first-guess fields are immediately interpolated
to the output model grid upon input into the program.  The only data 
stored in the linked list is the pressure level interpolated fields.
The data is stored with two kinds of defined types.  The first type is
for each new field that is ingested (i.e., temperature, relative
humidity).  The second type is the actual data that is to be stored.
The 2d grid of data, the pressure level and a pointer to the next level
are generated.  The linked list is therefore two-dimensional: going
across for each new field, and going down for each level of the
particular field.  After all of the data for a particular time period
has been ingested, the program cleans up the linked list and uses it to
build arrays of 3d and 2d arrays.

module_gridded_data

The data from the first-guess files are combined with the 2d data from 
the MM5-formatted TERRAIN file and the internally computed projection
specific information (i.e., map scale factors, Coriolis parameter) in the
array of 3d arrays (all_3d) and the array of 2d arrays (all_2d).  This
information is significantly easier to handle than when it resides
in the linked list.  After the data is loaded into the respective
array of arrays, the storage for the linked list is returned to the OS.
After each time period is finished, the data in the array of all arrays
is also returned to the OS.  The program is not guaranteed to have
time periods with the identical amount of data.  It is the user's
responsibility to make sure the more exotic requirements (such as for
the the new land/surface model) are available at all required times
from the first-guess data.

proc_namelist

This routine is tasked with processing the NAMELIST data from the 
file namelist.input.  If this file does not exist, the routine 
gracefully exits.  The data from each of the NAMELIST records is
ingested and printed out for the user.  Each of the NAMELIST
variables is assigned to a permanent storage location in the 
NAMELIST structure.  A few error checks are made to determine things
such as if the ending date is before the starting date, or if there 
are replicated new pressures.  The total number of time periods to 
process is computed.

This routine calls the advance_date routine to compute the dates
to process.  This routine uses the following modules: namelist_info 
and file_data.

proc_read_terrain 

This routine reads the MM5-formatted TERRAIN file (file name terrain).
If the file does not exist, the routine gracefully exits.  The routine
uses the information in the TERRAIN header to define the output
grid parameters.  All of the 2d fields from the TERRAIN program
are ingested.  The projection based 2d fields (Coriolis, map scale
factors, latitude and longitude) for both cross and dot points
are computed.  For debugging purposes, the latitude/longitude to
(X,Y) and (X,Y) to latitude/longitude computations are performed.
The small required space for the I/O is released.  

This routine calls the routines compute_terrestial_info and the llxy 
options (llxy_lam, llxy_ste, llxy_mer).  This routine uses the following
modules: header_data, terrain_data, file_data, namelist_info, and
constants.

proc_ingest_first_guess

This routine has two loops: the outer loop is over the number of 
input files to process for this time period and the inner loop is
the number of 2d arrays found in each input file.  Each input
file of the first-guess data is built and tested for existence.
If it exists, the file is opened.  If none of the files to open
exists, the program gracefully quits.  For each input file, the
routine loops through the major read loop for each of the 2d arrays.
The 2d arrays are prefaced by several header records describing the
array (size, name, projection, date, and description).  The name of
the field is registered to keep track of all of the different
variables that have been input.  A computation is performed for
Lambert or polar projections to compute the center latitude, then the 
input array is interpolated to the model grid.  If the input field
is recognized as a masked field, special interpolation techniques
are employed.  Each 2d field that has been interpolated to the
model grid is stored in the two-dimensional linked list according
to the variable name (not ordered) and pressure level (ordered).
A test is made to determine that at least a single input file
was opened, and a print of the input 3d and 2d fields is
available.

This routine calls routines to compute the center latitude of the input
first-guess grid (lc_cone_factor, find_center_longitude_lambert, 
find_center_longitude_polar, center_latitude_lambert, and 
center_latitude_polar) and routines compute the (X,Y) coordinate in the
first-guess grid of each (I,J) in the model space (llxy_lam and llxy_ste).
This routine uses the following modules: first_guess_data, first_guess_map, 
header_data, terrain_data, file_data, namelist_info, gridded_data, 
link_list_info, and constants.


proc_list_to_array

The purpose of this routine is to transfer the data in the linked
list to two arrays of arrays (for 3d and 2d data).  The number of
3d levels is computed, and then the size of the array for the
3d arrays (all_3d) and the the size of the arrays for the 2d arrays
(all_2d) is computed, and the space is ALLOCATED.  The data is
vertically interpolated (if required) during the transfer from the
linked list.  A surface layer for each 3d field is provided from the 
100000 Pa level is none is found in the input first-guess data.  Tests
for duplicated pressures are made.

This routine calls no other routines.  This routine uses the following
modules: header_data, namelist_info, link_list_info, gridded_data, 
and terrain_data.


proc_zap_space_list

This routine removes the large linked list storage from the program
since the data has been transferred to the two array of arrays.

This routine calls no other routines.  THis routine uses the following
modules: link_list_info.


proc_make_dot_point_data

This routine is charged with the many mop-up activities associated
with the problems that stem from the wide possibilities of the 
first-guess input.  The data is tested for sufficiency, to see if 
enough data exists for the rest of the modeling system to continue.
For use in later processing, the locations of key fields are saved.
A snow cover field is generated from the snow depth field.  Several
of the 2d fields have their names modified to be consistent with
the current modeling system conventions.  The dot point staggering
is applied to the input first-guess 2d fields.  The 2d data from the
MM5-formatted TERRAIN file are loaded in the array of all 2d arrays.
The minimum relative humidity is set to 10%.  The terrain elevation 
is substituted for the surface layer of the geopotential height field.

This routine calls the crs2dot utility routine to interpolate the
cross point data to dot points.  This routine uses the following
modules: header_data, namelist_info, terrain_data, gridded_data, and
constants.

proc_map_to_met_winds

This routine rotates the input first-guess winds (that have been 
interpolated to the model grid) to meteorological winds, based upon 
the first-guess projection and center longitude.

This routine calls no other routines.  This routine uses the following
modules: header_data, gridded_data, namelist_info, and constants.

proc_met_to_map_winds

This routine rotates the input first-guess winds (that have been 
interpolated to the model grid) to the output map projection
orientation.

This routine calls no other routines.  This routine uses the following
modules: header_data, gridded_data, namelist_info, and constants.

proc_make_big_header

This routine builds the once-only big header of the MM5 V3 format.
The information is predominately the starting date and the 
value of ptop.

This routine calls no other routines.  This routine uses the following
modules: header_data and namelist_info.

proc_make_small_header

This routine builds the small header that preceeds every 3d, 2d and
1d field in the output data set.  The information is sufficient to
define the variable dimension and complete name, the date and the
forecast hour of the analysis.

This routine calls no other routines.  This routine uses the following
modules: header_data, namelist_info, gridded_data and first_guess_data.

proc_output

This routine opens the output file for the first time period.  The 
header, the 3d data and the 2d data are written to the file in a 
format similar to the MM5-formatted DATAGRID file.  A final clean
up is done of the masked soil temperature fields based upon the
land/sea mask and the sea ice.  If this is the last time period, 
the file is closed.

This routine calls no other routines.  This routine uses the following
modules: header_data, namelist_info, file_data, gridded_data, and 
constants.

proc_zap_space_array

This routine deletes the memory requested for each time period for the
two array of arrays.

This routine calls no other routines.  This routine uses the following
modules: namelist_info, terrain_data, and gridded_data.
